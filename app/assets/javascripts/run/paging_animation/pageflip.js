// Generated by CoffeeScript 1.9.2
var PageFlip;

PageFlip = (function() {
  function PageFlip() {
    var book, canvas, context, flips, i, j, len, mouse, page, pages, ref;
    this.PAGE_WIDTH = 400;
    this.PAGE_HEIGHT = 250;
    this.BOOK_WIDTH = 830;
    this.BOOK_HEIGHT = 260;
    this.PAGE_Y = (this.BOOK_HEIGHT - this.PAGE_HEIGHT) / 2;
    this.CANVAS_PADDING = 60;
    page = 0;
    canvas = document.getElementById("pageflip-canvas");
    context = canvas.getContext("2d");
    mouse = {
      x: 0,
      y: 0
    };
    flips = [];
    book = document.getElementById("book");
    pages = book.getElementsByTagName("section");
    len = pages.length;
    for (i = j = 0, ref = len - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      pages[i].style.zIndex = len - i;
      flips.push({
        progress: 1,
        target: 1,
        page: pages[i],
        dragging: false
      });
    }
    canvas.width = this.BOOK_WIDTH + (this.CANVAS_PADDING * 2);
    canvas.height = this.BOOK_HEIGHT + (this.CANVAS_PADDING * 2);
    canvas.style.top = -this.CANVAS_PADDING + "px";
    canvas.style.left = -this.CANVAS_PADDING + "px";
    setInterval(this.render, 1000 / 60);
    document.addEventListener("mousemove", mouseMoveHandler, false);
    document.addEventListener("mousedown", mouseDownHandler, false);
    document.addEventListener("mouseup", mouseUpHandler, false);
  }

  PageFlip.prototype.mouseMoveHandler = function(event) {
    mouse.x = event.clientX - book.offsetLeft - (this.BOOK_WIDTH / 2);
    return mouse.y = event.clientY - book.offsetTop;
  };

  PageFlip.prototype.mouseDownHandler = function(event) {
    if (Math.abs(mouse.x) < this.PAGE_WIDTH) {
      if (mouse.x < 0 && page - 1 >= 0) {
        flips[page - 1].dragging = true;
      } else if (mouse.x > 0 && page + 1 < flips.length) {
        flips[page].dragging = true;
      }
    }
    return event.preventDefault();
  };

  PageFlip.prototype.mouseUpHandler = function(event) {
    var i, j, page, ref, results;
    results = [];
    for (i = j = 0, ref = flips.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (flips[i].dragging) {
        if (mouse.x < 0) {
          flips[i].target = -1;
          page = Math.min(page + 1, flips.length);
        } else {
          flips[i].target = 1;
          page = Math.max(page - 1, 0);
        }
      }
      results.push(flips[i].dragging = false);
    }
    return results;
  };

  PageFlip.prototype.render = function() {
    var flip, i, j, len, ref, results;
    context.clearRect(0, 0, canvas.width, canvas.height);
    len = flips.length;
    results = [];
    for (i = j = 0, ref = len - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      flip = flips[i];
      if (flip.dragging) {
        flip.target = Math.max(Math.min(mouse.x / this.PAGE_WIDTH, 1), -1);
      }
      flip.progress += (flip.target - flip.progress) * 0.2;
      if (flip.dragging || Math.abs(flip.progress) < 0.997) {
        results.push(this.drawFlip(flip));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  PageFlip.prototype.drawFlip = function(flip) {
    var foldGradient, foldWidth, foldX, leftShadowGradient, leftShadowWidth, paperShadowWidth, rightShadowGradient, rightShadowWidth, strength, verticalOutdent;
    strength = 1 - Math.abs(flip.progress);
    foldWidth = (this.PAGE_WIDTH * 0.5) * (1 - flip.progress);
    foldX = this.PAGE_WIDTH * flip.progress + foldWidth;
    verticalOutdent = 20 * strength;
    paperShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(1 - flip.progress, 0.5), 0);
    rightShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(strength, 0.5), 0);
    leftShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(strength, 0.5), 0);
    flip.page.style.width = Math.max(foldX, 0) + "px";
    context.save();
    context.translate(this.CANVAS_PADDING + (this.BOOK_WIDTH / 2), this.PAGE_Y + this.CANVAS_PADDING);
    context.strokeStyle = 'rgba(0,0,0,' + (0.05 * strength) + ')';
    context.lineWidth = 30 * strength;
    context.beginPath();
    context.moveTo(foldX - foldWidth, -verticalOutdent * 0.5);
    context.lineTo(foldX - foldWidth, this.PAGE_HEIGHT + (verticalOutdent * 0.5));
    context.stroke();
    rightShadowGradient = context.createLinearGradient(foldX, 0, foldX + rightShadowWidth, 0);
    rightShadowGradient.addColorStop(0, 'rgba(0,0,0,' + (strength * 0.2) + ')');
    rightShadowGradient.addColorStop(0.8, 'rgba(0,0,0,0.0)');
    context.fillStyle = rightShadowGradient;
    context.beginPath();
    context.moveTo(foldX, 0);
    context.lineTo(foldX + rightShadowWidth, 0);
    context.lineTo(foldX + rightShadowWidth, this.PAGE_HEIGHT);
    context.lineTo(foldX, this.PAGE_HEIGHT);
    context.fill();
    leftShadowGradient = context.createLinearGradient(foldX - foldWidth - leftShadowWidth, 0, foldX - foldWidth, 0);
    leftShadowGradient.addColorStop(0, 'rgba(0,0,0,0.0)');
    leftShadowGradient.addColorStop(1, 'rgba(0,0,0,' + (strength * 0.15) + ')');
    context.fillStyle = leftShadowGradient;
    context.beginPath();
    context.moveTo(foldX - foldWidth - leftShadowWidth, 0);
    context.lineTo(foldX - foldWidth, 0);
    context.lineTo(foldX - foldWidth, this.PAGE_HEIGHT);
    context.lineTo(foldX - foldWidth - leftShadowWidth, this.PAGE_HEIGHT);
    context.fill();
    foldGradient = context.createLinearGradient(foldX - paperShadowWidth, 0, foldX, 0);
    foldGradient.addColorStop(0.35, '#fafafa');
    foldGradient.addColorStop(0.73, '#eeeeee');
    foldGradient.addColorStop(0.9, '#fafafa');
    foldGradient.addColorStop(1.0, '#e2e2e2');
    context.fillStyle = foldGradient;
    context.strokeStyle = 'rgba(0,0,0,0.06)';
    context.lineWidth = 0.5;
    context.beginPath();
    context.moveTo(foldX, 0);
    context.lineTo(foldX, this.PAGE_HEIGHT);
    context.quadraticCurveTo(foldX, this.PAGE_HEIGHT + (verticalOutdent * 2), foldX - foldWidth, this.PAGE_HEIGHT + verticalOutdent);
    context.lineTo(foldX - foldWidth, -verticalOutdent);
    context.quadraticCurveTo(foldX, -verticalOutdent * 2, foldX, 0);
    context.fill();
    context.stroke();
    return context.restore();
  };

  return PageFlip;

})();

//# sourceMappingURL=pageflip.js.map
