// Generated by CoffeeScript 1.9.2
var ClickChapter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ClickChapter = (function(superClass) {
  extend(ClickChapter, superClass);

  function ClickChapter(list) {
    ClickChapter.__super__.constructor.call(this, list);
    this.changeForkNum = null;
  }

  ClickChapter.prototype.willChapter = function() {
    ClickChapter.__super__.willChapter.call(this);
    this.eventObjList.forEach((function(_this) {
      return function(event) {
        event.getJQueryElement().off('click');
        return event.getJQueryElement().on('click', function(e) {
          return _this.clickEvent(e);
        });
      };
    })(this));
    this.floatAllChapterEvents();
    return this.showGuide();
  };

  ClickChapter.prototype.didChapter = function() {
    ClickChapter.__super__.didChapter.call(this);
    this.floatScrollHandleCanvas();
    return this.hideGuide();
  };

  ClickChapter.prototype.clickEvent = function(e) {
    var self;
    self = this;
    this.hideGuide();
    if (window.disabledEventHandler) {
      return;
    }
    return this.eventObjList.forEach(function(event) {
      if (event.id === $(e.currentTarget).attr('id')) {
        return event.clickEvent(e, function() {
          self.changeForkNum = event.getChangeForkNum();
          if (window.eventAction != null) {
            return window.eventAction.thisPage().nextChapter();
          }
        });
      }
    });
  };

  ClickChapter.prototype.showGuide = function() {
    if (!ClickChapter.__super__.showGuide.call(this)) {
      return false;
    }
    this.hideGuide();
    return this.constructor.guideTimer = setTimeout((function(_this) {
      return function() {
        var items;
        items = [];
        _this.eventObjList.forEach(function(event) {
          if (event instanceof ItemBase) {
            return items.push(event);
          }
        });
        return ClickGuide.showGuide(items);
      };
    })(this), ClickGuide.IDLE_TIMER);
  };

  ClickChapter.prototype.hideGuide = function() {
    if (this.constructor.guideTimer != null) {
      clearTimeout(this.constructor.guideTimer);
      this.constructor.guideTimer = null;
    }
    return ClickGuide.hideGuide();
  };

  return ClickChapter;

})(Chapter);

//# sourceMappingURL=click_chapter.js.map
