// Generated by CoffeeScript 1.8.0
var initCommonVar, initHandleScrollPoint, initResize, initTimeline, initView, setupScrollEvent;

initCommonVar = function() {
  window.wrap = $('#main-wrapper');
  window.scrollWrapper = $("#scroll_wrapper");
  window.scrollHandleWrapper = $("#scroll_handle_wrapper");
  window.scrollHandle = $("#scroll_handle");
  window.scrollContents = $("#scroll_contents");
  window.scrollInside = $("#scroll_inside");
  window.scrollInsideCover = $('#scroll_inside_cover');
  window.distX = 0;
  window.distY = 0;
  window.scrollViewMag = 500;
  window.resizeTimer = false;
  window.timeLine = null;
  window.scrollViewSwitchZindex = {
    'on': 100,
    'off': 0
  };
  window.scrollInsideCoverZindex = 1;
  return window.lstorage = localStorage;
};

initView = function() {
  $('#contents').css('height', $('#contents').height() - $('#nav').height());
  $('#canvas_container').attr('width', $('#canvas_wrapper').width());
  $('#canvas_container').attr('height', $('#canvas_wrapper').height());
  scrollHandleWrapper.css('z-index', scrollViewSwitchZindex.on);
  scrollInside.width(scrollContents.width() * (scrollViewMag + 1));
  scrollInside.height(scrollContents.height() * (scrollViewMag + 1));
  scrollInsideCover.width(scrollContents.width() * (scrollViewMag + 1));
  scrollInsideCover.height(scrollContents.height() * (scrollViewMag + 1));
  scrollHandle.width(scrollHandleWrapper.width() * (scrollViewMag + 1));
  scrollHandle.height(scrollHandleWrapper.height() * (scrollViewMag + 1));
  scrollContents.scrollLeft(scrollContents.width() * (scrollViewMag * 0.5));
  scrollContents.scrollTop(scrollContents.height() * (scrollViewMag * 0.5));
  scrollHandleWrapper.scrollLeft(scrollHandleWrapper.width() * (scrollViewMag * 0.5));
  return scrollHandleWrapper.scrollTop(scrollHandleWrapper.height() * (scrollViewMag * 0.5));
};

initResize = function(wrap, scrollWrapper) {
  var resizeTimer;
  resizeTimer = false;
  return $(window).resize(function() {
    if (resizeTimer !== false) {
      clearTimeout(resizeTimer);
    }
    return resizeTimer = setTimeout(function() {
      var h;
      h = $(window).height();
      wrap.height(h);
      return scrollWrapper.height(h);
    }, 200);
  });
};

initTimeline = function() {
  var chapterList, objList;
  objList = JSON.parse(lstorage.getItem('timelineObjList'));
  chapterList = [];
  objList.forEach(function(obj, idx) {
    var actorList, chapter, item, miniObj;
    actorList = [];
    miniObj = obj.miniObj;
    if (miniObj.itemType === Constant.ItemType.BUTTON) {
      item = new ButtonItem();
    } else if (miniObj.itemType === Constant.ItemType.ARROW) {
      item = new ArrowItem();
    }
    item.initActor(miniObj, obj.itemSize);
    item.reDraw(false);
    item.setEvents(obj.sEvent, obj.cEvent);
    actorList.push(item);
    if (miniObj.itemType === Constant.ItemType.BUTTON) {
      chapter = new ClickChapter(actorList);
    } else if (miniObj.itemType === Constant.ItemType.ARROW) {
      chapter = new ScrollChapter(actorList);
    }
    chapterList.push(chapter);
    if (idx === 0) {
      scrollContents.scrollLeft(item.itemSize.x + item.itemSize.w * 0.5 - (scrollContents.width() * 0.5));
      return scrollContents.scrollTop(item.itemSize.y + item.itemSize.h * 0.5 - (scrollContents.height() * 0.5));
    }
  });
  return window.timeLine = new TimeLine(chapterList);
};

initHandleScrollPoint = function() {
  scrollHandleWrapper.scrollLeft(scrollHandleWrapper.width() * (scrollViewMag * 0.5));
  return scrollHandleWrapper.scrollTop(scrollHandleWrapper.height() * (scrollViewMag * 0.5));
};

setupScrollEvent = function() {
  var lastLeft, lastTop, scrollFinished, stopTimer;
  lastLeft = scrollHandleWrapper.scrollLeft();
  lastTop = scrollHandleWrapper.scrollTop();
  stopTimer = null;
  scrollHandleWrapper.scroll(function() {
    var distX, distY, x, y;
    x = $(this).scrollLeft();
    y = $(this).scrollTop();
    if (stopTimer !== null) {
      clearTimeout(stopTimer);
    }
    stopTimer = setTimeout((function(_this) {
      return function() {
        initHandleScrollPoint();
        lastLeft = $(_this).scrollLeft();
        lastTop = $(_this).scrollTop();
        clearTimeout(stopTimer);
        return stopTimer = null;
      };
    })(this), 100);
    distX = x - lastLeft;
    distY = y - lastTop;
    lastLeft = x;
    lastTop = y;
    console.log('distX:' + distX + ' distY:' + distY);
    return timeLine.handleScrollEvent(distX, distY);
  });
  return scrollFinished = function() {};
};

$(function() {
  initCommonVar();
  initView();
  initHandleScrollPoint();
  initTimeline();
  setupScrollEvent();
  return $('#sup_css').html(lstorage.getItem('itemCssStyle'));
});

//# sourceMappingURL=run.js.js.map
