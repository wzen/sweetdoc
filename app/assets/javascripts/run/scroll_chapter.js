// Generated by CoffeeScript 1.9.2
var ScrollChapter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScrollChapter = (function(superClass) {
  extend(ScrollChapter, superClass);

  function ScrollChapter() {
    return ScrollChapter.__super__.constructor.apply(this, arguments);
  }

  ScrollChapter.prototype.willChapter = function() {
    ScrollChapter.__super__.willChapter.call(this);
    this.enableScrollHandleViewEvent();
    RunCommon.initHandleScrollView();
    return this.showGuide(true);
  };

  ScrollChapter.prototype.didChapter = function() {
    ScrollChapter.__super__.didChapter.call(this);
    return this.hideGuide();
  };

  ScrollChapter.prototype.scrollEvent = function(x, y) {
    if (window.disabledEventHandler) {
      return;
    }
    this.eventObjList.forEach((function(_this) {
      return function(event) {
        if (event.scrollEvent != null) {
          return event.scrollEvent(x, y, function() {
            _this.hideGuide();
            if (window.eventAction != null) {
              return window.eventAction.thisPage().nextChapterIfFinishedAllEvent();
            }
          });
        }
      };
    })(this));
    if (!this.isFinishedAllEvent()) {
      return this.showGuide();
    }
  };

  ScrollChapter.prototype.showGuide = function(calledByWillChapter) {
    var idleTime;
    if (calledByWillChapter == null) {
      calledByWillChapter = false;
    }
    if (!ScrollChapter.__super__.showGuide.call(this, calledByWillChapter)) {
      return false;
    }
    this.hideGuide();
    idleTime = ScrollGuide.IDLE_TIMER;
    if ((window.isItemPreview != null) && window.isItemPreview) {
      idleTime = 0;
    }
    return this.constructor.guideTimer = setTimeout((function(_this) {
      return function() {
        _this.adjustGuideParams(calledByWillChapter);
        return ScrollGuide.showGuide(_this._enabledDirections, _this._forwardDirections, _this.canForward, _this.canReverse);
      };
    })(this), idleTime);
  };

  ScrollChapter.prototype.hideGuide = function() {
    if (this.constructor.guideTimer != null) {
      clearTimeout(this.constructor.guideTimer);
      this.constructor.guideTimer = null;
    }
    return ScrollGuide.hideGuide();
  };

  ScrollChapter.prototype.adjustGuideParams = function(calledByWillChapter) {
    this._enabledDirections = {
      top: false,
      bottom: false,
      left: false,
      right: false
    };
    this._forwardDirections = {
      top: false,
      bottom: false,
      left: false,
      right: false
    };
    this.canForward = false;
    this.canReverse = false;
    this.eventObjList.forEach((function(_this) {
      return function(event) {
        var k, ref, ref1, v;
        if (!event._isFinishedEvent) {
          ref = event._enabledDirections;
          for (k in ref) {
            v = ref[k];
            if (!_this._enabledDirections[k]) {
              _this._enabledDirections[k] = v;
            }
          }
          ref1 = event._forwardDirections;
          for (k in ref1) {
            v = ref1[k];
            if (!_this._forwardDirections[k]) {
              _this._forwardDirections[k] = v;
            }
          }
          if (!calledByWillChapter) {
            if ((event.canForward != null) && event.canForward) {
              _this.canForward = true;
            }
            if ((event.canReverse != null) && event.canReverse) {
              return _this.canReverse = true;
            }
          }
        }
      };
    })(this));
    if (calledByWillChapter) {
      this.canForward = true;
      return this.canReverse = false;
    }
  };

  ScrollChapter.prototype.isFinishedAllEvent = function(cached) {
    var ret;
    if (cached == null) {
      cached = false;
    }
    if (cached && (this._isFinishedAllEventCache != null)) {
      return this._isFinishedAllEventCache;
    }
    ret = true;
    this.eventObjList.forEach(function(event) {
      if (!event._isFinishedEvent) {
        ret = false;
        return false;
      }
    });
    this._isFinishedAllEventCache = ret;
    return ret;
  };

  return ScrollChapter;

})(Chapter);

//# sourceMappingURL=scroll_chapter.js.map
