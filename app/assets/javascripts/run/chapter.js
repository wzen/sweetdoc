// Generated by CoffeeScript 1.9.2
var Chapter;

Chapter = (function() {
  Chapter.guideTimer = null;

  function Chapter(list) {
    var distId, event, i, id, len, obj, ref;
    this.eventList = list.eventList;
    this.num = list.num;
    this.eventObjList = [];
    ref = this.eventList;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      id = obj[EventPageValueBase.PageValueKey.ID];
      distId = obj[EventPageValueBase.PageValueKey.CLASS_DIST_TOKEN];
      event = Common.getInstanceFromMap(id, distId);
      this.eventObjList.push(event);
    }
    this.doMoveChapter = false;
  }

  Chapter.prototype.willChapter = function() {
    var event, i, idx, len, ref;
    if (window.runDebug) {
      console.log('Chapter willChapter');
    }
    ref = this.eventObjList;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      event = ref[idx];
      event.initEvent(this.eventList[idx]);
      event.willChapter();
      this.doMoveChapter = false;
    }
    this.focusToActorIfNeed(false);
    return this.enableEventHandle();
  };

  Chapter.prototype.didChapter = function() {
    if (window.runDebug) {
      console.log('Chapter didChapter');
    }
    return this.eventObjList.forEach(function(event) {
      return event.didChapter();
    });
  };

  Chapter.prototype.focusToActorIfNeed = function(isImmediate, type) {
    var item;
    if (type == null) {
      type = "center";
    }
    window.disabledEventHandler = true;
    item = null;
    this.eventObjList.forEach((function(_this) {
      return function(e, idx) {
        if (_this.eventList[idx][EventPageValueBase.PageValueKey.IS_COMMON_EVENT] === false && _this.eventList[idx][EventPageValueBase.PageValueKey.DO_FOCUS]) {
          item = e;
          return false;
        }
      };
    })(this));
    if (item != null) {
      if (type === 'center') {
        return Common.focusToTarget(item.getJQueryElement(), function() {
          return window.disabledEventHandler = false;
        }, isImmediate);
      }
    } else {
      return window.disabledEventHandler = false;
    }
  };

  Chapter.prototype.floatAllChapterEvents = function() {
    if (window.runDebug) {
      console.log('Chapter floatAllChapterEvents');
    }
    window.scrollHandleWrapper.css('z-index', scrollViewSwitchZindex.off);
    window.scrollContents.css('z-index', scrollViewSwitchZindex.on);
    return this.eventObjList.forEach(function(e) {
      if (e._event[EventPageValueBase.PageValueKey.IS_COMMON_EVENT] === false) {
        return e.getJQueryElement().css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTFLOAT));
      }
    });
  };

  Chapter.prototype.floatScrollHandleCanvas = function() {
    if (window.runDebug) {
      console.log('Chapter floatScrollHandleCanvas');
    }
    window.scrollHandleWrapper.css('z-index', scrollViewSwitchZindex.on);
    window.scrollContents.css('z-index', scrollViewSwitchZindex.off);
    return this.eventObjList.forEach((function(_this) {
      return function(e) {
        if (e._event[EventPageValueBase.PageValueKey.IS_COMMON_EVENT] === false) {
          return e.getJQueryElement().css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTBOTTOM + _this.num));
        }
      };
    })(this));
  };

  Chapter.prototype.resetAllEvents = function(takeStateCapture) {
    if (takeStateCapture == null) {
      takeStateCapture = false;
    }
    if (window.runDebug) {
      console.log('Chapter resetAllEvents');
    }
    return this.eventObjList.forEach((function(_this) {
      return function(e) {
        return e.resetEvent();
      };
    })(this));
  };

  Chapter.prototype.forwardAllEvents = function() {
    if (window.runDebug) {
      console.log('Chapter forwardAllEvents');
    }
    return this.eventObjList.forEach((function(_this) {
      return function(e) {
        return e.updateEventAfter();
      };
    })(this));
  };

  Chapter.prototype.showGuide = function(calledByWillChapter) {
    if (calledByWillChapter == null) {
      calledByWillChapter = false;
    }
    return RunSetting.isShowGuide();
  };

  Chapter.prototype.hideGuide = function() {};

  Chapter.prototype.enableEventHandle = function() {
    return this.eventObjList.forEach((function(_this) {
      return function(e) {
        return e._skipEvent = false;
      };
    })(this));
  };

  Chapter.prototype.disableEventHandle = function() {
    return this.eventObjList.forEach((function(_this) {
      return function(e) {
        return e._skipEvent = true;
      };
    })(this));
  };

  return Chapter;

})();

//# sourceMappingURL=chapter.js.map
