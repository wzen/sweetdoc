// Generated by CoffeeScript 1.9.2
var EventAction;

EventAction = (function() {
  function EventAction(pageList, pageIndex1) {
    this.pageList = pageList;
    this.pageIndex = pageIndex1;
    this.finishedAllPages = false;
  }

  EventAction.prototype.thisPage = function() {
    return this.pageList[this.pageIndex];
  };

  EventAction.prototype.start = function() {
    Navbar.setPageNum(this.pageIndex + 1);
    $('#sup_css').html(PageValue.itemCssOnPage());
    this.thisPage().willPage();
    return this.thisPage().start();
  };

  EventAction.prototype.nextPageIfFinishedAllChapter = function() {
    if (this.thisPage().finishedAllChapters) {
      return this.nextPage();
    }
  };

  EventAction.prototype.nextPage = function() {
    var beforePageIndex;
    this.thisPage().didPage();
    beforePageIndex = this.pageIndex;
    if (this.pageList.length <= this.pageIndex + 1) {
      return this.finishAllPages();
    } else {
      this.pageIndex += 1;
      Navbar.setPageNum(this.pageIndex + 1);
      return this.changePaging(beforePageIndex, this.pageIndex, function() {
        return Navbar.setPageNum(this.pageIndex + 1);
      });
    }
  };

  EventAction.prototype.rewindPage = function() {
    var beforePageIndex;
    this.resetPage(this.pageIndex);
    beforePageIndex = this.pageIndex;
    if (!this.thisChapter().doMovePage && this.pageIndex > 0) {
      this.pageIndex -= 1;
      Navbar.setPageNum(this.pageIndex + 1);
      return this.changePaging(beforePageIndex, this.pageIndex, function() {
        return Navbar.setPageNum(this.pageIndex + 1);
      });
    } else {
      return this.thisPage().willPage();
    }
  };

  EventAction.prototype.changePaging = function(beforePageIndex, afterPageIndex, callback) {
    var afterPageNum, beforePageNum, className, direction, pageFlip, pn, section;
    if (callback == null) {
      callback = null;
    }
    beforePageNum = beforePageIndex + 1;
    afterPageNum = afterPageIndex + 1;
    className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', afterPageNum);
    section = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
    section.css('display', '');
    PageValue.setPageNum(afterPageNum);
    Common.createdMainContainerIfNeeded(afterPageNum, beforePageNum > afterPageNum);
    RunCommon.initMainContainer();
    PageValue.adjustInstanceAndEventOnThisPage();
    this.resetPage(afterPageIndex);
    $('#sup_css').html(PageValue.itemCssOnPage());
    this.thisPage().willPage();
    direction = beforePageNum < PageValue.getPageNum() ? PageFlip.DIRECTION.FORWARD : PageFlip.DIRECTION.BACK;
    pn = beforePageNum < PageValue.getPageNum() ? beforePageNum : PageValue.getPageNum();
    pageFlip = new PageFlip(pn);
    return pageFlip.startRender(direction, function() {
      className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', beforePageNum);
      section = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
      section.css('display', 'none');
      Common.removeAllItem(beforePageNum);
      RunCommon.initMainContainer();
      Timeline.refreshAllTimeline();
      if (callback != null) {
        return callback();
      }
    });
  };

  EventAction.prototype.resetPage = function(pageIndex) {
    return this.pageList[pageIndex].resetAllChapters();
  };

  EventAction.prototype.rewindAllPages = function() {
    var i, j, page, ref;
    for (i = j = ref = this.pageList.length - 1; j >= 0; i = j += -1) {
      page = this.pageList[i];
      page.resetAllChapters();
    }
    this.pageIndex = 0;
    Navbar.setPageNum(this.pageIndex + 1);
    this.finishedAllPages = false;
    return this.start();
  };

  EventAction.prototype.finishAllPages = function() {
    this.finishedAllPages = true;
    return console.log('Finish All Pages!!!');
  };

  return EventAction;

})();

//# sourceMappingURL=event_action.js.map
