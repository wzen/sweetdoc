// Generated by CoffeeScript 1.9.2
var EventAction;

EventAction = (function() {
  function EventAction(pageList, pageIndex) {
    this.pageList = pageList;
    this.pageIndex = pageIndex;
    this.finishedAllPages = false;
  }

  EventAction.prototype.thisPage = function() {
    return this.pageList[this.pageIndex];
  };

  EventAction.prototype.start = function() {
    var pageNum;
    pageNum = this.pageIndex + 1;
    Navbar.setPageNum(pageNum);
    RunCommon.createCssElement(pageNum);
    this.thisPage().willPage();
    return this.thisPage().start();
  };

  EventAction.prototype.nextPageIfFinishedAllChapter = function() {
    if (this.thisPage().finishedAllChapters) {
      return this.nextPage();
    }
  };

  EventAction.prototype.nextPage = function() {
    var beforePageIndex, pageNum;
    this.thisPage().didPage();
    beforePageIndex = this.pageIndex;
    if (this.pageList.length <= this.pageIndex + 1) {
      return this.finishAllPages();
    } else {
      this.pageIndex += 1;
      pageNum = this.pageIndex + 1;
      Navbar.setPageNum(pageNum);
      PageValue.setPageNum(pageNum);
      return RunCommon.loadPagingPageValue(pageNum, pageNum, (function(_this) {
        return function() {
          return Common.loadJsFromInstancePageValue(function() {
            var eventPageValueList;
            if (_this.thisPage() === null) {
              eventPageValueList = PageValue.getEventPageValueSortedListByNum(pageNum);
              _this.pageList[_this.pageIndex] = new Page(eventPageValueList);
              if (window.debug) {
                console.log('[nextPage] created page instance');
              }
            }
            return _this.changePaging(beforePageIndex, _this.pageIndex);
          });
        };
      })(this));
    }
  };

  EventAction.prototype.rewindPage = function() {
    var beforePageIndex, pageNum;
    beforePageIndex = this.pageIndex;
    if (this.pageIndex > 0) {
      this.pageIndex -= 1;
      pageNum = this.pageIndex + 1;
      Navbar.setPageNum(pageNum);
      PageValue.setPageNum(pageNum);
      return RunCommon.loadPagingPageValue(pageNum, pageNum, (function(_this) {
        return function() {
          return Common.loadJsFromInstancePageValue(function() {
            var eventPageValueList;
            if (_this.thisPage() === null) {
              eventPageValueList = PageValue.getEventPageValueSortedListByNum(pageNum);
              _this.pageList[_this.pageIndex] = new Page(eventPageValueList);
              if (window.debug) {
                console.log('[rewindPage] created page instance');
              }
            }
            return _this.changePaging(beforePageIndex, _this.pageIndex);
          });
        };
      })(this));
    } else {
      this.thisPage().willPage();
      return this.thisPage().start();
    }
  };

  EventAction.prototype.changePaging = function(beforePageIndex, afterPageIndex, callback) {
    var afterPageNum, beforePageNum, pageFlip;
    if (callback == null) {
      callback = null;
    }
    beforePageNum = beforePageIndex + 1;
    afterPageNum = afterPageIndex + 1;
    if (window.debug) {
      console.log('[changePaging] beforePageNum:' + beforePageNum);
      console.log('[changePaging] afterPageNum:' + afterPageNum);
    }
    Common.createdMainContainerIfNeeded(afterPageNum, beforePageNum > afterPageNum);
    pageFlip = new PageFlip(beforePageNum, afterPageNum);
    RunCommon.initMainContainer();
    PageValue.adjustInstanceAndEventOnThisPage();
    if (beforePageNum > afterPageNum) {
      this.thisPage().willPageFromRewind();
    } else {
      this.thisPage().willPage();
    }
    this.thisPage().start();
    RunCommon.createCssElement(afterPageNum);
    return pageFlip.startRender(function() {
      var className, section;
      className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', beforePageNum);
      section = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
      section.css('display', 'none');
      Common.removeAllItem(beforePageNum);
      $("#" + (Constant.ElementAttribute.RUN_CSS.replace('@pagenum', beforePageNum))).remove();
      if (callback != null) {
        return callback();
      }
    });
  };

  EventAction.prototype.rewindAllPages = function() {
    var i, j, page, ref;
    for (i = j = ref = this.pageList.length - 1; j >= 0; i = j += -1) {
      page = this.pageList[i];
      page.resetAllChapters();
    }
    this.pageIndex = 0;
    Navbar.setPageNum(this.pageIndex + 1);
    this.finishedAllPages = false;
    return this.start();
  };

  EventAction.prototype.finishAllPages = function() {
    this.finishedAllPages = true;
    return console.log('Finish All Pages!!!');
  };

  return EventAction;

})();

//# sourceMappingURL=event_action.js.map
