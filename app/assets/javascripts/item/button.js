// Generated by CoffeeScript 1.8.0
var ButtonItem,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.loadedItemTypeList.push(Constant.ItemType.BUTTON);

ButtonItem = (function(_super) {
  __extends(ButtonItem, _super);

  ButtonItem.IDENTITY = "button";

  ButtonItem.ITEMTYPE = Constant.ItemType.BUTTON;

  function ButtonItem(cood) {
    if (cood == null) {
      cood = null;
    }
    ButtonItem.__super__.constructor.call(this, cood);
    if (cood !== null) {
      this.moveLoc = {
        x: cood.x,
        y: cood.y
      };
    }
    this.cssStyle = null;
  }

  ButtonItem.prototype.draw = function(cood) {
    if (this.itemSize !== null) {
      this.restoreDrawingSurface(this.itemSize);
    }
    this.itemSize = {
      x: null,
      y: null,
      w: null,
      h: null
    };
    this.itemSize.w = Math.abs(cood.x - this.moveLoc.x);
    this.itemSize.h = Math.abs(cood.y - this.moveLoc.y);
    if (cood.x > this.moveLoc.x) {
      this.itemSize.x = this.moveLoc.x;
    } else {
      this.itemSize.x = cood.x;
    }
    if (cood.y > this.moveLoc.y) {
      this.itemSize.y = this.moveLoc.y;
    } else {
      this.itemSize.y = cood.y;
    }
    return drawingContext.strokeRect(this.itemSize.x, this.itemSize.y, this.itemSize.w, this.itemSize.h);
  };

  ButtonItem.prototype.endDraw = function(zindex) {
    if (!ButtonItem.__super__.endDraw.call(this, zindex)) {
      return false;
    }
    return this.makeElement();
  };

  ButtonItem.prototype.reDraw = function() {
    return this.makeElement();
  };

  ButtonItem.prototype.makeElement = function() {
    $(ElementCode.get().createItemElement(this)).appendTo('#main-wrapper');
    return true;
  };

  ButtonItem.prototype.generateMinimumObject = function() {
    var obj;
    obj = {
      itemType: Constant.ItemType.BUTTON,
      mousedownCood: this.mousedownCood,
      itemSize: this.itemSize,
      zindex: this.zindex,
      cssStyle: this.cssStyle
    };
    return obj;
  };

  ButtonItem.prototype.loadByMinimumObject = function(obj) {
    this.setMiniumObject(obj);
    this.reDraw();
    return this.saveObj(Constant.ItemActionType.MAKE);
  };

  ButtonItem.prototype.setMiniumObject = function(obj) {
    this.mousedownCood = obj.mousedownCood;
    this.itemSize = obj.itemSize;
    this.zindex = obj.zindex;
    return this.cssStyle = obj.cssStyle;
  };

  ButtonItem.prototype.actorClickEvent = function(e) {
    return this.nextChapter();
  };

  return ButtonItem;

})(ItemBase);

if ((window.itemInitFuncList != null) && (window.itemInitFuncList.buttonInit == null)) {
  window.itemInitFuncList.buttonInit = function() {
    var btnBgColor, btnCode, btnEntryForm, btnGradientStep, btnPreviewCss, btnShadowColor, configBoxLi;
    btnEntryForm = $("#btn-entryForm", sidebarWrapper);
    btnCode = $("#btn-code", cssCode);
    btnPreviewCss = $("#btn-css", cssCode);
    configBoxLi = $("div.configBox > div.forms", sidebarWrapper);
    btnGradientStep = $("#btn-gradient-step");
    btnBgColor = $("#btn-bg-color1,#btn-bg-color2,#btn-bg-color3,#btn-bg-color4,#btn-bg-color5,#btn-border-color,#btn-font-color");
    btnShadowColor = $("#btn-shadow-color,#btn-shadowinset-color,#btn-text-shadow1-color,#btn-text-shadow2-color");
    settingGradientSlider('btn-slider-gradient', null);
    settingGradientDegSlider('btn-slider-gradient-deg', 0, 315, btnCode, btnPreviewCss);
    settingSlider('btn-slider-border-radius', 0, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-border-width', 0, 10, btnCode, btnPreviewCss);
    settingSlider('btn-slider-font-size', 0, 30, btnCode, btnPreviewCss);
    settingSlider('btn-slider-shadow-left', -100, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-shadow-opacity', 0.0, 1.0, btnCode, btnPreviewCss, 0.1);
    settingSlider('btn-slider-shadow-size', 0, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-shadow-top', -100, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-shadowinset-left', -100, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-shadowinset-opacity', 0.0, 1.0, btnCode, btnPreviewCss, 0.1);
    settingSlider('btn-slider-shadowinset-size', 0, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-shadowinset-top', -100, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-text-shadow1-left', -100, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-text-shadow1-opacity', 0.0, 1.0, btnCode, btnPreviewCss, 0.1);
    settingSlider('btn-slider-text-shadow1-size', 0, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-text-shadow1-top', -100, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-text-shadow2-left', -100, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-text-shadow2-opacity', 0.0, 1.0, btnCode, btnPreviewCss, 0.1);
    settingSlider('btn-slider-text-shadow2-size', 0, 100, btnCode, btnPreviewCss);
    settingSlider('btn-slider-text-shadow2-top', -100, 100, btnCode, btnPreviewCss);
    btnBgColor.mousedown(function() {
      var btnCodeEmt, id, inputEmt, inputValue, self;
      id = $(this).attr("id");
      inputEmt = btnEntryForm.find("#" + id + "-input");
      inputValue = inputEmt.attr("value");
      btnCodeEmt = cssCode.find("." + id);
      self = $(this);
      return settingColorPicker(this, inputValue, function(a, b, d) {
        self.css("backgroundColor", "#" + b);
        inputEmt.attr("value", b);
        btnCodeEmt.text(b);
        return btnPreviewCss.text(btnCode.text());
      });
    });
    btnShadowColor.mousedown(function() {
      var btnCodeEmt, e, id, inputEmt, inputValue, self;
      id = $(this).attr("id");
      e = configBoxLi.find("#" + id + " div");
      inputEmt = btnEntryForm.find("#" + id + "-input");
      inputValue = inputEmt.attr("value");
      btnCodeEmt = cssCode.find("." + id);
      self = $(this);
      return settingColorPicker(this, inputValue, function(a, b, d) {
        self.css("backgroundColor", "#" + b);
        inputEmt.attr("value", b);
        btnCodeEmt.text(d.r + "," + d.g + "," + d.b);
        return btnPreviewCss.text(btnCode.text());
      });
    });
    btnGradientStep.on('keyup mouseup', function(e) {
      var i, id, mh, mozCache, mozFlag, stepValue, webkitCache, webkitFlag, wh, _i;
      changeGradientShow(e, btnCode, btnPreviewCss);
      stepValue = parseInt($(e.currentTarget).val());
      for (i = _i = 2; _i <= 4; i = ++_i) {
        id = 'btn-bg-color' + i;
        mozFlag = $("#" + id + "-moz-flag");
        mozCache = $("#" + id + "-moz-cache");
        webkitFlag = $("#" + id + "-webkit-flag");
        webkitCache = $("#" + id + "-webkit-cache");
        if (i > stepValue - 1) {
          mh = mozFlag.html();
          if (mh.length > 0) {
            mozCache.html(mh);
          }
          wh = webkitFlag.html();
          if (wh.length > 0) {
            webkitCache.html(wh);
          }
          $(mozFlag).empty();
          $(webkitFlag).empty();
        } else {
          mozFlag.html(mozCache.html());
          webkitFlag.html(webkitCache.html());
        }
      }
      return btnPreviewCss.text(btnCode.text());
    }).each(function() {
      var i, id, mh, mozCache, mozFlag, stepValue, webkitCache, webkitFlag, wh, _i;
      stepValue = parseInt($(this).val());
      for (i = _i = 2; _i <= 4; i = ++_i) {
        id = 'btn-bg-color' + i;
        mozFlag = $("#" + id + "-moz-flag");
        mozCache = $("#" + id + "-moz-cache");
        webkitFlag = $("#" + id + "-webkit-flag");
        webkitCache = $("#" + id + "-webkit-cache");
        if (i > stepValue - 1) {
          mh = mozFlag.html();
          if (mh.length > 0) {
            mozCache.html(mh);
          }
          wh = webkitFlag.html();
          if (wh.length > 0) {
            webkitCache.html(wh);
          }
          $(mozFlag).empty();
          $(webkitFlag).empty();
        }
      }
      return btnPreviewCss.text(btnCode.text());
    });
    btnPreviewCss.text(btnCode.text());
    return initColorPickerValue();
  };
}

//# sourceMappingURL=button.js.map
