// Generated by CoffeeScript 1.9.2
var CssItemBase,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CssItemBase = (function(superClass) {
  extend(CssItemBase, superClass);

  if (window.loadedItemToken != null) {
    CssItemBase.ITEM_ACCESS_TOKEN = window.loadedItemToken;
  }

  function CssItemBase(cood) {
    if (cood == null) {
      cood = null;
    }
    CssItemBase.__super__.constructor.call(this, cood);
    this._cssRoot = null;
    this._cssCache = null;
    this._cssCode = null;
    this._cssStyle = null;
    if (cood !== null) {
      this._moveLoc = {
        x: cood.x,
        y: cood.y
      };
    }
    this._cssStypeReflectTimer = null;
    if (window.isWorkTable) {
      this.constructor.include(WorkTableCssItemExtend);
    }
  }

  CssItemBase.prototype.initEventPrepare = function() {
    this.makeCss();
    return this.appendAnimationCssIfNeeded();
  };

  CssItemBase.prototype.createItemElement = function(callback) {
    var contents;
    contents = "<div type=\"button\" class=\"css_item_base context_base\"><div></div></div>";
    return callback(Common.wrapCreateItemElement(this, contents));
  };

  CssItemBase.jsLoaded = function(option) {};

  CssItemBase.prototype.reDraw = function(show) {
    if (show == null) {
      show = true;
    }
    CssItemBase.__super__.reDraw.call(this, show);
    this.clearDraw();
    return this.createItemElement((function(_this) {
      return function(createdElement) {
        $(createdElement).appendTo(window.scrollInside);
        if (!show) {
          _this.getJQueryElement().css('opacity', 0);
        }
        if (_this.setupDragAndResizeEvents != null) {
          return _this.setupDragAndResizeEvents();
        }
      };
    })(this));
  };

  CssItemBase.prototype.clearDraw = function() {
    return this.getJQueryElement().remove();
  };

  CssItemBase.prototype.updateItemSize = function(w, h) {
    this.getJQueryElement().css({
      width: w,
      height: h
    });
    this.itemSize.w = parseInt(w);
    return this.itemSize.h = parseInt(h);
  };

  CssItemBase.prototype.originalItemElementSize = function() {
    var diff, obj;
    diff = PageValue.getFootprintPageValue(PageValue.Key.footprintInstanceDiffBefore(this.event[EventPageValueBase.PageValueKey.DIST_ID], this.id));
    obj = PageValue.getInstancePageValue(PageValue.Key.instanceValue(this.id));
    $.extend(true, obj, diff);
    return obj.itemSize;
  };

  CssItemBase.prototype.getCssRootElementId = function() {
    return "css_" + this.id;
  };

  CssItemBase.prototype.getCssAnimElementId = function() {
    return "css_anim_style";
  };

  CssItemBase.prototype.makeCss = function(fromTemp) {
    var _applyCss;
    if (fromTemp == null) {
      fromTemp = false;
    }
    _applyCss = function(designs) {
      var k, ref, ref1, temp, v;
      if (designs == null) {
        return;
      }
      temp = $('.cssdesign_temp:first').clone(true).attr('class', '');
      temp.attr('id', this.getCssRootElementId());
      if (designs.values != null) {
        ref = designs.values;
        for (k in ref) {
          v = ref[k];
          temp.find("." + k).html("" + v);
        }
      }
      if (designs.flags != null) {
        ref1 = designs.flags;
        for (k in ref1) {
          v = ref1[k];
          if (!v) {
            temp.find("." + k).empty();
          }
        }
      }
      temp.find('.design_item_obj_id').html(this.id);
      return temp.appendTo(window.cssCode);
    };
    $("" + (this.getCssRootElementId())).remove();
    if (!fromTemp && (this.designs != null)) {
      _applyCss.call(this, this.designs);
    } else {
      _applyCss.call(this, this.constructor.actionProperties.designConfigDefaultValues);
    }
    this._cssRoot = $('#' + this.getCssRootElementId());
    this._cssCache = $(".css_cache", this._cssRoot);
    this._cssCode = $(".css_code", this._cssRoot);
    this._cssStyle = $(".css_style", this._cssRoot);
    return this.applyDesignChange(false);
  };

  CssItemBase.prototype.applyDesignChange = function(doStyleSave) {
    this.reDraw();
    this._cssStyle.text(this._cssCode.text());
    if (doStyleSave) {
      return this.saveDesign();
    }
  };

  CssItemBase.prototype.cssAnimationKeyframe = function() {
    return null;
  };

  CssItemBase.prototype.appendAnimationCssIfNeeded = function() {
    var css, duration, funcName, keyFrameName, keyframe, methodName, mozKeyframe, webkitKeyframe;
    keyframe = this.cssAnimationKeyframe();
    if (keyframe != null) {
      methodName = this.getEventMethodName();
      this.removeAnimationCss();
      funcName = methodName + "_" + this.id;
      keyFrameName = this.id + "_frame";
      webkitKeyframe = "@-webkit-keyframes " + keyframe;
      mozKeyframe = "@-moz-keyframes " + keyframe;
      duration = this.eventDuration();
      css = "." + funcName + "\n{\n-webkit-animation-name: " + keyFrameName + ";\n-moz-animation-name: " + keyFrameName + ";\n-webkit-animation-duration: " + duration + "s;\n-moz-animation-duration: " + duration + "s;\n}";
      return window.cssCode.append("<div class='" + funcName + "'><style type='text/css'> " + webkitKeyframe + " " + mozKeyframe + " " + css + " </style></div>");
    }
  };

  CssItemBase.prototype.removeAnimationCss = function() {
    var funcName, methodName;
    methodName = this.getEventMethodName();
    funcName = methodName + "_" + this.id;
    return window.cssCode.find("." + funcName).remove();
  };

  return CssItemBase;

})(ItemBase);

//# sourceMappingURL=css_item_base.js.map
