// Generated by CoffeeScript 1.9.2
var CssItemBase,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CssItemBase = (function(superClass) {
  var constant;

  extend(CssItemBase, superClass);

  if (window.loadedItemId != null) {
    CssItemBase.ITEM_ID = window.loadedItemId;
  }

  if (typeof gon !== "undefined" && gon !== null) {
    constant = gon["const"];
    CssItemBase.DESIGN_ROOT_CLASSNAME = constant.DesignConfig.ROOT_CLASSNAME;
  }

  function CssItemBase(cood) {
    if (cood == null) {
      cood = null;
    }
    CssItemBase.__super__.constructor.call(this, cood);
    this.cssRoot = null;
    this.cssCache = null;
    this.cssCode = null;
    this.cssStyle = null;
    if (cood !== null) {
      this.moveLoc = {
        x: cood.x,
        y: cood.y
      };
    }
    this.css = null;
    this.cssStypeReflectTimer = null;
    if (window.isWorkTable) {
      this.constructor.include(WorkTableCssItemExtend);
    }
  }

  CssItemBase.jsLoaded = function(option) {};

  CssItemBase.prototype.reDraw = function(show) {
    if (show == null) {
      show = true;
    }
    CssItemBase.__super__.reDraw.call(this, show);
    this.clearDraw();
    $(ElementCode.get().createItemElement(this)).appendTo(window.scrollInside);
    if (!show) {
      this.getJQueryElement().css('opacity', 0);
    }
    if (this.setupDragAndResizeEvents != null) {
      return this.setupDragAndResizeEvents();
    }
  };

  CssItemBase.prototype.clearDraw = function() {
    return this.getJQueryElement().remove();
  };

  CssItemBase.prototype.getMinimumObject = function() {
    var newobj, obj;
    obj = CssItemBase.__super__.getMinimumObject.call(this);
    newobj = {
      itemId: this.constructor.ITEM_ID,
      mousedownCood: Common.makeClone(this.mousedownCood)
    };
    if (this.cssRoot == null) {
      this.cssRoot = $('#' + this.getCssRootElementId());
    }
    if ((this.cssRoot != null) && this.cssRoot.length > 0) {
      newobj['css'] = this.cssRoot[0].outerHTML;
    }
    $.extend(obj, newobj);
    return obj;
  };

  CssItemBase.prototype.setMiniumObject = function(obj) {
    CssItemBase.__super__.setMiniumObject.call(this, obj);
    this.mousedownCood = Common.makeClone(obj.mousedownCood);
    return this.css = Common.makeClone(obj.css);
  };

  CssItemBase.prototype.stateEventBefore = function(isForward) {
    var itemDiff, itemSize, obj;
    obj = this.getMinimumObject();
    if (!isForward) {
      itemSize = obj.itemSize;
      itemDiff = this.event[EventPageValueBase.PageValueKey.ITEM_SIZE_DIFF];
      obj.itemSize = {
        x: itemSize.x - itemDiff.x,
        y: itemSize.y - itemDiff.y,
        w: itemSize.w - itemDiff.w,
        h: itemSize.h - itemDiff.h
      };
    }
    console.log("stateEventBefore");
    console.log(obj);
    return obj;
  };

  CssItemBase.prototype.stateEventAfter = function(isForward) {
    var itemDiff, itemSize, obj;
    obj = this.getMinimumObject();
    if (isForward) {
      obj = this.getMinimumObject();
      itemSize = obj.itemSize;
      itemDiff = this.event[EventPageValueBase.PageValueKey.ITEM_SIZE_DIFF];
      obj.itemSize = {
        x: itemSize.x + itemDiff.x,
        y: itemSize.y + itemDiff.y,
        w: itemSize.w + itemDiff.w,
        h: itemSize.h + itemDiff.h
      };
    }
    console.log("stateEventAfter");
    console.log(obj);
    return obj;
  };

  CssItemBase.prototype.updateEventBefore = function() {
    var capturedEventBeforeObject;
    CssItemBase.__super__.updateEventBefore.call(this);
    capturedEventBeforeObject = this.getCapturedEventBeforeObject();
    if (capturedEventBeforeObject) {
      return this.updatePositionAndItemSize(Common.makeClone(capturedEventBeforeObject.itemSize), false);
    }
  };

  CssItemBase.prototype.updateEventAfter = function() {
    var capturedEventAfterObject;
    CssItemBase.__super__.updateEventAfter.call(this);
    capturedEventAfterObject = this.getCapturedEventAfterObject();
    if (capturedEventAfterObject) {
      return this.updatePositionAndItemSize(Common.makeClone(capturedEventAfterObject.itemSize), false);
    }
  };

  CssItemBase.prototype.updateItemSize = function(w, h) {
    this.getJQueryElement().css({
      width: w,
      height: h
    });
    this.itemSize.w = parseInt(w);
    return this.itemSize.h = parseInt(h);
  };

  CssItemBase.prototype.originalItemElementSize = function() {
    var capturedEventBeforeObject;
    capturedEventBeforeObject = this.getCapturedEventBeforeObject();
    return capturedEventBeforeObject.itemSize;
  };

  CssItemBase.prototype.changeCssId = function(oldObjId) {
    var reg;
    reg = new RegExp(oldObjId, 'g');
    return this.css = this.css.replace(reg, this.id);
  };

  CssItemBase.prototype.getCssRootElementId = function() {
    return "css_" + this.id;
  };

  CssItemBase.prototype.getCssAnimElementId = function() {
    return "css_anim_style";
  };

  CssItemBase.prototype.makeCss = function(fromTemp) {
    var k, ref, temp, v;
    if (fromTemp == null) {
      fromTemp = false;
    }
    $("" + (this.getCssRootElementId())).remove();
    if (!fromTemp && (this.css != null)) {
      temp = $(this.css);
      temp.appendTo(window.cssCodeInfoTemp);
    } else {
      temp = $('.cssdesign_temp:first').clone(true).attr('class', '');
      temp.attr('id', this.getCssRootElementId());
      if (this.constructor.actionProperties.designConfigDefaultValues != null) {
        ref = this.constructor.actionProperties.designConfigDefaultValues;
        for (k in ref) {
          v = ref[k];
          console.log("k: " + k + "  v: " + v);
          temp.find("." + k).html("" + v);
        }
      }
      temp.find('.design_item_id').html(this.id);
      temp.appendTo(window.cssCodeInfoTemp);
    }
    this.cssRoot = $('#' + this.getCssRootElementId());
    this.cssCache = $(".css_cache", this.cssRoot);
    this.cssCode = $(".css_code", this.cssRoot);
    this.cssStyle = $(".css_style", this.cssRoot);
    return this.applyCssStyle(false);
  };

  CssItemBase.prototype.cssAnimationElement = function() {
    return null;
  };

  CssItemBase.prototype.appendAnimationCssIfNeeded = function() {
    var ce, funcName, methodName;
    ce = this.cssAnimationElement();
    if (ce != null) {
      methodName = this.getEventMethodName();
      this.removeCss();
      funcName = methodName + "_" + this.id;
      return window.cssCode.append("<div class='" + funcName + "'><style type='text/css'> " + ce + " </style></div>");
    }
  };

  CssItemBase.prototype.applyCssStyle = function(doStyleSave) {
    if (doStyleSave == null) {
      doStyleSave = true;
    }
    this.cssStyle.text(this.cssCode.text());
    if (this.cssRoot != null) {
      this.css = this.cssRoot[0].outerHTML;
    }
    if (doStyleSave) {
      if (this.cssStypeReflectTimer != null) {
        clearTimeout(this.cssStypeReflectTimer);
        this.cssStypeReflectTimer = null;
      }
      return this.cssStypeReflectTimer = setTimeout((function(_this) {
        return function() {
          _this.setItemAllPropToPageValue();
          LocalStorage.saveAllPageValues();
          return _this.cssStypeReflectTimer = setTimeout(function() {
            return OperationHistory.add();
          }, 1000);
        };
      })(this), 500);
    }
  };

  CssItemBase.prototype.removeCss = function() {
    var funcName, methodName;
    methodName = this.getEventMethodName();
    funcName = methodName + "_" + this.id;
    return window.cssCode.find("." + funcName).remove();
  };

  CssItemBase.prototype.setupOptionMenu = function() {
    var btnBgColor, btnGradientStep, btnShadowColor, cssCode, cssRoot, item;
    CssItemBase.__super__.setupOptionMenu.call(this);
    item = this;
    cssRoot = this.cssRoot;
    cssCode = this.cssCode;
    if (this.constructor.actionProperties.designConfig === Constant.ItemDesignOptionType.DESIGN_TOOL) {
      btnGradientStep = $(".design_gradient_step", this.designConfigRoot);
      btnBgColor = $(".design_bg_color1,.design_bg_color2,.design_bg_color3,.design_bg_color4,.design_bg_color5,.design_border_color,.design_font_color", this.designConfigRoot);
      btnShadowColor = $(".design_shadow_color,.design_shadowinset_color,.design_text_shadow1_color,.design_text_shadow2_color", this.designConfigRoot);
      SidebarUI.settingGradientSlider('design_slider_gradient', null, cssCode, this.designConfigRoot);
      SidebarUI.settingGradientDegSlider('design_slider_gradient_deg', 0, 315, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_border_radius', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_border_width', 0, 10, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_font_size', 0, 30, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadow_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadow_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_shadow_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadow_top', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadowinset_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadowinset_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_shadowinset_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadowinset_top', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow1_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow1_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_text_shadow1_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow1_top', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow2_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow2_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_text_shadow2_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow2_top', -100, 100, cssCode, this.designConfigRoot);
      btnBgColor.each(function() {
        var btnCodeEmt, className, colorValue, self;
        self = $(this);
        className = self[0].classList[0];
        btnCodeEmt = cssCode.find("." + className).first();
        colorValue = btnCodeEmt.text();
        return ColorPickerUtil.initColorPicker(self, colorValue, function(a, b, d) {
          btnCodeEmt = cssCode.find("." + className);
          btnCodeEmt.text(b);
          return item.applyCssStyle();
        });
      });
      btnShadowColor.each(function() {
        var btnCodeEmt, className, colorValue, self;
        self = $(this);
        className = self[0].classList[0];
        btnCodeEmt = cssCode.find("." + className).first();
        colorValue = btnCodeEmt.text();
        return ColorPickerUtil.initColorPicker(self, colorValue, function(a, b, d) {
          btnCodeEmt = cssCode.find("." + className);
          btnCodeEmt.text(d.r + "," + d.g + "," + d.b);
          return item.applyCssStyle();
        });
      });
      btnGradientStep.off('keyup mouseup');
      return btnGradientStep.on('keyup mouseup', function(e) {
        var className, i, j, mh, mozCache, mozFlag, stepValue, webkitCache, webkitFlag, wh;
        SidebarUI.changeGradientShow(e.currentTarget, cssCode, this.designConfigRoot);
        stepValue = parseInt($(e.currentTarget).val());
        for (i = j = 2; j <= 4; i = ++j) {
          className = 'design_bg_color' + i;
          mozFlag = $("." + className + "_moz_flag", cssRoot);
          mozCache = $("." + className + "_moz_cache", cssRoot);
          webkitFlag = $("." + className + "_webkit_flag", cssRoot);
          webkitCache = $("." + className + "_webkit_cache", cssRoot);
          if (i > stepValue - 1) {
            mh = mozFlag.html();
            if (mh.length > 0) {
              mozCache.html(mh);
            }
            wh = webkitFlag.html();
            if (wh.length > 0) {
              webkitCache.html(wh);
            }
            $(mozFlag).empty();
            $(webkitFlag).empty();
          } else {
            mozFlag.html(mozCache.html());
            webkitFlag.html(webkitCache.html());
          }
        }
        return item.applyCssStyle();
      }).each(function() {
        var className, i, j, mh, mozCache, mozFlag, stepValue, webkitCache, webkitFlag, wh;
        SidebarUI.changeGradientShow(this, cssCode, this.designConfigRoot);
        stepValue = parseInt($(this).val());
        for (i = j = 2; j <= 4; i = ++j) {
          className = 'design_bg_color' + i;
          mozFlag = $("." + className + "_moz_flag", cssRoot);
          mozCache = $("." + className + "_moz_cache", cssRoot);
          webkitFlag = $("." + className + "_webkit_flag", cssRoot);
          webkitCache = $("." + className + "_webkit_cache", cssRoot);
          if (i > stepValue - 1) {
            mh = mozFlag.html();
            if (mh.length > 0) {
              mozCache.html(mh);
            }
            wh = webkitFlag.html();
            if (wh.length > 0) {
              webkitCache.html(wh);
            }
            $(mozFlag).empty();
            $(webkitFlag).empty();
          }
        }
        return item.applyCssStyle();
      });
    }
  };

  return CssItemBase;

})(ItemBase);

//# sourceMappingURL=css_item_base.js.map
