// Generated by CoffeeScript 1.9.2
var CssItemBase,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CssItemBase = (function(superClass) {
  extend(CssItemBase, superClass);

  if (window.loadedItemToken != null) {
    CssItemBase.ITEM_ACCESS_TOKEN = window.loadedItemToken;
  }

  function CssItemBase(cood) {
    if (cood == null) {
      cood = null;
    }
    CssItemBase.__super__.constructor.call(this, cood);
    this._cssRoot = null;
    this._cssCache = null;
    this._cssCode = null;
    this._cssStyle = null;
    if (cood !== null) {
      this._moveLoc = {
        x: cood.x,
        y: cood.y
      };
    }
    this._cssStypeReflectTimer = null;
  }

  CssItemBase.prototype.initEventPrepare = function() {
    this.makeCss();
    return this.appendAnimationCssIfNeeded();
  };

  CssItemBase.prototype.createItemElement = function(callback) {
    var contents;
    contents = "<div type=\"button\" class=\"css_item_base context_base\"><div></div></div>";
    return callback(Common.wrapCreateItemElement(this, $(contents)));
  };

  CssItemBase.jsLoaded = function(option) {};

  CssItemBase.prototype.reDraw = function(show, callback) {
    if (show == null) {
      show = true;
    }
    if (callback == null) {
      callback = null;
    }
    return CssItemBase.__super__.reDraw.call(this, show, (function(_this) {
      return function() {
        _this.clearDraw();
        return _this.createItemElement(function(createdElement) {
          $(createdElement).appendTo(window.scrollInside);
          if (!show) {
            _this.getJQueryElement().css('opacity', 0);
          }
          if (_this.setupDragAndResizeEvents != null) {
            _this.setupDragAndResizeEvents();
          }
          if (callback != null) {
            return callback();
          }
        });
      };
    })(this));
  };

  CssItemBase.prototype.getCssRootElementId = function() {
    return "css_" + this.id;
  };

  CssItemBase.prototype.getCssAnimElementId = function() {
    return "css_anim_style";
  };

  CssItemBase.prototype.makeCss = function(fromTemp) {
    var _applyCss;
    if (fromTemp == null) {
      fromTemp = false;
    }
    _applyCss = function(designs) {
      var k, ref, ref1, temp, v;
      if (designs == null) {
        return;
      }
      temp = $('.cssdesign_temp:first').clone(true).attr('class', '');
      temp.attr('id', this.getCssRootElementId());
      if (designs.values != null) {
        ref = designs.values;
        for (k in ref) {
          v = ref[k];
          temp.find("." + k).html("" + v);
        }
      }
      if (designs.flags != null) {
        ref1 = designs.flags;
        for (k in ref1) {
          v = ref1[k];
          if (!v) {
            temp.find("." + k).empty();
          }
        }
      }
      temp.find('.design_item_obj_id').html(this.id);
      return temp.appendTo(window.cssCode);
    };
    $("" + (this.getCssRootElementId())).remove();
    if (!fromTemp && (this.designs != null)) {
      _applyCss.call(this, this.designs);
    } else {
      _applyCss.call(this, this.constructor.actionProperties.designConfigDefaultValues);
    }
    this._cssRoot = $('#' + this.getCssRootElementId());
    this._cssCache = $(".css_cache", this._cssRoot);
    this._cssCode = $(".css_code", this._cssRoot);
    this._cssStyle = $(".css_style", this._cssRoot);
    return this.applyDesignChange(false);
  };

  CssItemBase.prototype.applyDesignChange = function(doStyleSave) {
    this.reDraw();
    this._cssStyle.text(this._cssCode.text());
    if (doStyleSave) {
      return this.saveDesign();
    }
  };

  CssItemBase.prototype.cssAnimationKeyframe = function() {
    return null;
  };

  CssItemBase.prototype.appendAnimationCssIfNeeded = function() {
    var css, duration, funcName, keyFrameName, keyframe, methodName, mozKeyframe, webkitKeyframe;
    keyframe = this.cssAnimationKeyframe();
    if (keyframe != null) {
      methodName = this.getEventMethodName();
      this.removeAnimationCss();
      funcName = methodName + "_" + this.id;
      keyFrameName = this.id + "_frame";
      webkitKeyframe = "@-webkit-keyframes " + keyframe;
      mozKeyframe = "@-moz-keyframes " + keyframe;
      duration = this.eventDuration();
      css = "." + funcName + "\n{\n-webkit-animation-name: " + keyFrameName + ";\n-moz-animation-name: " + keyFrameName + ";\n-webkit-animation-duration: " + duration + "s;\n-moz-animation-duration: " + duration + "s;\n}";
      return window.cssCode.append("<div class='" + funcName + "'><style type='text/css'> " + webkitKeyframe + " " + mozKeyframe + " " + css + " </style></div>");
    }
  };

  CssItemBase.prototype.removeAnimationCss = function() {
    var funcName, methodName;
    methodName = this.getEventMethodName();
    funcName = methodName + "_" + this.id;
    return window.cssCode.find("." + funcName).remove();
  };

  if (window.isWorkTable) {
    CssItemBase.include({
      endDraw: function(zindex, show, callback) {
        if (show == null) {
          show = true;
        }
        if (callback == null) {
          callback = null;
        }
        this.zindex = zindex;
        this.itemSize.x += scrollContents.scrollLeft();
        this.itemSize.y += scrollContents.scrollTop();
        this.applyDefaultDesign();
        this.makeCss(true);
        return this.drawAndMakeConfigsAndWritePageValue(show, callback);
      },
      setupDesignToolOptionMenu: function() {
        var btnBgColor, btnGradientStep, btnShadowColor, designConfigRoot, self;
        self = this;
        designConfigRoot = $('#' + this.getDesignConfigId());
        self.settingGradientSlider('design_slider_gradient', null);
        self.settingGradientDegSlider('design_slider_gradient_deg', 0, 315);
        self.settingDesignSlider('design_slider_border_radius', 0, 100);
        self.settingDesignSlider('design_slider_border_width', 0, 10);
        self.settingDesignSlider('design_slider_font_size', 0, 30);
        self.settingDesignSlider('design_slider_shadow_left', -100, 100);
        self.settingDesignSlider('design_slider_shadow_opacity', 0.0, 1.0, 0.1);
        self.settingDesignSlider('design_slider_shadow_size', 0, 100);
        self.settingDesignSlider('design_slider_shadow_top', -100, 100);
        self.settingDesignSlider('design_slider_shadowinset_left', -100, 100);
        self.settingDesignSlider('design_slider_shadowinset_opacity', 0.0, 1.0, 0.1);
        self.settingDesignSlider('design_slider_shadowinset_size', 0, 100);
        self.settingDesignSlider('design_slider_shadowinset_top', -100, 100);
        self.settingDesignSlider('design_slider_text_shadow1_left', -100, 100);
        self.settingDesignSlider('design_slider_text_shadow1_opacity', 0.0, 1.0, 0.1);
        self.settingDesignSlider('design_slider_text_shadow1_size', 0, 100);
        self.settingDesignSlider('design_slider_text_shadow1_top', -100, 100);
        self.settingDesignSlider('design_slider_text_shadow2_left', -100, 100);
        self.settingDesignSlider('design_slider_text_shadow2_opacity', 0.0, 1.0, 0.1);
        self.settingDesignSlider('design_slider_text_shadow2_size', 0, 100);
        self.settingDesignSlider('design_slider_text_shadow2_top', -100, 100);
        btnBgColor = $(".design_bg_color1,.design_bg_color2,.design_bg_color3,.design_bg_color4,.design_bg_color5,.design_border_color,.design_font_color", designConfigRoot);
        btnBgColor.each((function(_this) {
          return function(idx, e) {
            var className, colorValue;
            className = e.classList[0];
            colorValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(_this.id, className + "_value"));
            return ColorPickerUtil.initColorPicker($(e), colorValue, function(a, b, d, e) {
              _this.designs.values[className + "_value"] = b;
              return self.applyColorChangeByPicker(className, b);
            });
          };
        })(this));
        btnShadowColor = $(".design_shadow_color,.design_shadowinset_color,.design_text_shadow1_color,.design_text_shadow2_color", designConfigRoot);
        btnShadowColor.each((function(_this) {
          return function(idx, e) {
            var className, colorValue;
            className = e.classList[0];
            colorValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(_this.id, className + "_value"));
            return ColorPickerUtil.initColorPicker($(e), colorValue, function(a, b, d) {
              var value;
              value = d.r + "," + d.g + "," + d.b;
              _this.designs.values[className + "_value"] = value;
              return self.applyColorChangeByPicker(className, value);
            });
          };
        })(this));
        btnGradientStep = $(".design_gradient_step", designConfigRoot);
        btnGradientStep.off('keyup mouseup');
        return btnGradientStep.on('keyup mouseup', (function(_this) {
          return function(e) {
            var i, j, stepValue;
            stepValue = parseInt($(e.currentTarget).val());
            for (i = j = 2; j <= 4; i = ++j) {
              _this.designs.flags["design_bg_color" + i + "_moz_flag"] = i <= stepValue - 1;
              _this.designs.flags["design_bg_color" + i + "_webkit_flag"] = i <= stepValue - 1;
            }
            return self.applyGradientStepChange(e.currentTarget);
          };
        })(this)).each((function(_this) {
          return function(idx, e) {
            var i, j, l, stepValue;
            stepValue = 2;
            for (i = j = 2; j <= 4; i = ++j) {
              if (!_this.designs.flags["design_bg_color" + i + "_moz_flag"]) {
                stepValue = i;
                break;
              }
            }
            $(e).val(stepValue);
            for (i = l = 2; l <= 4; i = ++l) {
              _this.designs.flags["design_bg_color" + i + "_moz_flag"] = i <= stepValue - 1;
              _this.designs.flags["design_bg_color" + i + "_webkit_flag"] = i <= stepValue - 1;
            }
            _this._cssStyle.text(_this._cssCode.text());
            return _this.saveDesign();
          };
        })(this));
      },
      applyDesignStyleChange: function(designKeyName, value, doStyleSave) {
        var cssCodeElement;
        if (doStyleSave == null) {
          doStyleSave = true;
        }
        cssCodeElement = $('.' + designKeyName + '_value', this._cssCode);
        cssCodeElement.html(value);
        return this.applyDesignChange(doStyleSave);
      },
      applyGradientStyleChange: function(index, designKeyName, value, doStyleSave) {
        var position;
        if (doStyleSave == null) {
          doStyleSave = true;
        }
        position = $('.design_bg_color' + (index + 2) + '_position_value', this._cssCode);
        position.html(("0" + value).slice(-2));
        return this.applyDesignStyleChange(designKeyName, value, doStyleSave);
      },
      applyGradientDegChange: function(designKeyName, value, doStyleSave) {
        var webkitDeg, webkitValueElement;
        if (doStyleSave == null) {
          doStyleSave = true;
        }
        webkitDeg = {
          0: 'left top, left bottom',
          45: 'right top, left bottom',
          90: 'right top, left top',
          135: 'right bottom, left top',
          180: 'left bottom, left top',
          225: 'left bottom, right top',
          270: 'left top, right top',
          315: 'left top, right bottom'
        };
        this.designs.values[designKeyName + "_value_webkit_value"] = webkitDeg[value];
        webkitValueElement = $('.' + designKeyName + '_value_webkit_value', this._cssCode);
        webkitValueElement.html(webkitDeg[value]);
        return this.applyDesignStyleChange(designKeyName, value, doStyleSave);
      },
      applyGradientStepChange: function(target, doStyleSave) {
        var className, i, j, mh, mozCache, mozFlag, stepValue, webkitCache, webkitFlag, wh;
        if (doStyleSave == null) {
          doStyleSave = true;
        }
        this.changeGradientShow(target);
        stepValue = parseInt($(target).val());
        for (i = j = 2; j <= 4; i = ++j) {
          className = 'design_bg_color' + i;
          mozFlag = $("." + className + "_moz_flag", this._cssRoot);
          mozCache = $("." + className + "_moz_cache", this._cssRoot);
          webkitFlag = $("." + className + "_webkit_flag", this._cssRoot);
          webkitCache = $("." + className + "_webkit_cache", this._cssRoot);
          if (i > stepValue - 1) {
            mh = mozFlag.html();
            if (mh.length > 0) {
              mozCache.html(mh);
            }
            wh = webkitFlag.html();
            if (wh.length > 0) {
              webkitCache.html(wh);
            }
            $(mozFlag).empty();
            $(webkitFlag).empty();
          } else {
            mozFlag.html(mozCache.html());
            webkitFlag.html(webkitCache.html());
          }
        }
        return this.applyDesignChange(doStyleSave);
      },
      applyColorChangeByPicker: function(designKeyName, value, doStyleSave) {
        var codeEmt;
        if (doStyleSave == null) {
          doStyleSave = true;
        }
        codeEmt = $("." + designKeyName + "_value", this._cssCode);
        codeEmt.text(value);
        return this.applyDesignChange(doStyleSave);
      }
    });
  }

  return CssItemBase;

})(ItemBase);

//# sourceMappingURL=css_item_base.js.map
