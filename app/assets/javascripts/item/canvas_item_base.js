// Generated by CoffeeScript 1.9.2
var CanvasItemBase,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CanvasItemBase = (function(superClass) {
  extend(CanvasItemBase, superClass);

  function CanvasItemBase() {
    CanvasItemBase.__super__.constructor.call(this);
    this.newDrawingSurfaceImageData = null;
    this.newDrawedSurfaceImageData = null;
    this.scale = {
      w: 1.0,
      h: 1.0
    };
    if (window.isWorkTable) {
      this.constructor.include(WorkTableCanvasItemExtend);
    }
  }

  CanvasItemBase.prototype.canvasElementId = function() {
    return this.id + '_canvas';
  };

  CanvasItemBase.prototype.setScale = function() {
    var canvas, context, element;
    element = $("#" + this.id);
    canvas = $("#" + (this.canvasElementId()));
    element.width(this.itemSize.w * this.scale.w);
    element.height(this.itemSize.h * this.scale.h);
    canvas.attr('width', element.width());
    canvas.attr('height', element.height());
    context = canvas[0].getContext('2d');
    return context.scale(this.scale.w, this.scale.h);
  };

  CanvasItemBase.prototype.initCanvas = function() {
    return this.setScale();
  };

  CanvasItemBase.prototype.makeNewCanvas = function() {
    $(ElementCode.get().createItemElement(this)).appendTo(window.scrollInside);
    this.initCanvas();
    return this.saveNewDrawingSurface();
  };

  CanvasItemBase.prototype.saveNewDrawingSurface = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      return this.newDrawingSurfaceImageData = context.getImageData(0, 0, canvas.width, canvas.height);
    }
  };

  CanvasItemBase.prototype.saveNewDrawedSurface = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      return this.newDrawedSurfaceImageData = context.getImageData(0, 0, canvas.width, canvas.height);
    }
  };

  CanvasItemBase.prototype.restoreAllNewDrawingSurface = function() {
    var canvas, context;
    if (this.newDrawingSurfaceImageData != null) {
      canvas = document.getElementById(this.canvasElementId());
      if (canvas != null) {
        context = canvas.getContext('2d');
        return context.putImageData(this.newDrawingSurfaceImageData, 0, 0);
      }
    }
  };

  CanvasItemBase.prototype.restoreAllNewDrawedSurface = function() {
    var canvas, context;
    if (this.newDrawedSurfaceImageData) {
      canvas = document.getElementById(this.canvasElementId());
      if (canvas != null) {
        context = canvas.getContext('2d');
        return context.putImageData(this.newDrawedSurfaceImageData, 0, 0);
      }
    }
  };

  CanvasItemBase.prototype.clearDraw = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      context.clearRect(0, 0, canvas.width, canvas.height);
      return this.initCanvas();
    }
  };

  CanvasItemBase.prototype.stateEventBefore = function(isForward) {
    var h, itemDiff, obj, scale, sh, sw, w;
    obj = this.getMinimumObject();
    if (!isForward) {
      scale = obj.scale;
      itemDiff = this.event[EventPageValueBase.PageValueKey.ITEM_SIZE_DIFF];
      obj.itemSize.x -= itemDiff.x;
      obj.itemSize.y -= itemDiff.y;
      w = scale.w * obj.itemSize.w;
      h = scale.h * obj.itemSize.h;
      sw = (w - itemDiff.w) / obj.itemSize.w;
      sh = (h - itemDiff.h) / obj.itemSize.h;
      obj.scale.w = sw;
      obj.scale.h = sh;
    }
    return obj;
  };

  CanvasItemBase.prototype.stateEventAfter = function(isForward) {
    var h, itemDiff, obj, scale, sh, sw, w;
    obj = this.getMinimumObject();
    if (isForward) {
      scale = obj.scale;
      itemDiff = this.event[EventPageValueBase.PageValueKey.ITEM_SIZE_DIFF];
      obj.itemSize.x += itemDiff.x;
      obj.itemSize.y += itemDiff.y;
      w = scale.w * obj.itemSize.w;
      h = scale.h * obj.itemSize.h;
      sw = (w + itemDiff.w) / obj.itemSize.w;
      sh = (h + itemDiff.h) / obj.itemSize.h;
      obj.scale.w = sw;
      obj.scale.h = sh;
    }
    return obj;
  };

  CanvasItemBase.prototype.updateEventBefore = function() {
    var capturedEventBeforeObject, itemSize;
    CanvasItemBase.__super__.updateEventBefore.call(this);
    capturedEventBeforeObject = this.getCapturedEventBeforeObject();
    if (capturedEventBeforeObject) {
      itemSize = Common.makeClone(capturedEventBeforeObject.itemSize);
      itemSize.w *= capturedEventBeforeObject.scale.w;
      itemSize.h *= capturedEventBeforeObject.scale.h;
      return this.updatePositionAndItemSize(itemSize, false);
    }
  };

  CanvasItemBase.prototype.updateEventAfter = function() {
    var capturedEventAfterObject, itemSize;
    CanvasItemBase.__super__.updateEventAfter.call(this);
    capturedEventAfterObject = this.getCapturedEventAfterObject();
    if (capturedEventAfterObject) {
      itemSize = Common.makeClone(capturedEventAfterObject.itemSize);
      itemSize.w *= capturedEventAfterObject.scale.w;
      itemSize.h *= capturedEventAfterObject.scale.h;
      return this.updatePositionAndItemSize(itemSize, false);
    }
  };

  CanvasItemBase.prototype.updateItemSize = function(w, h) {
    var canvas, drawingCanvas, drawingContext, element, scaleH, scaleW;
    element = $('#' + this.id);
    element.css({
      width: w,
      height: h
    });
    canvas = $('#' + this.canvasElementId());
    scaleW = element.width() / this.itemSize.w;
    scaleH = element.height() / this.itemSize.h;
    canvas.attr('width', element.width());
    canvas.attr('height', element.height());
    drawingCanvas = document.getElementById(this.canvasElementId());
    drawingContext = drawingCanvas.getContext('2d');
    drawingContext.scale(scaleW, scaleH);
    this.scale.w = scaleW;
    this.scale.h = scaleH;
    return this.drawNewCanvas();
  };

  CanvasItemBase.prototype.originalItemElementSize = function() {
    var capturedEventBeforeObject, itemSize, originalScale;
    capturedEventBeforeObject = this.getCapturedEventBeforeObject();
    itemSize = capturedEventBeforeObject.itemSize;
    originalScale = capturedEventBeforeObject.scale;
    return {
      x: itemSize.x,
      y: itemSize.y,
      w: itemSize.w * originalScale.w,
      h: itemSize.h * originalScale.h
    };
  };

  CanvasItemBase.prototype.setupOptionMenu = function() {
    var btnBgColor, btnGradientStep, btnShadowColor, cssCode, cssRoot, item;
    CanvasItemBase.__super__.setupOptionMenu.call(this);
    item = this;
    cssRoot = this.cssRoot;
    cssCode = this.cssCode;
    if (this.constructor.actionProperties.designConfig === Constant.ItemDesignOptionType.DESIGN_TOOL) {
      btnGradientStep = $(".design_gradient_step", this.designConfigRoot);
      btnBgColor = $(".design_bg_color1,.design_bg_color2,.design_bg_color3,.design_bg_color4,.design_bg_color5,.design_border_color,.design_font_color", this.designConfigRoot);
      btnShadowColor = $(".design_shadow_color,.design_shadowinset_color,.design_text_shadow1_color,.design_text_shadow2_color", this.designConfigRoot);
      SidebarUI.settingGradientSlider('design_slider_gradient', null, cssCode, this.designConfigRoot);
      SidebarUI.settingGradientDegSlider('design_slider_gradient_deg', 0, 315, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_border_radius', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_border_width', 0, 10, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_font_size', 0, 30, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadow_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadow_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_shadow_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadow_top', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadowinset_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadowinset_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_shadowinset_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_shadowinset_top', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow1_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow1_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_text_shadow1_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow1_top', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow2_left', -100, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow2_opacity', 0.0, 1.0, cssCode, this.designConfigRoot, 0.1);
      SidebarUI.settingSlider('design_slider_text_shadow2_size', 0, 100, cssCode, this.designConfigRoot);
      SidebarUI.settingSlider('design_slider_text_shadow2_top', -100, 100, cssCode, this.designConfigRoot);
      btnBgColor.each(function() {
        var btnCodeEmt, className, colorValue, self;
        self = $(this);
        className = self[0].classList[0];
        btnCodeEmt = cssCode.find("." + className).first();
        colorValue = btnCodeEmt.text();
        return ColorPickerUtil.initColorPicker(self, colorValue, function(a, b, d) {
          btnCodeEmt = cssCode.find("." + className);
          btnCodeEmt.text(b);
          return item.applyCssStyle();
        });
      });
      btnShadowColor.each(function() {
        var btnCodeEmt, className, colorValue, self;
        self = $(this);
        className = self[0].classList[0];
        btnCodeEmt = cssCode.find("." + className).first();
        colorValue = btnCodeEmt.text();
        return ColorPickerUtil.initColorPicker(self, colorValue, function(a, b, d) {
          btnCodeEmt = cssCode.find("." + className);
          btnCodeEmt.text(d.r + "," + d.g + "," + d.b);
          return item.applyCssStyle();
        });
      });
      btnGradientStep.off('keyup mouseup');
      return btnGradientStep.on('keyup mouseup', function(e) {
        var className, i, j, mh, mozCache, mozFlag, stepValue, webkitCache, webkitFlag, wh;
        SidebarUI.changeGradientShow(e.currentTarget, cssCode, this.designConfigRoot);
        stepValue = parseInt($(e.currentTarget).val());
        for (i = j = 2; j <= 4; i = ++j) {
          className = 'design_bg_color' + i;
          mozFlag = $("." + className + "_moz_flag", cssRoot);
          mozCache = $("." + className + "_moz_cache", cssRoot);
          webkitFlag = $("." + className + "_webkit_flag", cssRoot);
          webkitCache = $("." + className + "_webkit_cache", cssRoot);
          if (i > stepValue - 1) {
            mh = mozFlag.html();
            if (mh.length > 0) {
              mozCache.html(mh);
            }
            wh = webkitFlag.html();
            if (wh.length > 0) {
              webkitCache.html(wh);
            }
            $(mozFlag).empty();
            $(webkitFlag).empty();
          } else {
            mozFlag.html(mozCache.html());
            webkitFlag.html(webkitCache.html());
          }
        }
        return item.applyCssStyle();
      }).each(function() {
        var className, i, j, mh, mozCache, mozFlag, stepValue, webkitCache, webkitFlag, wh;
        SidebarUI.changeGradientShow(this, cssCode, this.designConfigRoot);
        stepValue = parseInt($(this).val());
        for (i = j = 2; j <= 4; i = ++j) {
          className = 'design_bg_color' + i;
          mozFlag = $("." + className + "_moz_flag", cssRoot);
          mozCache = $("." + className + "_moz_cache", cssRoot);
          webkitFlag = $("." + className + "_webkit_flag", cssRoot);
          webkitCache = $("." + className + "_webkit_cache", cssRoot);
          if (i > stepValue - 1) {
            mh = mozFlag.html();
            if (mh.length > 0) {
              mozCache.html(mh);
            }
            wh = webkitFlag.html();
            if (wh.length > 0) {
              webkitCache.html(wh);
            }
            $(mozFlag).empty();
            $(webkitFlag).empty();
          }
        }
        return item.applyCssStyle();
      });
    }
  };

  CanvasItemBase.prototype.applyDesignTool = function(drawingContext) {};

  return CanvasItemBase;

})(ItemBase);

//# sourceMappingURL=canvas_item_base.js.map
