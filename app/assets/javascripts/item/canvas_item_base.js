// Generated by CoffeeScript 1.9.2
var CanvasItemBase,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CanvasItemBase = (function(superClass) {
  extend(CanvasItemBase, superClass);

  function CanvasItemBase() {
    CanvasItemBase.__super__.constructor.call(this);
    this._newDrawingSurfaceImageData = null;
    this._newDrawedSurfaceImageData = null;
    this.scale = {
      w: 1.0,
      h: 1.0
    };
  }

  CanvasItemBase.prototype.canvasElementId = function() {
    return this.id + '_canvas';
  };

  CanvasItemBase.prototype.createItemElement = function(callback) {
    var canvas, contents;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      callback();
      return;
    }
    contents = "<canvas id=\"" + (this.canvasElementId()) + "\" class=\"canvas context_base\" ></canvas>";
    return this.addContentsToScrollInside(contents, callback);
  };

  CanvasItemBase.prototype.setScale = function() {
    var canvas, context, element;
    element = $("#" + this.id);
    canvas = $("#" + (this.canvasElementId()));
    element.width(this.itemSize.w * this.scale.w);
    element.height(this.itemSize.h * this.scale.h);
    canvas.attr('width', element.width());
    canvas.attr('height', element.height());
    context = canvas[0].getContext('2d');
    return context.scale(this.scale.w, this.scale.h);
  };

  CanvasItemBase.prototype.initCanvas = function() {
    return this.setScale();
  };

  CanvasItemBase.prototype.itemDraw = function(show) {
    if (show == null) {
      show = true;
    }
    return this.initCanvas();
  };

  CanvasItemBase.prototype.saveNewDrawingSurface = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      return this._newDrawingSurfaceImageData = context.getImageData(0, 0, canvas.width, canvas.height);
    }
  };

  CanvasItemBase.prototype.saveNewDrawedSurface = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      return this._newDrawedSurfaceImageData = context.getImageData(0, 0, canvas.width, canvas.height);
    }
  };

  CanvasItemBase.prototype.restoreAllNewDrawingSurface = function() {
    var canvas, context;
    if (this._newDrawingSurfaceImageData != null) {
      canvas = document.getElementById(this.canvasElementId());
      if (canvas != null) {
        context = canvas.getContext('2d');
        return context.putImageData(this._newDrawingSurfaceImageData, 0, 0);
      }
    }
  };

  CanvasItemBase.prototype.restoreAllNewDrawedSurface = function() {
    var canvas, context;
    if (this._newDrawedSurfaceImageData) {
      canvas = document.getElementById(this.canvasElementId());
      if (canvas != null) {
        context = canvas.getContext('2d');
        return context.putImageData(this._newDrawedSurfaceImageData, 0, 0);
      }
    }
  };

  CanvasItemBase.prototype.clearDraw = function() {
    var canvas, context;
    this.saveNewDrawingSurface();
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      context.clearRect(0, 0, canvas.width, canvas.height);
      return this.initCanvas();
    }
  };

  CanvasItemBase.prototype.updateItemSize = function(w, h) {
    var canvas, drawingCanvas, drawingContext, element, scaleH, scaleW;
    element = $('#' + this.id);
    element.css({
      width: w,
      height: h
    });
    canvas = $('#' + this.canvasElementId());
    scaleW = element.width() / this.itemSize.w;
    scaleH = element.height() / this.itemSize.h;
    canvas.attr('width', element.width());
    canvas.attr('height', element.height());
    drawingCanvas = document.getElementById(this.canvasElementId());
    drawingContext = drawingCanvas.getContext('2d');
    drawingContext.scale(scaleW, scaleH);
    this.scale.w = scaleW;
    this.scale.h = scaleH;
    return this.drawNewCanvas();
  };

  CanvasItemBase.prototype.originalItemElementSize = function() {
    var diff, itemSize, obj, originalScale;
    diff = PageValue.getFootprintPageValue(PageValue.Key.footprintInstanceDiffBefore(this.event[EventPageValueBase.PageValueKey.DIST_ID], this.id));
    obj = PageValue.getInstancePageValue(PageValue.Key.instanceValue(this.id));
    $.extend(true, obj, diff);
    itemSize = obj.itemSize;
    originalScale = obj.scale;
    return {
      x: itemSize.x,
      y: itemSize.y,
      w: itemSize.w * originalScale.w,
      h: itemSize.h * originalScale.h
    };
  };

  CanvasItemBase.prototype.applyDesignTool = function() {
    var drawingCanvas, drawingContext;
    drawingCanvas = document.getElementById(this.canvasElementId());
    drawingContext = drawingCanvas.getContext('2d');
    (function(_this) {
      return (function() {
        var centorCood, deg, endX, endY, gradient, halfSlopLength, l1, pi, startX, startY, tanX, tanY;
        halfSlopLength = Math.sqrt(Math.pow(drawingCanvas.width / 2.0, 2) + Math.pow(drawingCanvas.height / 2.0, 2));
        deg = _this.designs.values.design_slider_gradient_deg_value;
        pi = deg / 180.0 * Math.PI;
        tanX = drawingCanvas.width * (Math.sin(pi) >= 0 ? Math.ceil(Math.sin(pi)) : Math.floor(Math.sin(pi)));
        tanY = drawingCanvas.height * (Math.cos(pi) >= 0 ? Math.ceil(Math.cos(pi)) : Math.floor(Math.cos(pi)));
        l1 = halfSlopLength * Math.cos(Math.abs((Math.atan2(tanX, tanY) * 180.0 / Math.PI) - deg) / 180.0 * Math.PI);
        centorCood = {
          x: drawingCanvas.width / 2.0,
          y: drawingCanvas.height / 2.0
        };
        startX = centorCood.x + parseInt(l1 * Math.sin(pi));
        startY = centorCood.y - parseInt(l1 * Math.cos(pi));
        endX = centorCood.x + parseInt(l1 * Math.sin(pi + Math.PI));
        endY = centorCood.y - parseInt(l1 * Math.cos(pi + Math.PI));
        gradient = drawingContext.createLinearGradient(startX, startY, endX, endY);
        gradient.addColorStop(0, "#" + _this.designs.values.design_bg_color1_value);
        if (_this.designs.flags.design_bg_color2_flag) {
          gradient.addColorStop(_this.designs.values.design_bg_color2_position_value / 100, "#" + _this.designs.values.design_bg_color2_value);
        }
        if (_this.designs.flags.design_bg_color3_flag) {
          gradient.addColorStop(_this.designs.values.design_bg_color3_position_value / 100, "#" + _this.designs.values.design_bg_color3_value);
        }
        if (_this.designs.flags.design_bg_color4_flag) {
          gradient.addColorStop(_this.designs.values.design_bg_color4_position_value / 100, "#" + _this.designs.values.design_bg_color4_value);
        }
        gradient.addColorStop(1, "#" + _this.designs.values.design_bg_color5_value);
        return drawingContext.fillStyle = gradient;
      });
    })(this)();
    (function(_this) {
      return (function() {
        drawingContext.shadowColor = "rgba(" + _this.designs.values.design_shadow_color_value + "," + _this.designs.values.design_slider_shadow_opacity_value + ")";
        drawingContext.shadowOffsetX = _this.designs.values.design_slider_shadow_left_value;
        drawingContext.shadowOffsetY = _this.designs.values.design_slider_shadow_top_value;
        return drawingContext.shadowBlur = _this.designs.values.design_slider_shadow_size_value;
      });
    })(this)();
    (function(_this) {
      return (function() {
        drawingContext.strokeStyle = "#" + _this.designs.values.design_border_color_value;
        drawingContext.lineWidth = _this.designs.values.design_slider_border_width_value;
        return drawingContext.miterLimit = _this.designs.values.design_slider_border_radius_value;
      });
    })(this)();
    drawingContext.stroke();
    return drawingContext.fill();
  };

  if (window.isWorkTable) {
    CanvasItemBase.include(canvasItemBaseWorktableExtend);
  }

  return CanvasItemBase;

})(ItemBase);

//# sourceMappingURL=canvas_item_base.js.map
