// Generated by CoffeeScript 1.9.2
var CanvasItemBase, CssItemBase, ItemBase,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ItemBase = (function(superClass) {
  var constant;

  extend(ItemBase, superClass);

  ItemBase.IDENTITY = "";

  ItemBase.ITEM_ID = "";

  ItemBase.DESIGN_CONFIG_ROOT_ID = 'design_config_@id';

  if (typeof gon !== "undefined" && gon !== null) {
    constant = gon["const"];
    ItemBase.ActionPropertiesKey = (function() {
      function ActionPropertiesKey() {}

      ActionPropertiesKey.METHODS = constant.ItemActionPropertiesKey.METHODS;

      ActionPropertiesKey.DEFAULT_METHOD = constant.ItemActionPropertiesKey.DEFAULT_METHOD;

      ActionPropertiesKey.ACTION_TYPE = constant.ItemActionPropertiesKey.ACTION_TYPE;

      ActionPropertiesKey.ANIMATION_TYPE = constant.ItemActionPropertiesKey.ANIMATION_TYPE;

      ActionPropertiesKey.SCROLL_ENABLED_DIRECTION = constant.ItemActionPropertiesKey.SCROLL_ENABLED_DIRECTION;

      ActionPropertiesKey.SCROLL_FORWARD_DIRECTION = constant.ItemActionPropertiesKey.SCROLL_FORWARD_DIRECTION;

      ActionPropertiesKey.OPTIONS = constant.ItemActionPropertiesKey.OPTIONS;

      return ActionPropertiesKey;

    })();
  }

  function ItemBase(cood) {
    if (cood == null) {
      cood = null;
    }
    ItemBase.__super__.constructor.call(this);
    this.id = "i" + this.constructor.IDENTITY + Common.generateId();
    this.name = null;
    this.drawingSurfaceImageData = null;
    if (cood !== null) {
      this.mousedownCood = {
        x: cood.x,
        y: cood.y
      };
    }
    this.itemSize = null;
    this.zindex = Constant.Zindex.EVENTBOTTOM + 1;
    this.ohiRegist = [];
    this.ohiRegistIndex = 0;
    this.jqueryElement = null;
    this.coodRegist = [];
  }

  ItemBase.prototype.getDesignConfigId = function() {
    return this.constructor.DESIGN_CONFIG_ROOT_ID.replace('@id', this.id);
  };

  ItemBase.prototype.getJQueryElement = function() {
    return $('#' + this.id);
  };

  ItemBase.prototype.saveDrawingSurface = function() {
    return this.drawingSurfaceImageData = drawingContext.getImageData(0, 0, drawingCanvas.width, drawingCanvas.height);
  };

  ItemBase.prototype.restoreAllDrawingSurface = function() {
    return drawingContext.putImageData(this.drawingSurfaceImageData, 0, 0);
  };

  ItemBase.prototype.restoreDrawingSurface = function(size) {
    var padding;
    padding = 5;
    return drawingContext.putImageData(this.drawingSurfaceImageData, 0, 0, size.x - padding, size.y - padding, size.w + (padding * 2), size.h + (padding * 2));
  };

  ItemBase.prototype.endDraw = function(zindex) {
    this.zindex = zindex;
    return true;
  };

  ItemBase.prototype.reDraw = function(show) {
    if (show == null) {
      show = true;
    }
  };

  ItemBase.prototype.saveObj = function(newCreated) {
    var k, num, ref, self, v;
    if (newCreated == null) {
      newCreated = false;
    }
    if (newCreated) {
      num = 0;
      self = this;
      ref = Common.getCreatedItemInstances();
      for (k in ref) {
        v = ref[k];
        if (self.constructor.IDENTITY === v.constructor.IDENTITY) {
          num += 1;
        }
      }
      this.name = this.constructor.IDENTITY + (" " + num);
    }
    this.setItemAllPropToPageValue();
    LocalStorage.saveAllPageValues();
    OperationHistory.add();
    if (window.debug) {
      console.log('save obj');
    }
    return Timeline.updateSelectItemMenu();
  };

  ItemBase.prototype.getItemPropFromPageValue = function(prop, isCache) {
    var prefix_key;
    if (isCache == null) {
      isCache = false;
    }
    prefix_key = isCache ? PageValue.Key.instanceValueCache(this.id) : PageValue.Key.instanceValue(this.id);
    return PageValue.getInstancePageValue(prefix_key + (":" + prop));
  };

  ItemBase.prototype.setItemPropToPageValue = function(prop, value, isCache) {
    var prefix_key;
    if (isCache == null) {
      isCache = false;
    }
    prefix_key = isCache ? PageValue.Key.instanceValueCache(this.id) : PageValue.Key.instanceValue(this.id);
    PageValue.setInstancePageValue(prefix_key + (":" + prop), value);
    return LocalStorage.saveInstancePageValue();
  };

  ItemBase.prototype.getMinimumObject = function() {
    var obj;
    obj = {
      id: Common.makeClone(this.id),
      itemId: Common.makeClone(this.constructor.ITEM_ID),
      name: Common.makeClone(this.name),
      itemSize: Common.makeClone(this.itemSize),
      zindex: Common.makeClone(this.zindex),
      coodRegist: JSON.stringify(Common.makeClone(this.coodRegist))
    };
    return obj;
  };

  ItemBase.prototype.setMiniumObject = function(obj) {
    delete window.instanceMap[this.id];
    this.id = Common.makeClone(obj.id);
    this.name = Common.makeClone(obj.name);
    this.itemSize = Common.makeClone(obj.itemSize);
    this.zindex = Common.makeClone(obj.zindex);
    this.coodRegist = Common.makeClone(JSON.parse(obj.coodRegist));
    return window.instanceMap[this.id] = this;
  };

  ItemBase.prototype.clearAllEventStyle = function() {};

  ItemBase.defaultMethodName = function() {
    return this.actionProperties()[this.ActionPropertiesKey.DEFAULT_METHOD];
  };

  ItemBase.defaultActionType = function() {
    return this.actionProperties()[this.ActionPropertiesKey.METHODS][this.defaultMethodName()][this.ActionPropertiesKey.ACTION_TYPE];
  };

  ItemBase.defaultAnimationType = function() {
    return this.actionProperties()[this.ActionPropertiesKey.METHODS][this.defaultMethodName()][this.ActionPropertiesKey.ANIMATION_TYPE];
  };

  ItemBase.defaultEventConfigValue = function() {
    return null;
  };

  ItemBase.defaultScrollEnabledDirection = function() {
    return this.actionProperties()[this.ActionPropertiesKey.METHODS][this.defaultMethodName()][this.ActionPropertiesKey.SCROLL_ENABLED_DIRECTION];
  };

  ItemBase.defaultScrollForwardDirection = function() {
    return this.actionProperties()[this.ActionPropertiesKey.METHODS][this.defaultMethodName()][this.ActionPropertiesKey.SCROLL_FORWARD_DIRECTION];
  };

  ItemBase.prototype.eventConfigValue = function() {
    return null;
  };

  return ItemBase;

})(ItemEventBase);

CssItemBase = (function(superClass) {
  extend(CssItemBase, superClass);

  function CssItemBase(cood) {
    if (cood == null) {
      cood = null;
    }
    CssItemBase.__super__.constructor.call(this, cood);
    if (cood !== null) {
      this.moveLoc = {
        x: cood.x,
        y: cood.y
      };
    }
    this.css = null;
  }

  CssItemBase.prototype.reDraw = function(show) {
    if (show == null) {
      show = true;
    }
    CssItemBase.__super__.reDraw.call(this, show);
    this.clearDraw();
    $(ElementCode.get().createItemElement(this)).appendTo(window.scrollInside);
    if (!show) {
      this.getJQueryElement().css('opacity', 0);
    }
    if (this.setupDragAndResizeEvents != null) {
      return this.setupDragAndResizeEvents();
    }
  };

  CssItemBase.prototype.clearDraw = function() {
    return this.getJQueryElement().remove();
  };

  CssItemBase.prototype.getMinimumObject = function() {
    var newobj, obj;
    obj = CssItemBase.__super__.getMinimumObject.call(this);
    newobj = {
      itemId: this.constructor.ITEM_ID,
      mousedownCood: Common.makeClone(this.mousedownCood),
      css: Common.makeClone(this.css)
    };
    $.extend(obj, newobj);
    return obj;
  };

  CssItemBase.prototype.setMiniumObject = function(obj) {
    CssItemBase.__super__.setMiniumObject.call(this, obj);
    this.mousedownCood = Common.makeClone(obj.mousedownCood);
    return this.css = Common.makeClone(obj.css);
  };

  CssItemBase.prototype.getCssRootElementId = function() {
    return "css-" + this.id;
  };

  CssItemBase.prototype.getCssAnimElementId = function() {
    return "css-anim-style";
  };

  CssItemBase.prototype.setupOptionMenu = function() {};

  CssItemBase.prototype.endDraw = function(zindex, show) {
    if (show == null) {
      show = true;
    }
    if (!CssItemBase.__super__.endDraw.call(this, zindex)) {
      return false;
    }
    this.itemSize.x += scrollContents.scrollLeft();
    this.itemSize.y += scrollContents.scrollTop();
    return true;
  };

  CssItemBase.prototype.makeCss = function() {
    var newEmt;
    newEmt = null;
    if (this.css != null) {
      newEmt = $(this.css);
    } else {
      newEmt = $('#' + this.constructor.CSSTEMPID).clone(true).attr('id', this.getCssRootElementId());
      newEmt.find('.btn-item-id').html(this.id);
    }
    $('#css_code_info').append(newEmt);
    this.cssRoot = $('#' + this.getCssRootElementId());
    this.cssCache = $(".css-cache", this.cssRoot);
    this.cssCode = $(".css-code", this.cssRoot);
    this.cssStyle = $(".css-style", this.cssRoot);
    return this.cssStyle.text(this.cssCode.text());
  };

  CssItemBase.prototype.cssElement = function() {
    return null;
  };

  CssItemBase.prototype.appendCssIfNeeded = function() {
    var ce, funcName, methodName;
    ce = this.cssElement();
    if (ce != null) {
      methodName = this.getEventMethodName();
      this.removeCss();
      funcName = methodName + "_" + this.id;
      return window.cssCode.append("<div class='" + funcName + "'><style type='text/css'> " + ce + " </style></div>");
    }
  };

  CssItemBase.prototype.removeCss = function() {
    var funcName, methodName;
    methodName = this.getEventMethodName();
    funcName = methodName + "_" + this.id;
    return window.cssCode.find("." + funcName).remove();
  };

  return CssItemBase;

})(ItemBase);

CanvasItemBase = (function(superClass) {
  extend(CanvasItemBase, superClass);

  function CanvasItemBase() {
    CanvasItemBase.__super__.constructor.call(this);
    this.newDrawingSurfaceImageData = null;
    this.newDrawedSurfaceImageData = null;
    this.scale = {
      w: 1.0,
      h: 1.0
    };
  }

  CanvasItemBase.prototype.endDraw = function(zindex, show) {
    if (show == null) {
      show = true;
    }
    if (!CanvasItemBase.__super__.endDraw.call(this, zindex)) {
      return false;
    }
    (function(_this) {
      return (function() {
        _this.coodRegist.forEach(function(e) {
          e.x -= _this.itemSize.x;
          return e.y -= _this.itemSize.y;
        });
        _this.coodLeftBodyPart.forEach(function(e) {
          e.x -= _this.itemSize.x;
          return e.y -= _this.itemSize.y;
        });
        _this.coodRightBodyPart.forEach(function(e) {
          e.x -= _this.itemSize.x;
          return e.y -= _this.itemSize.y;
        });
        return _this.coodHeadPart.forEach(function(e) {
          e.x -= _this.itemSize.x;
          return e.y -= _this.itemSize.y;
        });
      });
    })(this)();
    this.itemSize.x += scrollContents.scrollLeft();
    this.itemSize.y += scrollContents.scrollTop();
    return true;
  };

  CanvasItemBase.prototype.canvasElementId = function() {
    return this.id + '_canvas';
  };

  CanvasItemBase.prototype.setScale = function() {
    var canvas, context, element;
    element = $("#" + this.id);
    canvas = $("#" + (this.canvasElementId()));
    element.width(this.itemSize.w * this.scale.w);
    element.height(this.itemSize.h * this.scale.h);
    canvas.attr('width', element.width());
    canvas.attr('height', element.height());
    context = canvas[0].getContext('2d');
    context.scale(this.scale.w, this.scale.h);
    if (window.debug) {
      return console.log("setScale: itemSize: " + (JSON.stringify(this.itemSize)));
    }
  };

  CanvasItemBase.prototype.initCanvas = function() {
    return this.setScale();
  };

  CanvasItemBase.prototype.makeNewCanvas = function() {
    $(ElementCode.get().createItemElement(this)).appendTo(window.scrollInside);
    this.initCanvas();
    return this.saveNewDrawingSurface();
  };

  CanvasItemBase.prototype.saveNewDrawingSurface = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      return this.newDrawingSurfaceImageData = context.getImageData(0, 0, canvas.width, canvas.height);
    }
  };

  CanvasItemBase.prototype.saveNewDrawedSurface = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      return this.newDrawedSurfaceImageData = context.getImageData(0, 0, canvas.width, canvas.height);
    }
  };

  CanvasItemBase.prototype.restoreAllNewDrawingSurface = function() {
    var canvas, context;
    if (this.newDrawingSurfaceImageData != null) {
      canvas = document.getElementById(this.canvasElementId());
      if (canvas != null) {
        context = canvas.getContext('2d');
        return context.putImageData(this.newDrawingSurfaceImageData, 0, 0);
      }
    }
  };

  CanvasItemBase.prototype.restoreAllNewDrawedSurface = function() {
    var canvas, context;
    if (this.newDrawedSurfaceImageData) {
      canvas = document.getElementById(this.canvasElementId());
      if (canvas != null) {
        context = canvas.getContext('2d');
        return context.putImageData(this.newDrawedSurfaceImageData, 0, 0);
      }
    }
  };

  CanvasItemBase.prototype.clearDraw = function() {
    var canvas, context;
    canvas = document.getElementById(this.canvasElementId());
    if (canvas != null) {
      context = canvas.getContext('2d');
      context.clearRect(0, 0, canvas.width, canvas.height);
      return this.initCanvas();
    }
  };

  return CanvasItemBase;

})(ItemBase);

//# sourceMappingURL=item_base.js.map
