// Generated by CoffeeScript 1.9.2
var PageFlip;

PageFlip = (function() {
  function PageFlip() {
    var canvas, i, j, len, page, pages, ref;
    this.PAGE_WIDTH = 400;
    this.PAGE_HEIGHT = 250;
    this.BOOK_WIDTH = 830;
    this.BOOK_HEIGHT = 260;
    this.PAGE_Y = (this.BOOK_HEIGHT - this.PAGE_HEIGHT) / 2;
    this.CANVAS_PADDING = 60;
    page = 0;
    window.mainWrapper.append("<div id='pageflip-root'><canvas id='pageflip-canvas'></canvas></div>");
    canvas = document.getElementById("pageflip-canvas");
    this.context = canvas.getContext("2d");
    this.flips = [];
    this.root = $('#pageflip-root');
    pages = this.root.getElementsByTagName("section");
    len = pages.length;
    for (i = j = 0, ref = len - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      pages[i].style.zIndex = len - i;
      this.flips.push({
        progress: 1,
        target: 1,
        page: pages[i]
      });
    }
    canvas.width = this.BOOK_WIDTH + (this.CANVAS_PADDING * 2);
    canvas.height = this.BOOK_HEIGHT + (this.CANVAS_PADDING * 2);
    canvas.style.top = -this.CANVAS_PADDING + "px";
    canvas.style.left = -this.CANVAS_PADDING + "px";
  }

  PageFlip.prototype.render = function() {
    var flip, i, j, len, ref, results;
    this.context.clearRect(0, 0, canvas.width, canvas.height);
    len = this.flips.length;
    results = [];
    for (i = j = 0, ref = len - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      flip = this.flips[i];
      flip.target = Math.max(Math.min(mouse.x / this.PAGE_WIDTH, 1), -1);
      flip.progress += (flip.target - flip.progress) * 0.2;
      results.push(this.drawFlip(flip));
    }
    return results;
  };

  PageFlip.prototype.drawFlip = function(flip) {
    var foldGradient, foldWidth, foldX, leftShadowGradient, leftShadowWidth, paperShadowWidth, rightShadowGradient, rightShadowWidth, strength, verticalOutdent;
    strength = 1 - Math.abs(flip.progress);
    foldWidth = (this.PAGE_WIDTH * 0.5) * (1 - flip.progress);
    foldX = this.PAGE_WIDTH * flip.progress + foldWidth;
    verticalOutdent = 20 * strength;
    paperShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(1 - flip.progress, 0.5), 0);
    rightShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(strength, 0.5), 0);
    leftShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(strength, 0.5), 0);
    flip.page.style.width = Math.max(foldX, 0) + "px";
    this.context.save();
    this.context.translate(this.CANVAS_PADDING + (this.BOOK_WIDTH / 2), this.PAGE_Y + this.CANVAS_PADDING);
    this.context.strokeStyle = 'rgba(0,0,0,' + (0.05 * strength) + ')';
    this.context.lineWidth = 30 * strength;
    this.context.beginPath();
    this.context.moveTo(foldX - foldWidth, -verticalOutdent * 0.5);
    this.context.lineTo(foldX - foldWidth, this.PAGE_HEIGHT + (verticalOutdent * 0.5));
    this.context.stroke();
    rightShadowGradient = this.context.createLinearGradient(foldX, 0, foldX + rightShadowWidth, 0);
    rightShadowGradient.addColorStop(0, 'rgba(0,0,0,' + (strength * 0.2) + ')');
    rightShadowGradient.addColorStop(0.8, 'rgba(0,0,0,0.0)');
    this.context.fillStyle = rightShadowGradient;
    this.context.beginPath();
    this.context.moveTo(foldX, 0);
    this.context.lineTo(foldX + rightShadowWidth, 0);
    this.context.lineTo(foldX + rightShadowWidth, this.PAGE_HEIGHT);
    this.context.lineTo(foldX, this.PAGE_HEIGHT);
    this.context.fill();
    leftShadowGradient = this.context.createLinearGradient(foldX - foldWidth - leftShadowWidth, 0, foldX - foldWidth, 0);
    leftShadowGradient.addColorStop(0, 'rgba(0,0,0,0.0)');
    leftShadowGradient.addColorStop(1, 'rgba(0,0,0,' + (strength * 0.15) + ')');
    this.context.fillStyle = leftShadowGradient;
    this.context.beginPath();
    this.context.moveTo(foldX - foldWidth - leftShadowWidth, 0);
    this.context.lineTo(foldX - foldWidth, 0);
    this.context.lineTo(foldX - foldWidth, this.PAGE_HEIGHT);
    this.context.lineTo(foldX - foldWidth - leftShadowWidth, this.PAGE_HEIGHT);
    this.context.fill();
    foldGradient = this.context.createLinearGradient(foldX - paperShadowWidth, 0, foldX, 0);
    foldGradient.addColorStop(0.35, '#fafafa');
    foldGradient.addColorStop(0.73, '#eeeeee');
    foldGradient.addColorStop(0.9, '#fafafa');
    foldGradient.addColorStop(1.0, '#e2e2e2');
    this.context.fillStyle = foldGradient;
    this.context.strokeStyle = 'rgba(0,0,0,0.06)';
    this.context.lineWidth = 0.5;
    this.context.beginPath();
    this.context.moveTo(foldX, 0);
    this.context.lineTo(foldX, this.PAGE_HEIGHT);
    this.context.quadraticCurveTo(foldX, this.PAGE_HEIGHT + (verticalOutdent * 2), foldX - foldWidth, this.PAGE_HEIGHT + verticalOutdent);
    this.context.lineTo(foldX - foldWidth, -verticalOutdent);
    this.context.quadraticCurveTo(foldX, -verticalOutdent * 2, foldX, 0);
    this.context.fill();
    this.context.stroke();
    return this.context.restore();
  };

  return PageFlip;

})();

//# sourceMappingURL=pageflip.js.map
