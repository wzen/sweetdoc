// Generated by CoffeeScript 1.9.2
var PageFlip;

PageFlip = (function() {
  PageFlip.DIRECTION = {};

  PageFlip.DIRECTION.FORWARD = 1;

  PageFlip.DIRECTION.BACK = 2;

  function PageFlip(flipPageNum) {
    var zIndexMax;
    this.flipPageNum = flipPageNum;
    this.PAGE_WIDTH = $('#pages').width();
    this.PAGE_HEIGHT = $('#pages').height();
    this.CANVAS_PADDING = 20;
    this.zIndex = Common.plusPagingZindex(0, this.flipPageNum);
    zIndexMax = Common.plusPagingZindex(0, 0);
    $("#" + Constant.Paging.ROOT_ID).append("<div id='pageflip-root' style='position:absolute;top:0;left:0;width:100%;height:100%;z-index:" + zIndexMax + "'><canvas id='pageflip-canvas' style='z-index:" + zIndexMax + "'></canvas></div>");
    this.canvas = document.getElementById("pageflip-canvas");
    this.context = this.canvas.getContext("2d");
    this.canvas.width = this.PAGE_WIDTH + (this.CANVAS_PADDING * 2);
    this.canvas.height = this.PAGE_HEIGHT + (this.CANVAS_PADDING * 2);
    this.canvas.style.top = -this.CANVAS_PADDING + "px";
    this.canvas.style.left = -this.CANVAS_PADDING + "px";
  }

  PageFlip.prototype.startRender = function(direction, callback) {
    var className, pages, point, timer;
    if (callback == null) {
      callback = null;
    }
    className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', this.flipPageNum);
    pages = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
    if (direction === PageFlip.DIRECTION.FORWARD) {
      this.flip = {
        progress: 1,
        target: -0.25,
        page: pages
      };
      point = this.PAGE_WIDTH;
      return timer = setInterval((function(_this) {
        return function() {
          point -= 50;
          if (point < -_this.CANVAS_PADDING) {
            point = -_this.CANVAS_PADDING;
            _this.flip.progress = 0;
            _this.render(point);
            clearInterval(timer);
            $('#pageflip-root').remove();
            if (callback != null) {
              callback();
            }
          }
          return _this.render(point);
        };
      })(this), 50);
    } else if (direction === PageFlip.DIRECTION.BACK) {
      this.flip = {
        progress: -0.25,
        target: 1,
        page: pages
      };
      point = -this.CANVAS_PADDING;
      return timer = setInterval((function(_this) {
        return function() {
          point += 50;
          if (point > _this.PAGE_WIDTH) {
            point = _this.PAGE_WIDTH;
            _this.flip.progress = 1;
            _this.render(point);
            clearInterval(timer);
            $('#pageflip-root').remove();
            if (callback != null) {
              callback();
            }
          }
          return _this.render(point);
        };
      })(this), 50);
    }
  };

  PageFlip.prototype.render = function(point) {
    if (point < -this.CANVAS_PADDING || point > this.PAGE_WIDTH) {
      return;
    }
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.flip.progress += (this.flip.target - this.flip.progress) * 0.2;
    if (window.debug) {
      console.log('[render] progress: ' + this.flip.progress);
    }
    return this.drawFlip(this.flip);
  };

  PageFlip.prototype.drawFlip = function(flip) {
    var foldGradient, foldWidth, foldX, leftShadowGradient, leftShadowWidth, paperShadowWidth, rightShadowGradient, rightShadowWidth, strength, verticalOutdent;
    strength = 1 - Math.abs(flip.progress);
    foldWidth = 0;
    foldX = this.PAGE_WIDTH * flip.progress + foldWidth;
    if (window.debug) {
      console.log('[drawFlip] foldX:' + foldX + ' progress:' + flip.progress);
    }
    verticalOutdent = 20 * strength;
    paperShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(1 - flip.progress, 0.5), 0);
    rightShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(strength, 0.5), 0);
    leftShadowWidth = (this.PAGE_WIDTH * 0.5) * Math.max(Math.min(strength, 0.5), 0);
    flip.page.css({
      'width': Math.max(foldX, 0) + "px",
      'z-index': this.zIndex
    });
    this.context.save();
    this.context.strokeStyle = 'rgba(0,0,0,' + (0.05 * strength) + ')';
    this.context.lineWidth = 30 * strength;
    this.context.beginPath();
    this.context.moveTo(foldX - foldWidth, -verticalOutdent * 0.5);
    this.context.lineTo(foldX - foldWidth, this.PAGE_HEIGHT + (verticalOutdent * 0.5));
    this.context.stroke();
    rightShadowGradient = this.context.createLinearGradient(foldX, 0, foldX + rightShadowWidth, 0);
    rightShadowGradient.addColorStop(0, 'rgba(0,0,0,' + (strength * 0.2) + ')');
    rightShadowGradient.addColorStop(0.8, 'rgba(0,0,0,0.0)');
    this.context.fillStyle = rightShadowGradient;
    this.context.beginPath();
    this.context.moveTo(foldX, 0);
    this.context.lineTo(foldX + rightShadowWidth, 0);
    this.context.lineTo(foldX + rightShadowWidth, this.PAGE_HEIGHT);
    this.context.lineTo(foldX, this.PAGE_HEIGHT);
    this.context.fill();
    leftShadowGradient = this.context.createLinearGradient(foldX - foldWidth - leftShadowWidth, 0, foldX - foldWidth, 0);
    leftShadowGradient.addColorStop(0, 'rgba(0,0,0,0.0)');
    leftShadowGradient.addColorStop(1, 'rgba(0,0,0,' + (strength * 0.15) + ')');
    this.context.fillStyle = leftShadowGradient;
    this.context.beginPath();
    this.context.moveTo(foldX - foldWidth - leftShadowWidth, 0);
    this.context.lineTo(foldX - foldWidth, 0);
    this.context.lineTo(foldX - foldWidth, this.PAGE_HEIGHT);
    this.context.lineTo(foldX - foldWidth - leftShadowWidth, this.PAGE_HEIGHT);
    this.context.fill();
    foldGradient = this.context.createLinearGradient(foldX - paperShadowWidth, 0, foldX, 0);
    foldGradient.addColorStop(0.35, '#fafafa');
    foldGradient.addColorStop(0.73, '#eeeeee');
    foldGradient.addColorStop(0.9, '#fafafa');
    foldGradient.addColorStop(1.0, '#e2e2e2');
    this.context.fillStyle = foldGradient;
    this.context.strokeStyle = 'rgba(0,0,0,0.06)';
    this.context.lineWidth = 0.5;
    this.context.beginPath();
    this.context.moveTo(foldX, 0);
    this.context.lineTo(foldX, this.PAGE_HEIGHT);
    this.context.quadraticCurveTo(foldX, this.PAGE_HEIGHT + (verticalOutdent * 2), foldX - foldWidth, this.PAGE_HEIGHT + verticalOutdent);
    this.context.lineTo(foldX - foldWidth, -verticalOutdent);
    this.context.quadraticCurveTo(foldX, -verticalOutdent * 2, foldX, 0);
    this.context.fill();
    this.context.stroke();
    return this.context.restore();
  };

  return PageFlip;

})();

//# sourceMappingURL=pageflip.js.map
