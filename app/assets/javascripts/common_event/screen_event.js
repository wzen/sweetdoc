// Generated by CoffeeScript 1.9.2
var ScreenEvent,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ScreenEvent = (function(superClass) {
  extend(ScreenEvent, superClass);

  function ScreenEvent() {
    return ScreenEvent.__super__.constructor.apply(this, arguments);
  }

  ScreenEvent.PrivateClass = (function(superClass1) {
    extend(PrivateClass, superClass1);

    PrivateClass.EVENT_ID = '2';

    PrivateClass.CLASS_DIST_TOKEN = "PI_ScreenEvent";

    PrivateClass.actionProperties = {
      methods: {
        changeScreenPosition: {
          options: {
            id: 'changeScreenPosition',
            name: 'Changing position',
            ja: {
              name: '表示位置変更'
            }
          },
          specificValues: {
            afterX: scrollContents.scrollTop(),
            afterY: scrollContents.scrollLeft(),
            afterZ: 1
          }
        }
      }
    };

    function PrivateClass() {
      this.changeScreenPosition = bind(this.changeScreenPosition, this);
      PrivateClass.__super__.constructor.call(this);
      this.beforeScrollTop = scrollContents.scrollTop();
      this.beforeScrollLeft = scrollContents.scrollLeft();
    }

    PrivateClass.prototype.updateEventBefore = function() {
      var methodName;
      PrivateClass.__super__.updateEventBefore.call(this);
      methodName = this.getEventMethodName();
      if (methodName === 'changeScreenPosition') {
        return Common.updateScrollContentsPosition(this.beforeScrollTop, this.beforeScrollLeft);
      }
    };

    PrivateClass.prototype.updateEventAfter = function() {
      var methodName, scrollLeft, scrollTop;
      PrivateClass.__super__.updateEventAfter.call(this);
      methodName = this.getEventMethodName();
      if (methodName === 'changeScreenPosition') {
        scrollTop = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES].afterX);
        scrollLeft = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES].afterY);
        return Common.updateScrollContentsPosition(scrollTop, scrollLeft);
      }
    };

    PrivateClass.prototype.changeScreenPosition = function(opt) {
      var actionType, canvas, finished_count, overlay, scale, scrollLeft, scrollTop;
      if (opt.isPreview && opt.keepDispMag) {
        overlay = $('#preview_position_overlay');
        if ((overlay == null) || overlay.length === 0) {
          canvas = $("<canvas id='preview_position_overlay' style='background-color: transparent; width: 100%; height: 100%; z-index: " + (Common.plusPagingZindex(Constant.Zindex.EVENTFLOAT) + 1) + "'></canvas>");
          window.drawingCanvas.parent().append(canvas);
          overlay = $('#preview_position_overlay');
        }
        overlay;
      }
      actionType = this.getEventActionType();
      if (actionType === Constant.ActionType.CLICK) {
        finished_count = 0;
        scrollLeft = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES].afterX);
        scrollTop = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES].afterY);
        Common.updateScrollContentsPosition(scrollTop, scrollLeft, false, function() {
          finished_count += 1;
          if (finished_count >= 2) {
            this._isFinishedEvent = true;
            if (opt.complete != null) {
              return opt.complete();
            }
          }
        });
        scale = this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES].afterZ;
        if (scale !== 0) {
          return this.getJQueryElement().transition({
            scale: "" + scale
          }, 'normal', 'linear', function() {
            finished_count += 1;
            if (finished_count >= 2) {
              this._isFinishedEvent = true;
              if (opt.complete != null) {
                return opt.complete();
              }
            }
          });
        } else {
          finished_count += 1;
          if (finished_count >= 2) {
            this._isFinishedEvent = true;
            if (opt.complete != null) {
              return opt.complete();
            }
          }
        }
      }
    };

    PrivateClass.prototype.stopPreview = function(callback) {
      if (callback == null) {
        callback = null;
      }
      $('#preview_position_overlay').remove();
      return PrivateClass.__super__.stopPreview.call(this, callback);
    };

    PrivateClass.initSpecificConfig = function(specificRoot) {
      var emt;
      emt = specificRoot['changeScreenPosition'];
      return emt.find('event_pointing:first').off('click').on('click', (function(_this) {
        return function(e) {
          window.eventPointingMode = Constant.EventInputPointingMode.DRAW;
          return FloatView.showFixed('Drag position', FloatView.Type.INFO, function() {
            return window.eventPointingMode = Constant.EventInputPointingMode.NOT_SELECT;
          });
        };
      })(this));
    };

    return PrivateClass;

  })(CommonEvent.PrivateClass);

  ScreenEvent.EVENT_ID = ScreenEvent.PrivateClass.EVENT_ID;

  ScreenEvent.CLASS_DIST_TOKEN = ScreenEvent.PrivateClass.CLASS_DIST_TOKEN;

  ScreenEvent.actionProperties = ScreenEvent.PrivateClass.actionProperties;

  return ScreenEvent;

})(CommonEvent);

Common.setClassToMap(ScreenEvent.CLASS_DIST_TOKEN, ScreenEvent);

//# sourceMappingURL=screen_event.js.map
