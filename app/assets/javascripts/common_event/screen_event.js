// Generated by CoffeeScript 1.9.2
var ScreenEvent,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ScreenEvent = (function(superClass) {
  extend(ScreenEvent, superClass);

  function ScreenEvent() {
    return ScreenEvent.__super__.constructor.apply(this, arguments);
  }

  ScreenEvent.PrivateClass = (function(superClass1) {
    extend(PrivateClass, superClass1);

    PrivateClass.EVENT_ID = '2';

    PrivateClass.CLASS_DIST_TOKEN = "PI_ScreenEvent";

    function PrivateClass() {
      this.changeScreenPosition = bind(this.changeScreenPosition, this);
      PrivateClass.__super__.constructor.call(this);
      this.beforeScrollTop = scrollContents.scrollTop();
      this.beforeScrollLeft = scrollContents.scrollLeft();
    }

    PrivateClass.prototype.updateEventBefore = function() {
      var methodName;
      methodName = this.getEventMethodName();
      if (methodName === 'changeScreenPosition') {
        return Common.updateScrollContentsPosition(this.beforeScrollTop, this.beforeScrollLeft);
      }
    };

    PrivateClass.prototype.updateEventAfter = function() {
      var methodName, scrollLeft, scrollTop;
      methodName = this.getEventMethodName();
      if (methodName === 'changeScreenPosition') {
        scrollTop = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES][EPVScreenPosition.X]);
        scrollLeft = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES][EPVScreenPosition.Y]);
        return Common.updateScrollContentsPosition(this.beforeScrollTop + scrollTop, this.beforeScrollLeft + scrollLeft);
      }
    };

    PrivateClass.prototype.changeScreenPosition = function(opt) {
      var actionType, finished_count, scale, scrollLeft, scrollTop;
      actionType = this.getEventActionType();
      if (actionType === Constant.ActionType.CLICK) {
        finished_count = 0;
        scrollLeft = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES][EPVScreenPosition.X]);
        scrollTop = parseInt(this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES][EPVScreenPosition.Y]);
        Common.updateScrollContentsPosition(scrollContents.scrollTop() + scrollTop, scrollContents.scrollLeft() + scrollLeft, false, function() {
          finished_count += 1;
          if (finished_count >= 2) {
            this._isFinishedEvent = true;
            if (opt.complete != null) {
              return opt.complete();
            }
          }
        });
        scale = this._event[EventPageValueBase.PageValueKey.SPECIFIC_METHOD_VALUES][EPVScreenPosition.Z];
        if (scale !== 0) {
          return this.getJQueryElement().transition({
            scale: "+=" + scale
          }, 'normal', 'linear', function() {
            finished_count += 1;
            if (finished_count >= 2) {
              this._isFinishedEvent = true;
              if (opt.complete != null) {
                return opt.complete();
              }
            }
          });
        } else {
          finished_count += 1;
          if (finished_count >= 2) {
            this._isFinishedEvent = true;
            if (opt.complete != null) {
              return opt.complete();
            }
          }
        }
      }
    };

    return PrivateClass;

  })(CommonEvent.PrivateClass);

  ScreenEvent.EVENT_ID = ScreenEvent.PrivateClass.EVENT_ID;

  ScreenEvent.actionProperties = ScreenEvent.PrivateClass.actionProperties;

  return ScreenEvent;

})(CommonEvent);

Common.setClassToMap(true, ScreenEvent.EVENT_ID, ScreenEvent);

//# sourceMappingURL=screen_event.js.map
