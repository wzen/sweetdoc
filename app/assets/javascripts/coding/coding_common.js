// Generated by CoffeeScript 1.9.2
var CodingCommon;

CodingCommon = (function() {
  var _codes, _treeState, constant;

  function CodingCommon() {}

  if (typeof gon !== "undefined" && gon !== null) {
    constant = gon["const"];
    CodingCommon.Key = (function() {
      var CODE, CODES, IS_OPENED, LANG, NAME, NODE_PATH, PUBLIC, SUB_TREE, TREE_STATE, USER_CODING_ID;

      function Key() {}

      NAME = constant.Coding.Key.NAME;

      LANG = constant.Coding.Key.LANG;

      PUBLIC = constant.Coding.Key.PUBLIC;

      CODE = constant.Coding.Key.CODE;

      CODES = constant.Coding.Key.CODES;

      USER_CODING_ID = constant.Coding.Key.USER_CODING_ID;

      TREE_STATE = constant.Coding.Key.TREE_STATE;

      SUB_TREE = constant.Coding.Key.SUB_TREE;

      NODE_PATH = constant.Coding.Key.NODE_PATH;

      IS_OPENED = constant.Coding.Key.IS_OPENED;

      return Key;

    })();
  }

  CodingCommon.openItemCoding = function(e) {
    var target;
    e.stopPropagation();
    target = "_coding";
    window.open("about:blank", target);
    document.run_form.action = '/coding/item';
    document.run_form.target = target;
    setTimeout(function() {
      return document.run_form.submit();
    }, 200);
    return false;
  };

  CodingCommon.init = function() {
    this.initTreeView();
    return this.initEditor();
  };

  CodingCommon.initTreeView = function() {
    $('#tree').jstree();
    return this.setupTreeEvent();
  };

  CodingCommon.initEditor = function() {};

  CodingCommon.setupTreeEvent = function() {
    var root;
    root = $('#tree');
    $('.dir, .tip', root).off('click');
    $('.dir, .tip', root).on('click', function(e) {
      return e.preventDefault();
    });
    return this.setupContextMenu();
  };

  CodingCommon.setupContextMenu = function() {
    var menu;
    menu = [];
    menu.push({
      title: I18n.t('context_menu.new_file'),
      children: [
        {
          title: I18n.t('context_menu.js'),
          cmd: "js",
          func: function(event, ui) {
            return console.log('select JavaScript');
          }
        }, {
          title: I18n.t('context_menu.coffee'),
          cmd: "coffee",
          func: function(event, ui) {
            return console.log('select CoffeeScript');
          }
        }
      ]
    });
    menu.push({
      title: I18n.t('context_menu.new_folder'),
      cmd: "new_folder",
      func: function(event, ui) {
        return console.log('select CoffeeScript');
      }
    });
    return Common.setupContextMenu($('#tree .dir'), '#tree', {
      menu: menu,
      select: function(event, ui) {
        var i, len, results, value;
        results = [];
        for (i = 0, len = menu.length; i < len; i++) {
          value = menu[i];
          if (value.cmd === ui.cmd) {
            if (value.func != null) {
              results.push(value.func(event, ui));
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      beforeOpen: function(event, ui) {
        var t;
        t = $(event.target);
        return ui.menu.zIndex($(event.target).zIndex() + 1);
      }
    });
  };

  CodingCommon.saveAll = function(successCallback, errorCallback) {
    var data;
    if (successCallback == null) {
      successCallback = null;
    }
    if (errorCallback == null) {
      errorCallback = null;
    }
    data = {};
    data[this.Key.CODES] = _codes();
    data[this.Key.TREE_STATE] = _treeState();
    return $.ajax({
      url: "/coding/save_all",
      type: "POST",
      dataType: "json",
      data: data,
      success: function(data) {
        if (successCallback != null) {
          return successCallback(data);
        }
      },
      error: function(data) {
        if (errorCallback != null) {
          return errorCallback(data);
        }
      }
    });
  };

  CodingCommon.saveTree = function(successCallback, errorCallback) {
    var data;
    if (successCallback == null) {
      successCallback = null;
    }
    if (errorCallback == null) {
      errorCallback = null;
    }
    data = {};
    data[this.Key.TREE_STATE] = _treeState();
    return $.ajax({
      url: "/coding/save_tree",
      type: "POST",
      dataType: "json",
      data: data,
      success: function(data) {
        if (successCallback != null) {
          return successCallback(data);
        }
      },
      error: function(data) {
        if (errorCallback != null) {
          return errorCallback(data);
        }
      }
    });
  };

  CodingCommon.saveCode = function(successCallback, errorCallback) {
    var data;
    if (successCallback == null) {
      successCallback = null;
    }
    if (errorCallback == null) {
      errorCallback = null;
    }
    data = {};
    data[this.Key.CODES] = _codes();
    return $.ajax({
      url: "/coding/save_code",
      type: "POST",
      dataType: "json",
      data: data,
      success: function(data) {
        if (successCallback != null) {
          return successCallback(data);
        }
      },
      error: function(data) {
        if (errorCallback != null) {
          return errorCallback(data);
        }
      }
    });
  };

  CodingCommon.loadCodeData = function(successCallback, errorCallback) {
    if (successCallback == null) {
      successCallback = null;
    }
    if (errorCallback == null) {
      errorCallback = null;
    }
    return $.ajax({
      url: "/coding/load_code",
      type: "GET",
      dataType: "json",
      success: function(data) {
        if (successCallback != null) {
          return successCallback(data);
        }
      },
      error: function(data) {
        if (errorCallback != null) {
          return errorCallback(data);
        }
      }
    });
  };

  CodingCommon.loadTreeData = function(successCallback, errorCallback) {
    if (successCallback == null) {
      successCallback = null;
    }
    if (errorCallback == null) {
      errorCallback = null;
    }
    return $.ajax({
      url: "/coding/load_tree",
      type: "GET",
      dataType: "json",
      success: function(data) {
        if (successCallback != null) {
          return successCallback(data);
        }
      },
      error: function(data) {
        if (errorCallback != null) {
          return errorCallback(data);
        }
      }
    });
  };

  CodingCommon.createTabEditor = function(editorData) {
    var code, title;
    code = editorData.code;
    return title = editorData.title;
  };

  _treeState = function() {};

  _codes = function() {};

  return CodingCommon;

})();

//# sourceMappingURL=coding_common.js.map
