// Generated by CoffeeScript 1.8.0
var addStorage, changeGradientShow, changeMode, checkBlowserEnvironment, clearAllItemStyle, clearWorkTable, closeSidebar, drawItemFromStorage, flushWarn, generateId, getStorageByKey, initColorPickerValue, initCommonVar, initDraggableAndResizable, initHeaderMenu, initKeyEvent, loadFromServer, loadItemJs, openSidebar, popOperationHistory, popOperationHistoryRedo, pushOperationHistory, redo, run, runLookAround, saveToServer, settingColorPicker, settingGradientDegSlider, settingGradientSlider, settingGradientSliderByElement, settingSlider, setupContextMenu, showError, showWarn, switchGradientColorSelectorVisible, undo;

checkBlowserEnvironment = function() {
  var c, e;
  if (!localStorage) {
    return false;
  } else {
    try {
      localStorage.setItem('test', 'test');
      c = localStorage.getItem('test');
      localStorage.removeItem('test');
    } catch (_error) {
      e = _error;
      return false;
    }
  }
  if (!File) {
    return false;
  }
  return true;
};

initCommonVar = function() {
  window.sidebarWrapper = $("#sidebar-wrapper");
  window.mainScroll = $('#main_scroll');
  window.mainWrapper = $('#main-wrapper');
  window.originalMainContainerSize = {
    w: mainWrapper.width(),
    h: mainWrapper.height()
  };
  window.cssCode = $("#cssCode");
  window.codeCache = $("#codeCache");
  window.messageTimer = null;
  window.flushMessageTimer = null;
  window.drawingCanvas = document.getElementById('canvas_container');
  window.drawingContext = drawingCanvas.getContext('2d');
  window.mode = Constant.Mode.DRAW;
  window.selectItemMenu = Constant.ItemType.BUTTON;
  window.sstorage = sessionStorage;
  window.lstorage = localStorage;
  lstorage.clear();
  window.itemObjectList = [];
  window.itemFuncList = [];
  window.operationHistory = [];
  return window.operationHistoryIndex = 0;
};

initDraggableAndResizable = function() {
  var drag, rSize;
  drag = $('.draggable');
  drag.draggable({
    containment: mainWrapper
  });
  rSize = $('.resizable');
  return rSize.resizable({
    containment: mainWrapper
  });
};

setupContextMenu = function(element, contextSelector, menu) {
  var calMoveScrollLeft;
  calMoveScrollLeft = function(target) {
    var scrollLeft, targetMiddle;
    targetMiddle = $(target).offset().left + $(target).width() * 0.5;
    scrollLeft = targetMiddle - mainScroll.width() * 0.75 * 0.5;
    if (scrollLeft < 0) {
      scrollLeft = 0;
    } else if (scrollLeft > mainScroll.width() * 0.25) {
      scrollLeft = mainScroll.width() * 0.25;
    }
    return scrollLeft;
  };
  return element.contextmenu({
    delegate: contextSelector,
    preventContextMenuForPopup: true,
    preventSelect: true,
    menu: menu,
    select: function(event, ui) {
      var $target;
      $target = event.target;
      switch (ui.cmd) {
        case "delete":
          $target.remove();
          return;
        case "cut":
          break;
        default:
          return;
      }
      openSidebar(calMoveScrollLeft($target));
      return changeMode(Constant.Mode.OPTION);
    },
    beforeOpen: (function(_this) {
      return function(event, ui) {
        var $menu, $target, extraData;
        $target = ui.target;
        $menu = ui.menu;
        extraData = ui.extraData;
        return ui.menu.zIndex($(event.target).zIndex() + 1);
      };
    })(this)
  });
};

generateId = function() {
  var BaseString, RandomString, i, n, numb, _i;
  numb = 10;
  RandomString = '';
  BaseString = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  n = 62;
  for (i = _i = 0; 0 <= numb ? _i <= numb : _i >= numb; i = 0 <= numb ? ++_i : --_i) {
    RandomString += BaseString.charAt(Math.floor(Math.random() * n));
  }
  return RandomString;
};


/* スライダーの作成 */

settingSlider = function(id, min, max, codeEmt, previewEmt, stepValue) {
  var d, defaultValue, meterElement, valueElement;
  if (typeof stepValue === 'undefined') {
    stepValue = 0;
  }
  meterElement = $('#' + id);
  valueElement = $('.' + id + '-value');
  d = $('.' + id + '-value', codeEmt)[0];
  defaultValue = $(d).html();
  valueElement.val(defaultValue);
  valueElement.html(defaultValue);
  return meterElement.slider({
    min: min,
    max: max,
    step: stepValue,
    value: defaultValue,
    slide: function(event, ui) {
      valueElement.val(ui.value);
      valueElement.html(ui.value);
      return previewEmt.text(codeEmt.text());
    }
  });
};

settingGradientSliderByElement = function(element, values, codeEmt, previewEmt) {
  var handleElement, id;
  id = element.attr("id");
  element.slider({
    values: values,
    slide: function(event, ui) {
      var index, position;
      index = $(ui.handle).index();
      position = $('.btn-bg-color' + (index + 2) + '-position', codeEmt);
      position.html(ui.value);
      return previewEmt.text(codeEmt.text());
    }
  });
  handleElement = element.children('.ui-slider-handle');
  if (values === null) {
    return handleElement.css('display', 'none');
  } else {
    return handleElement.css('display', '');
  }
};

settingGradientSlider = function(id, values, codeEmt, previewEmt) {
  var meterElement;
  meterElement = $('#' + id);
  return settingGradientSliderByElement(meterElement, values, codeEmt, previewEmt);
};

settingGradientDegSlider = function(id, min, max, codeEmt, previewEmt) {
  var d, defaultValue, meterElement, valueElement, webkitDeg, webkitValueElement;
  meterElement = $('#' + id);
  valueElement = $('.' + id + '-value');
  webkitValueElement = $('.' + id + '-value-webkit');
  d = $('.' + id + '-value', codeEmt)[0];
  defaultValue = $(d).html();
  webkitDeg = {
    0: 'left top, left bottom',
    45: 'right top, left bottom',
    90: 'right top, left top',
    135: 'right bottom, left top',
    180: 'left bottom, left top',
    225: 'left bottom, right top',
    270: 'left top, right top',
    315: 'left top, right bottom'
  };
  valueElement.val(defaultValue);
  valueElement.html(defaultValue);
  webkitValueElement.html(webkitDeg[defaultValue]);
  return meterElement.slider({
    min: min,
    max: max,
    step: 45,
    value: defaultValue,
    slide: function(event, ui) {
      valueElement.val(ui.value);
      valueElement.html(ui.value);
      webkitValueElement.html(webkitDeg[ui.value]);
      return previewEmt.text(codeEmt.text());
    }
  });
};


/* スライダーの作成 ここまで */


/* グラデーション */

changeGradientShow = function(element, codeEmt, previewEmt) {
  var meterElement, targetElement, value, values;
  targetElement = element.currentTarget;
  value = parseInt(targetElement.value);
  if (value >= 2 && value <= 5) {
    meterElement = $(targetElement).siblings('.ui-slider:first');
    values = null;
    if (value === 3) {
      values = [50];
    } else if (value === 4) {
      values = [30, 70];
    } else if (value === 5) {
      values = [25, 50, 75];
    }
    meterElement.slider("destroy");
    settingGradientSliderByElement(meterElement, values, codeEmt, previewEmt);
    return switchGradientColorSelectorVisible(value);
  }
};

switchGradientColorSelectorVisible = function(gradientStepValue) {
  var element, i, _i, _results;
  _results = [];
  for (i = _i = 2; _i <= 4; i = ++_i) {
    element = $('#btn-bg-color' + i);
    if (i > gradientStepValue - 1) {
      _results.push(element.css('display', 'none'));
    } else {
      _results.push(element.css('display', ''));
    }
  }
  return _results;
};


/* グラデーション ここまで */

initHeaderMenu = function() {
  var itemsMenuEmt, itemsSelectMenuEmt;
  itemsMenuEmt = $('#header_items_file_menu .dropdown-menu > li');
  $('.menu-open', itemsMenuEmt).on('click', function() {
    return loadFromServer();
  });
  $('.menu-save', itemsMenuEmt).on('click', function() {
    return saveToServer();
  });
  itemsSelectMenuEmt = $('#header_items_select_menu .dropdown-menu > li');
  return $('.menu-item', itemsSelectMenuEmt).on('click', function() {
    var itemType;
    itemType = parseInt($(this).attr('id').replace('menu-item-', ''));
    itemsSelectMenuEmt.removeClass('active');
    $(this).parent('li').addClass('active');
    window.selectItemMenu = itemType;
    changeMode(Constant.Mode.DRAW);
    return loadItemJs(itemType);
  });
};

loadItemJs = function(itemType, callback) {
  var funcName, itemName;
  if (callback == null) {
    callback = null;
  }
  itemName = itemNameList[itemType];
  funcName = itemName + "Init";
  if (window.itemFuncList[funcName] != null) {
    window.itemFuncList[funcName]();
    if (callback != null) {
      callback();
    }
    return;
  }
  return $.ajax({
    url: "/item_js/index",
    type: "POST",
    dataType: "html",
    data: {
      itemName: itemName
    },
    success: function(data) {
      var firstScript, s, t;
      s = document.createElement('script');
      s.type = 'text/javascript';
      s.src = data;
      firstScript = document.getElementsByTagName('script')[0];
      firstScript.parentNode.insertBefore(s, firstScript);
      return t = setInterval(function() {
        if (window.itemFuncList[funcName] != null) {
          clearInterval(t);
          window.itemFuncList[funcName]();
          if (callback != null) {
            return callback();
          }
        }
      }, '500');
    },
    error: function(data) {}
  });
};

settingColorPicker = function(element, defaultColor, onChange) {
  return $(element).ColorPicker({
    color: defaultColor,
    onShow: function(a) {
      $(a).show();
      return false;
    },
    onHide: function(a) {
      $(a).hide();
      return false;
    },
    onChange: onChange
  });
};

initColorPickerValue = function() {
  return $('.colorPicker', sidebarWrapper).each(function() {
    var color, id, inputEmt;
    id = $(this).attr('id');
    color = $('.' + id, cssCode).html();
    $(this).css('backgroundColor', '#' + color);
    inputEmt = sidebarWrapper.find('#' + id + '-input');
    return inputEmt.attr('value', color);
  });
};

changeMode = function(mode) {
  if (mode === Constant.Mode.DRAW) {
    $(window.drawingCanvas).css('z-index', Constant.ZINDEX_MAX);
  } else if (mode === Constant.Mode.EDIT) {
    $(window.drawingCanvas).css('z-index', 0);
  } else if (mode === Constant.Mode.OPTION) {
    $(window.drawingCanvas).css('z-index', Constant.ZINDEX_MAX);
  }
  return window.mode = mode;
};

clearAllItemStyle = function() {
  return itemObjectList.forEach(function(obj) {
    obj.clearAllEventStyle();
    return $('.editSelected').remove();
  });
};

openSidebar = function(scrollLeft) {
  if (scrollLeft == null) {
    scrollLeft = null;
  }
  $('#main').switchClass('col-md-12', 'col-md-9', 500, 'swing', function() {
    return $('#sidebar').fadeIn('1000');
  });
  if (scrollLeft !== null) {
    return mainScroll.animate({
      scrollLeft: scrollLeft
    }, 500);
  }
};

closeSidebar = function() {
  return $('#sidebar').fadeOut('1000', function() {
    mainScroll.animate({
      scrollLeft: 0
    }, 500);
    return $('#main').switchClass('col-md-9', 'col-md-12', 500, 'swing');
  });
};

showWarn = function(message) {
  var bottom, css, errorFooter, exist_mes, isBeforeWarnDisplay, isErrorDisplay, mes, warnDisplay, warnFooter;
  warnFooter = $('.warn-message');
  errorFooter = $('.error-message');
  warnDisplay = $('.footer-message-display', warnFooter);
  isBeforeWarnDisplay = warnDisplay.val() === "1";
  isErrorDisplay = $('.footer-message-display', errorFooter).val() === "1";
  mes = $('> div > p', warnFooter);
  if (message === void 0) {
    return;
  }
  warnDisplay.val("1");
  exist_mes = mes.html();
  if (exist_mes === null || exist_mes === "") {
    mes.html(message);
  } else {
    mes.html(exist_mes + '<br/>' + message);
  }
  if (messageTimer !== null) {
    clearTimeout(messageTimer);
  }
  if (isBeforeWarnDisplay) {
    css = {};
  } else {
    if (isErrorDisplay) {
      bottom = parseInt(errorFooter.css('bottom'), 10) + errorFooter.height() + 10;
      css = {
        bottom: bottom + 'px'
      };
    } else {
      css = {
        bottom: '20px'
      };
    }
  }
  return warnFooter.animate(css, 'fast', function(e) {
    return window.messageTimer = setTimeout(function(e) {
      var footer;
      footer = $('.footer-message');
      $('.footer-message-display', footer).val("0");
      return footer.stop().animate({
        bottom: '-30px'
      }, 'fast', function(e) {
        window.messageTimer = null;
        return $('> div > p', $(this)).html('');
      });
    }, 3000);
  });
};

showError = function(message) {
  var css, errorDisplay, errorFooter, exist_mes, isBeforeErrorDisplay, isWarnDisplay, mes, warnFooter;
  warnFooter = $('.warn-message');
  errorFooter = $('.error-message');
  errorDisplay = $('.footer-message-display', errorFooter);
  isBeforeErrorDisplay = errorDisplay.val() === "1";
  isWarnDisplay = $('.footer-message-display', warnFooter).val() === "1";
  mes = $('> div > p', errorFooter);
  if (message === void 0) {
    return;
  }
  errorDisplay.val("1");
  exist_mes = mes.html();
  if (exist_mes === null || exist_mes === "") {
    mes.html(message);
  } else {
    mes.html(exist_mes + '<br/>' + message);
  }
  if (messageTimer !== null) {
    clearTimeout(messageTimer);
  }
  if (isBeforeErrorDisplay) {
    css = {};
  } else {
    css = {
      bottom: '20px'
    };
  }
  return errorFooter.animate(css, 'fast', function(e) {
    var bottom;
    if (isWarnDisplay) {
      bottom = parseInt(errorFooter.css('bottom'), 10) + errorFooter.height() + 10;
      css = {
        bottom: bottom + 'px'
      };
      warnFooter.stop().animate(css, 'fast');
    }
    return window.messageTimer = setTimeout(function(e) {
      var footer;
      footer = $('.footer-message');
      $('.footer-message-display', footer).val("0");
      return footer.stop().animate({
        bottom: '-30px'
      }, 'fast', function(e) {
        window.messageTimer = null;
        return $('> div > p', $(this)).html('');
      });
    }, 3000);
  });
};

flushWarn = function(message) {
  var fw, mes;
  if (window.messageTimer !== null) {
    return;
  }
  if (window.flushMessageTimer !== null) {
    clearTimeout(flushMessageTimer);
  }
  fw = $('#flush_warn');
  mes = $('> div > p', fw);
  mes.html(message);
  fw.show();
  return window.flushMessageTimer = setTimeout(function(e) {
    return fw.hide();
  }, 100);
};

initKeyEvent = function() {
  return $(window).keydown(function(e) {
    var isMac;
    isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
    if ((isMac && e.metaKey) || (!isMac && e.ctrlKey)) {
      if (e.keyCode === Constant.keyboardKeyCode.z) {
        e.preventDefault();
        if (e.shiftKey) {
          return redo();
        } else {
          return undo();
        }
      }
    }
  });
};

undo = function() {
  var action, history, obj, past, pastOperationIndex;
  if (operationHistoryIndex <= 0) {
    flushWarn("Can't Undo");
    return;
  }
  history = popOperationHistory();
  obj = history.obj;
  pastOperationIndex = obj.popOhi();
  action = history.action;
  if (action === Constant.ItemActionType.MAKE) {
    return obj.getJQueryElement().remove();
  } else if (action === Constant.ItemActionType.MOVE) {
    obj.getJQueryElement().remove();
    past = operationHistory[pastOperationIndex];
    obj = past.obj;
    obj.setSize(past.itemSize);
    return obj.reDraw();
  }
};

redo = function() {
  var action, history, obj;
  if (operationHistory.length <= operationHistoryIndex) {
    flushWarn("Can't Redo");
    return;
  }
  history = popOperationHistoryRedo();
  obj = history.obj;
  obj.incrementOhiRegistIndex();
  action = history.action;
  if (action === Constant.ItemActionType.MAKE) {
    obj.setSize(history.itemSize);
    return obj.reDraw();
  } else if (action === Constant.ItemActionType.MOVE) {
    obj.getJQueryElement().remove();
    obj.setSize(history.itemSize);
    return obj.reDraw();
  }
};

saveToServer = function() {
  var jsonList;
  jsonList = [];
  itemObjectList.forEach(function(obj) {
    var j;
    j = {
      id: obj.getId(),
      obj: obj.generateMinimumObject()
    };
    return jsonList.push(j);
  });
  return $.ajax({
    url: "/item_state/save_itemstate",
    type: "POST",
    data: {
      user_id: 0,
      contents: JSON.stringify(jsonList)
    },
    dataType: "json",
    success: function(data) {
      return console.log(data.message);
    },
    error: function(data) {
      return console.log(data.message);
    }
  });
};

loadFromServer = function() {
  return $.ajax({
    url: "/item_state/load_itemstate",
    type: "POST",
    data: {
      user_id: 0
    },
    dataType: "json",
    success: function(data) {
      var contents, item, itemState, j, obj, _i, _len, _results;
      clearWorkTable();
      itemState = JSON.parse(data.item_state);
      contents = JSON.parse(itemState.contents);
      _results = [];
      for (_i = 0, _len = contents.length; _i < _len; _i++) {
        j = contents[_i];
        obj = j.obj;
        item = null;
        _results.push(loadItemJs(obj.itemType, function() {
          if (obj.itemType === Constant.ItemType.BUTTON) {
            return item = new ButtonItem();
          } else if (obj.itemType === Constant.ItemType.ARROW) {
            item = new ArrowItem();
            return item.loadByMinimumObject(obj);
          }
        }));
      }
      return _results;
    },
    error: function(data) {
      return console.log(data.message);
    }
  });
};


/* 操作履歴 */

pushOperationHistory = function(obj) {
  operationHistory[operationHistoryIndex] = obj;
  return operationHistoryIndex += 1;
};

popOperationHistory = function() {
  operationHistoryIndex -= 1;
  return operationHistory[operationHistoryIndex];
};

popOperationHistoryRedo = function() {
  var obj;
  obj = operationHistory[operationHistoryIndex];
  operationHistoryIndex += 1;
  return obj;
};


/* WebStorage保存 */

drawItemFromStorage = function() {};

addStorage = function(id, obj) {
  return lstorage.setItem(id, obj);
};

getStorageByKey = function(key) {
  return lstorage.getItem(key);
};

clearWorkTable = function() {
  return itemObjectList.forEach(function(obj) {
    return obj.getJQueryElement().remove();
  });
};

run = function() {
  return $.ajax({
    url: "/test_move/hello",
    type: "POST",
    dataType: "html",
    success: function(data) {
      var firstScript, s, t;
      s = document.createElement('script');
      s.type = 'text/javascript';
      s.src = data;
      s.id = 'test';
      firstScript = document.getElementsByTagName('script')[0];
      firstScript.parentNode.insertBefore(s, firstScript);
      return t = setInterval(function() {
        if (typeof helloFunc === 'function') {
          clearInterval(t);
          return helloFunc();
        }
      }, '500');
    },
    error: function(data) {}
  });
};

runLookAround = function() {
  var objList;
  objList = [];
  itemObjectList.forEach(function(item) {
    if (item.ITEMTYPE === 'arrow') {
      return objList.push(item.generateMinimumObject());
    }
  });
  sstorage.setItem('lookaround', JSON.stringify(objList));
  return window.open('/look_around');
};

$(function() {
  var menu;
  if (!checkBlowserEnvironment()) {
    alert('ブラウザ非対応です。');
    return;
  }
  initCommonVar();
  mainWrapper.css('width', $('#main_container').width());
  $('#canvas_container').attr('width', $('#main_container').width());
  $('#canvas_container').attr('height', $('#main_container').height());
  initColorPickerValue();
  $('.dropdown-toggle').dropdown();
  initHeaderMenu();
  initKeyEvent();
  menu = [
    {
      title: "Default",
      cmd: "default",
      uiIcon: "ui-icon-scissors"
    }
  ];
  setupContextMenu($('#main'), '#main_container', menu);
  return $('#main').on("mousedown", function() {
    return clearAllItemStyle();
  });
});

//# sourceMappingURL=work_table.js.js.map
