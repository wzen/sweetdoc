// Generated by CoffeeScript 1.9.2
var Handwrite;

Handwrite = (function() {
  function Handwrite() {}

  Handwrite.item = null;

  Handwrite.drag = false;

  Handwrite.click = false;

  Handwrite.enableMoveEvent = true;

  Handwrite.queueLoc = null;

  Handwrite.zindex = null;

  Handwrite.initHandwrite = function() {
    var MOVE_FREQUENCY, _windowToCanvas, lastX, lastY;
    this.drag = false;
    this.click = false;
    this.item = null;
    lastX = null;
    lastY = null;
    this.enableMoveEvent = true;
    this.queueLoc = null;
    this.zindex = Constant.Zindex.EVENTBOTTOM + window.scrollInside.children().length + 1;
    MOVE_FREQUENCY = 7;
    this.zoom = 1;
    _windowToCanvas = function(canvas, x, y) {
      var bbox;
      bbox = canvas.getBoundingClientRect();
      return {
        x: x - bbox.left * (canvas.width / bbox.width),
        y: y - bbox.top * (canvas.height / bbox.height)
      };
    };
    return (function(_this) {
      return function() {
        var _calcCanvasLoc, _saveLastLoc;
        _calcCanvasLoc = function(e) {
          var x, y;
          x = (e.x || e.clientX) / _this.zoom;
          y = (e.y || e.clientY) / _this.zoom;
          return _windowToCanvas(drawingCanvas, x, y);
        };
        _saveLastLoc = function(loc) {
          lastX = loc.x;
          return lastY = loc.y;
        };
        drawingCanvas.onmousedown = function(e) {
          var loc;
          if (e.which === 1) {
            _this.zoom = PageValue.getGeneralPageValue(PageValue.Key.zoom());
            loc = _calcCanvasLoc.call(_this, e);
            _saveLastLoc(loc);
            _this.click = true;
            if (mode === Constant.Mode.DRAW) {
              e.preventDefault();
              return _this.mouseDownDrawing(loc);
            }
          }
        };
        drawingCanvas.onmousemove = function(e) {
          var loc;
          if (e.which === 1) {
            loc = _calcCanvasLoc.call(_this, e);
            if (_this.click && Math.abs(loc.x - lastX) + Math.abs(loc.y - lastY) >= MOVE_FREQUENCY) {
              if (mode === Constant.Mode.DRAW) {
                e.preventDefault();
                _this.mouseMoveDrawing(loc);
              }
              return _saveLastLoc(loc);
            }
          }
        };
        return drawingCanvas.onmouseup = function(e) {
          if (e.which === 1) {
            if (_this.drag && mode === Constant.Mode.DRAW) {
              e.preventDefault();
              _this.mouseUpDrawing();
            }
          }
          _this.drag = false;
          return _this.click = false;
        };
      };
    })(this)();
  };

  Handwrite.mouseDownDrawing = function(loc) {
    WorktableCommon.reDrawAllItemsFromInstancePageValueIfChanging();
    if (typeof selectItemMenu !== "undefined" && selectItemMenu !== null) {
      this.item = new (Common.getClassFromMap(false, selectItemMenu))(loc);
      window.instanceMap[this.item.id] = this.item;
      return this.item.mouseDownDrawing();
    }
  };

  Handwrite.mouseMoveDrawing = function(loc) {
    var q;
    if (this.item != null) {
      if (this.enableMoveEvent) {
        this.enableMoveEvent = false;
        this.drag = true;
        this.item.draw(loc);
        if (this.queueLoc !== null) {
          q = this.queueLoc;
          this.queueLoc = null;
          this.item.draw(q);
        }
        return this.enableMoveEvent = true;
      } else {
        return this.queueLoc = loc;
      }
    }
  };

  Handwrite.mouseUpDrawing = function() {
    if (this.item != null) {
      return this.item.mouseUpDrawing(this.zindex, (function(_this) {
        return function() {
          return _this.zindex += 1;
        };
      })(this));
    }
  };

  return Handwrite;

})();

//# sourceMappingURL=handwrite.js.map
