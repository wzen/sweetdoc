// Generated by CoffeeScript 1.9.2
var Handwrite;

Handwrite = (function() {
  function Handwrite() {}

  Handwrite.initHandwrite = function() {
    var MOVE_FREQUENCY, _windowToCanvas, click, drag, enableMoveEvent, item, lastX, lastY, queueLoc, self, zindex;
    self = this;
    drag = false;
    click = false;
    lastX = null;
    lastY = null;
    item = null;
    enableMoveEvent = true;
    queueLoc = null;
    zindex = Constant.Zindex.EVENTBOTTOM + window.scrollInside.children().length + 1;
    MOVE_FREQUENCY = 7;
    this.zoom = 1;
    _windowToCanvas = function(canvas, x, y) {
      var bbox;
      bbox = canvas.getBoundingClientRect();
      return {
        x: x - bbox.left * (canvas.width / bbox.width),
        y: y - bbox.top * (canvas.height / bbox.height)
      };
    };
    return (function(_this) {
      return function() {
        var _calcCanvasLoc, _saveLastLoc;
        _calcCanvasLoc = function(e) {
          var x, y;
          x = (e.x || e.clientX) / this.zoom;
          y = (e.y || e.clientY) / this.zoom;
          return _windowToCanvas(drawingCanvas, x, y);
        };
        _saveLastLoc = function(loc) {
          lastX = loc.x;
          return lastY = loc.y;
        };
        drawingCanvas.onmousedown = function(e) {
          var loc;
          if (e.which === 1) {
            this.zoom = PageValue.getGeneralPageValue(PageValue.Key.zoom());
            loc = _calcCanvasLoc.call(this, e);
            _saveLastLoc(loc);
            click = true;
            if (mode === Constant.Mode.DRAW) {
              e.preventDefault();
              return self.mouseDownDrawing(loc);
            } else if (mode === Constant.Mode.OPTION) {
              Sidebar.closeSidebar();
              return WorktableCommon.putbackMode();
            }
          }
        };
        drawingCanvas.onmousemove = function(e) {
          var loc;
          if (e.which === 1) {
            loc = _calcCanvasLoc.call(this, e);
            if (click && Math.abs(loc.x - lastX) + Math.abs(loc.y - lastY) >= MOVE_FREQUENCY) {
              if (mode === Constant.Mode.DRAW) {
                e.preventDefault();
                self.mouseMoveDrawing(loc);
              }
              return _saveLastLoc(loc);
            }
          }
        };
        return drawingCanvas.onmouseup = function(e) {
          if (e.which === 1) {
            if (drag && mode === Constant.Mode.DRAW) {
              e.preventDefault();
              self.mouseUpDrawing();
            }
          }
          drag = false;
          return click = false;
        };
      };
    })(this)();
  };

  Handwrite.mouseDownDrawing = function(loc) {
    var item;
    WorktableCommon.reDrawAllInstanceItemIfChanging();
    if (typeof selectItemMenu !== "undefined" && selectItemMenu !== null) {
      item = new (Common.getClassFromMap(false, selectItemMenu))(loc);
      window.instanceMap[item.id] = item;
      item.saveDrawingSurface();
      WorktableCommon.changeMode(Constant.Mode.DRAW);
      return item.startDraw();
    }
  };

  Handwrite.mouseMoveDrawing = function(loc) {
    var drag, enableMoveEvent, q, queueLoc;
    if (typeof item !== "undefined" && item !== null) {
      if (enableMoveEvent) {
        enableMoveEvent = false;
        drag = true;
        item.draw(loc);
        if (queueLoc !== null) {
          q = queueLoc;
          queueLoc = null;
          item.draw(q);
        }
        return enableMoveEvent = true;
      } else {
        return queueLoc = loc;
      }
    }
  };

  Handwrite.mouseUpDrawing = function() {
    if (typeof item !== "undefined" && item !== null) {
      item.restoreAllDrawingSurface();
      item.endDraw(zindex);
      item.setupDragAndResizeEvents();
      WorktableCommon.changeMode(Constant.Mode.DRAW);
      item.saveObj(true);
      return zindex += 1;
    }
  };

  return Handwrite;

})();

//# sourceMappingURL=handwrite.js.map
