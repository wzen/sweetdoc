// Generated by CoffeeScript 1.9.2
var addItemInfo, addTimelineEventContents, availJs, loadItemJs;

loadItemJs = function(itemId, callback) {
  var itemInitFuncName;
  if (callback == null) {
    callback = null;
  }
  itemInitFuncName = getInitFuncName(itemId);
  if (window.itemInitFuncList[itemInitFuncName] != null) {
    window.itemInitFuncList[itemInitFuncName]();
    if (callback != null) {
      callback();
    }
    return;
  }
  return $.ajax({
    url: "/item_js/index",
    type: "POST",
    dataType: "json",
    data: {
      itemId: itemId
    },
    success: function(data) {
      var option;
      if (data.css_info != null) {
        option = {
          isWorkTable: true,
          css_temp: data.css_info
        };
      }
      availJs(itemInitFuncName, data.js_src, option, callback);
      addItemInfo(data.item_id, data.te_actions);
      return addTimelineEventContents(data.item_id, data.te_actions, data.te_values);
    },
    error: function(data) {}
  });
};

availJs = function(initName, jsSrc, option, callback) {
  var firstScript, s, t;
  if (option == null) {
    option = {};
  }
  if (callback == null) {
    callback = null;
  }
  s = document.createElement('script');
  s.type = 'text/javascript';
  s.src = jsSrc;
  firstScript = document.getElementsByTagName('script')[0];
  firstScript.parentNode.insertBefore(s, firstScript);
  return t = setInterval(function() {
    if (window.itemInitFuncList[initName] != null) {
      clearInterval(t);
      window.itemInitFuncList[initName](option);
      if (callback != null) {
        return callback();
      }
    }
  }, '500');
};

addItemInfo = function(item_id, te_actions) {
  if ((te_actions != null) && te_actions.length > 0) {
    return te_actions.forEach(function(a) {
      if ((a.is_default != null) && a.is_default) {
        setPageValue(Constant.PageValueKey.ITEM_DEFAULT_METHODNAME.replace('@item_id', item_id), a.method_name);
        setPageValue(Constant.PageValueKey.ITEM_DEFAULT_ACTIONTYPE.replace('@item_id', item_id), a.action_event_type_id);
        return setPageValue(Constant.PageValueKey.ITEM_DEFAULT_ANIMATIONTYPE.replace('@item_id', item_id), a.action_animation_type_id);
      }
    });
  }
};

addTimelineEventContents = function(item_id, te_actions, te_values) {
  var actionParent, action_forms, className, handler_forms;
  if ((te_actions != null) && te_actions.length > 0) {
    className = TimelineConfig.ITEM_ACTION_CLASS.replace('@itemid', item_id);
    handler_forms = $('#timeline-config .handler_div .configBox');
    action_forms = $('#timeline-config .action_forms');
    if (action_forms.find("." + className).length === 0) {
      actionParent = $("<div class='" + className + "' style='display:none'></div>");
      te_actions.forEach(function(a) {
        var actionType, handlerClone, handlerParent, methodClone, span, valueClassName;
        actionType = getActionTypeClassNameByActionType(a.action_event_type_id);
        methodClone = $('#timeline-config .method_temp').children(':first').clone(true);
        span = methodClone.find('label:first').children('span:first');
        span.attr('class', actionType);
        span.html(a.options['name']);
        methodClone.find('input.action_type:first').val(a.action_event_type_id);
        methodClone.find('input.method_name:first').val(a.method_name);
        methodClone.find('input.animation_type:first').val(a.action_animation_type_id);
        valueClassName = TimelineConfig.ITEM_VALUES_CLASS.replace('@itemid', item_id).replace('@methodname', a.method_name);
        methodClone.find('input:radio').attr('name', className);
        methodClone.find('input.value_class_name:first').val(valueClassName);
        actionParent.append(methodClone);
        handlerClone = null;
        if (a.action_event_type_id === Constant.ActionEventHandleType.SCROLL) {
          handlerClone = $('#timeline-config .handler_scroll_temp').children().clone(true);
        } else if (a.action_event_type_id === Constant.ActionEventHandleType.CLICK) {
          handlerClone = $('#timeline-config .handler_click_temp').children().clone(true);
        }
        handlerParent = $("<div class='" + valueClassName + "' style='display:none'></div>");
        handlerParent.append(handlerClone);
        return handlerParent.appendTo(handler_forms);
      });
      actionParent.appendTo(action_forms);
    }
  }
  if (te_values != null) {
    return $(te_values).appendTo($('#timeline-config .value_forms'));
  }
};

//# sourceMappingURL=load_js.js.map
