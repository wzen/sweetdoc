// Generated by CoffeeScript 1.9.2
var Timeline;

Timeline = (function() {
  function Timeline() {}

  Timeline.createTimelineEvent = function(teNum) {
    var distIdPrefix, emts, exist, newEmt, pEmt;
    emts = $('#timeline_events .timeline_event .te_num');
    exist = false;
    emts.each(function(e) {
      if (parseInt($(this).val()) === teNum) {
        return exist = true;
      }
    });
    if (exist) {
      return;
    }
    pEmt = $('#timeline_events');
    newEmt = $('.timeline_event_temp', pEmt).children(':first').clone(true);
    newEmt.find('.te_num').val(teNum);
    distIdPrefix = 'd' + PageValue.getPageNum() + '';
    newEmt.find('.dist_id').val(distIdPrefix + Common.generateId());
    return pEmt.append(newEmt);
  };

  Timeline.setupTimelineEventConfig = function(teNum) {
    var _clickTimelineEvent, _createEvent, _deleteTimeline, _initEventConfig, _setupTimelineEvent, te;
    if (teNum == null) {
      teNum = null;
    }
    te = null;
    _setupTimelineEvent = function() {
      var ePageValues, emt, i, idx, j, l, len, menu, pageValue, ref, ref1, timelineEvents;
      ePageValues = PageValue.getEventPageValueSortedListByNum();
      emt = null;
      if (ePageValues.length > 0) {
        if (teNum) {
          idx = teNum - 1;
          _createEvent.call(this, ePageValues[idx], idx);
        } else {
          for (idx = j = 0, len = ePageValues.length; j < len; idx = ++j) {
            pageValue = ePageValues[idx];
            _createEvent.call(this, pageValue, idx);
          }
          timelineEvents = $('#timeline_events').children('.timeline_event');
          if (ePageValues.length < timelineEvents.length - 1) {
            for (i = l = ref = ePageValues.length, ref1 = timelineEvents.length - 1; ref <= ref1 ? l <= ref1 : l >= ref1; i = ref <= ref1 ? ++l : --l) {
              emt = timelineEvents.get(i);
              emt.remove();
            }
          }
        }
      } else {
        this.createTimelineEvent(1);
      }
      this.createTimelineEvent(ePageValues.length + 1);
      timelineEvents = $('#timeline_events').children('.timeline_event');
      timelineEvents.off('click').on('click', (function(_this) {
        return function(e) {
          return _clickTimelineEvent.call(_this, $(e.target));
        };
      })(this));
      $('#timeline_events').sortable({
        revert: true,
        axis: 'x',
        containment: $('#timeline_events_container'),
        items: '.sortable:not(.blank)',
        start: function(event, ui) {
          $('#timeline_events .sync_line').remove();
          return Sidebar.closeSidebar();
        },
        update: function(event, ui) {
          var afterNum, beforeNum, target, tes;
          target = $(ui.item);
          beforeNum = parseInt(target.find('.te_num:first').val());
          afterNum = null;
          tes = $('#timeline_events').children('.timeline_event');
          tes.each(function(idx) {
            if (parseInt($(this).find('.te_num:first').val()) === beforeNum) {
              return afterNum = idx + 1;
            }
          });
          if (afterNum != null) {
            return Timeline.changeSortTimeline(beforeNum, afterNum);
          }
        }
      });
      menu = [
        {
          title: I18n.t('context_menu.preview'),
          cmd: "preview",
          uiIcon: "ui-icon-scissors"
        }
      ];
      menu.push({
        title: I18n.t('context_menu.delete'),
        cmd: "delete",
        uiIcon: "ui-icon-scissors"
      });
      return timelineEvents.filter(function(idx) {
        return !$(this).hasClass('temp') && !$(this).hasClass('blank');
      }).contextmenu({
        preventContextMenuForPopup: true,
        preventSelect: true,
        menu: menu,
        select: (function(_this) {
          return function(event, ui) {
            var target, te_num;
            target = event.target;
            switch (ui.cmd) {
              case "preview":
                te_num = $(target).find('input.te_num').val();
                return WorktableCommon.runPreview(te_num);
              case "delete":
                if (window.confirm(I18n.t('message.dialog.delete_event'))) {
                  return _deleteTimeline.call(_this, target);
                }
                break;
            }
          };
        })(this)
      });
    };
    _createEvent = function(pageValue, idx) {
      var actionType, emt, timelineEvents;
      timelineEvents = $('#timeline_events').children('.timeline_event');
      teNum = idx + 1;
      emt = timelineEvents.eq(idx);
      if (emt.length === 0) {
        this.createTimelineEvent(teNum);
        timelineEvents = $('#timeline_events').children('.timeline_event');
        emt = timelineEvents.eq(idx);
      }
      $('.te_num', emt).val(teNum);
      $('.dist_id', emt).val(pageValue[EventPageValueBase.PageValueKey.DIST_ID]);
      actionType = pageValue[EventPageValueBase.PageValueKey.ACTIONTYPE];
      Timeline.changeTimelineColor(teNum, actionType);
      if (pageValue[EventPageValueBase.PageValueKey.IS_SYNC]) {
        return emt.before("<div class='sync_line " + (Common.getActionTypeClassNameByActionType(actionType)) + "'></div>");
      } else {
        return emt.prev('.sync_line').remove();
      }
    };
    _clickTimelineEvent = function(e) {
      if ($(e).is('.ui-sortable-helper')) {
        return;
      }
      WorktableCommon.clearSelectedBorder();
      _initEventConfig.call(this, e);
      return WorktableCommon.setSelectedBorder($(e), 'timeline');
    };
    _deleteTimeline = function(target) {
      var eNum;
      eNum = parseInt($(target).find('.te_num:first').val());
      PageValue.removeEventPageValue(eNum);
      LocalStorage.saveAllPageValues();
      return Timeline.refreshAllTimeline();
    };
    _initEventConfig = function(e) {
      var distId, eId;
      Sidebar.switchSidebarConfig(Sidebar.Type.EVENT);
      teNum = $(e).find('input.te_num').val();
      distId = $(e).find('input.dist_id').val();
      Sidebar.initEventConfig(distId, teNum);
      $('#event-config .event').hide();
      eId = EventConfig.ITEM_ROOT_ID.replace('@distId', distId);
      $("#" + eId).show();
      return Sidebar.openConfigSidebar();
    };
    return _setupTimelineEvent.call(this);
  };

  Timeline.changeTimelineColor = function(teNum, actionType) {
    var k, ref, teEmt, v;
    if (actionType == null) {
      actionType = null;
    }
    teEmt = null;
    $('#timeline_events').children('.timeline_event').each(function(e) {
      if (parseInt($(this).find('input.te_num:first').val()) === parseInt(teNum)) {
        return teEmt = this;
      }
    });
    ref = Constant.TimelineActionTypeClassName;
    for (k in ref) {
      v = ref[k];
      $(teEmt).removeClass(v);
    }
    if (actionType != null) {
      return $(teEmt).addClass(Common.getActionTypeClassNameByActionType(actionType));
    } else {
      return $(teEmt).addClass(Constant.TimelineActionTypeClassName.BLANK);
    }
  };

  Timeline.refreshAllTimeline = function() {
    Indicator.showIndicator(Indicator.Type.TIMELINE);
    return setTimeout((function(_this) {
      return function() {
        var pEmt;
        pEmt = $('#timeline_events');
        pEmt.children().each(function(e) {
          var emt;
          emt = $(this);
          if (emt.hasClass('timeline_event_temp') === false) {
            return emt.remove();
          }
        });
        _this.setupTimelineEventConfig();
        return Indicator.hideIndicator(Indicator.Type.TIMELINE);
      };
    })(this), 0);
  };

  Timeline.updateEvent = function(teNum) {
    return this.setupTimelineEventConfig(teNum);
  };

  Timeline.changeSortTimeline = function(beforeNum, afterNum) {
    if (beforeNum !== afterNum) {
      PageValue.sortEventPageValue(beforeNum, afterNum);
    }
    return this.refreshAllTimeline();
  };

  Timeline.disabledOperation = function(flg) {
    if (flg) {
      if ($('#timeline_container .cover_touch_overlay').length === 0) {
        $('#timeline_container').append("<div class='cover_touch_overlay'></div>");
        return $('.cover_touch_overlay').off('click').on('click', function(e) {
          e.preventDefault();
        });
      }
    } else {
      return $('#timeline_container .cover_touch_overlay').remove();
    }
  };

  return Timeline;

})();

//# sourceMappingURL=timeline.js.map
