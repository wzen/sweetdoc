// Generated by CoffeeScript 1.9.2
var EventDragPointingDraw,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventDragPointingDraw = (function() {
  var instance;

  instance = null;

  function EventDragPointingDraw(cood) {
    if (cood == null) {
      cood = null;
    }
    return this.constructor.getInstance(cood);
  }

  EventDragPointingDraw.PrivateClass = (function(superClass) {
    var _callbackParam;

    extend(PrivateClass, superClass);

    function PrivateClass() {
      return PrivateClass.__super__.constructor.apply(this, arguments);
    }

    PrivateClass.NAME_PREFIX = "EDPointingDraw";

    PrivateClass.CLASS_DIST_TOKEN = 'EDPointingDraw';

    PrivateClass.include(itemBaseWorktableExtend);

    PrivateClass.prototype.setApplyCallback = function(callback) {
      return this.applyCallback = callback;
    };

    PrivateClass.prototype.setEndDrawCallback = function(callback) {
      return this.endDrawCallback = callback;
    };

    PrivateClass.prototype.clearDraw = function() {
      this.removeItemElement();
      this.drawPaths = [];
      return this.drawPathIndex = 0;
    };

    PrivateClass.prototype.applyDraw = function() {
      if (this.applyCallback != null) {
        return this.applyCallback(_callbackParam.call(this));
      }
    };

    PrivateClass.prototype.initData = function(multiDraw1) {
      this.multiDraw = multiDraw1;
      this.drawPaths = [];
      return this.drawPathIndex = 0;
    };

    PrivateClass.prototype.mouseDownDrawing = function(callback) {
      if (callback == null) {
        callback = null;
      }
      this.saveDrawingSurface();
      this.removeItemElement();
      if (callback != null) {
        return callback();
      }
    };

    PrivateClass.prototype.mouseUpDrawing = function(zindex, callback) {
      if (callback == null) {
        callback = null;
      }
      this.restoreAllDrawingSurface();
      return this.endDraw(callback);
    };

    PrivateClass.prototype.startCood = function(cood) {
      if (cood != null) {
        this._moveLoc = {
          x: cood.x,
          y: cood.y
        };
      }
      if (this.multiDraw && this.drawPaths.length > 0) {
        this.drawPathIndex += 1;
      } else {
        this.drawPaths = [];
        this.drawPathIndex = 0;
      }
      this.drawPaths[this.drawPathIndex] = [];
      return this.itemSize = null;
    };

    PrivateClass.prototype.draw = function(cood) {
      var d, i, idx, j, len, len1, p, ref, results;
      this.drawPaths[this.drawPathIndex].push(cood);
      ref = this.drawPaths;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        d = ref[i];
        drawingContext.beginPath();
        for (idx = j = 0, len1 = d.length; j < len1; idx = ++j) {
          p = d[idx];
          if (idx === 0) {
            drawingContext.moveTo(p.x, p.y);
          } else {
            drawingContext.lineTo(p.x, p.y);
          }
        }
        results.push(drawingContext.stroke());
      }
      return results;
    };

    PrivateClass.prototype.endDraw = function(callback) {
      if (callback == null) {
        callback = null;
      }
      this.zindex = Common.plusPagingZindex(Constant.Zindex.EVENTFLOAT) + 1;
      return this.refresh(true, (function(_this) {
        return function() {
          _this.getJQueryElement().addClass('drag_pointing');
          _this.setupDragAndResizeEvent();
          if (_this.endDrawCallback != null) {
            _this.endDrawCallback(_callbackParam.call(_this));
          }
          FloatView.showPointingController(_this);
          if (callback != null) {
            return callback();
          }
        };
      })(this));
    };

    PrivateClass.prototype.saveObj = function(newCreated) {
      if (newCreated == null) {
        newCreated = false;
      }
    };

    PrivateClass.prototype.getItemPropFromPageValue = function(prop, isCache) {
      if (isCache == null) {
        isCache = false;
      }
    };

    PrivateClass.prototype.setItemPropToPageValue = function(prop, value, isCache) {
      if (isCache == null) {
        isCache = false;
      }
    };

    PrivateClass.prototype.applyDefaultDesign = function() {};

    PrivateClass.prototype.makeCss = function(forceUpdate) {
      if (forceUpdate == null) {
        forceUpdate = false;
      }
    };

    _callbackParam = function() {
      var m;
      m = this.drawPaths;
      if (!this.multiDraw) {
        m = this.drawPaths[0];
      }
      return m;
    };

    return PrivateClass;

  })(CssItemBase);

  EventDragPointingDraw.getInstance = function(cood) {
    if (cood == null) {
      cood = null;
    }
    if (instance == null) {
      instance = new this.PrivateClass();
    }
    instance.startCood(cood);
    return instance;
  };

  EventDragPointingDraw.run = function(opt) {
    var applyDrawCallback, endDrawCallback, multiDraw, pointing;
    endDrawCallback = opt.endDrawCallback;
    applyDrawCallback = opt.applyDrawCallback;
    multiDraw = opt.multiDraw;
    if (multiDraw == null) {
      multiDraw = false;
    }
    pointing = new this();
    pointing.setApplyCallback((function(_this) {
      return function(pointingPaths) {
        return applyDrawCallback(pointingPaths);
      };
    })(this));
    pointing.setEndDrawCallback((function(_this) {
      return function(pointingPaths) {
        return endDrawCallback(pointingPaths);
      };
    })(this));
    pointing.initData();
    PointingHandwrite.initHandwrite(this);
    WorktableCommon.changeEventPointingMode(Constant.EventInputPointingMode.DRAW);
    return FloatView.showWithCloseButton('Drag position', FloatView.Type.POINTING_DRAG, (function(_this) {
      return function() {
        pointing = new _this();
        pointing.getJQueryElement().remove();
        Handwrite.initHandwrite();
        return WorktableCommon.changeEventPointingMode(Constant.EventInputPointingMode.NOT_SELECT);
      };
    })(this));
  };

  return EventDragPointingDraw;

})();

$.fn.eventDragPointingDraw = function(opt, eventType) {
  if (eventType == null) {
    eventType = 'click';
  }
  if (eventType === 'click') {
    return $(this).off('click.event_pointing_draw').on('click.event_pointing_draw', (function(_this) {
      return function(e) {
        return EventDragPointingDraw.run(opt);
      };
    })(this));
  } else if (eventType === 'change') {
    return $(this).off('change.event_pointing_draw').on('change.event_pointing_draw', (function(_this) {
      return function(e) {
        if ($(e.target).val === opt.targetValue) {
          return EventDragPointingDraw.run(opt);
        }
      };
    })(this));
  }
};

//# sourceMappingURL=event_drag_pointing_draw.js.map
