// Generated by CoffeeScript 1.9.2
var Paging;

Paging = (function() {
  function Paging() {}

  Paging.initPaging = function() {
    return this.createPageSelectMenu();
  };

  Paging.createPageSelectMenu = function() {
    var active, divider, forkCount, forkNum, i, j, k, l, menu, navForkClass, navForkName, navPageClass, navPageName, newForkMenu, newPageMenu, nowMenuName, pageCount, pageMenu, ref, ref1, root, selectRoot, self, subActive, subMenu;
    self = this;
    pageCount = PageValue.getPageCount();
    root = $("#" + Constant.Paging.NAV_ROOT_ID);
    selectRoot = $("." + Constant.Paging.NAV_SELECT_ROOT_CLASS, root);
    menu = "<li><a class='" + Constant.Paging.NAV_MENU_PAGE_CLASS + " menu-item'>" + Constant.Paging.NAV_MENU_PAGE_NAME + "</a></li>";
    divider = "<li class='divider'></li>";
    newPageMenu = "<li><a class='" + Constant.Paging.NAV_MENU_ADDPAGE_CLASS + " menu-item'>Add page</a></li>";
    newForkMenu = "<li><a class='" + Constant.Paging.NAV_MENU_ADDFORK_CLASS + " menu-item'>Add fork</a></li>";
    pageMenu = '';
    for (i = k = 1, ref = pageCount; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
      navPageClass = Constant.Paging.NAV_MENU_PAGE_CLASS.replace('@pagenum', i);
      navPageName = Constant.Paging.NAV_MENU_PAGE_NAME.replace('@pagenum', i);
      forkCount = PageValue.getForkCount(i);
      forkNum = PageValue.getForkNum(i);
      active = forkNum === PageValue.Key.EF_MASTER_FORKNUM ? 'class="active"' : '';
      subMenu = "<li " + active + "><a class='" + navPageClass + " menu-item '>Master</a></li>";
      if (forkCount > 0) {
        for (j = l = 1, ref1 = forkCount; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {
          navForkClass = Constant.Paging.NAV_MENU_FORK_CLASS.replace('@forknum', j);
          navForkName = Constant.Paging.NAV_MENU_FORK_NAME.replace('@forknum', j);
          subActive = j === forkNum ? 'class="active"' : '';
          subMenu += "<li " + subActive + "><a class='" + navPageClass + " " + navForkClass + " menu-item '>" + navForkName + "</a></li>";
        }
      }
      subMenu += divider + newForkMenu;
      pageMenu += "<li class=\"dropdown-submenu\">\n    <a>" + navPageName + "</a>\n    <ul class=\"dropdown-menu\">\n        " + subMenu + "\n    </ul>\n</li>";
    }
    pageMenu += divider + newPageMenu;
    selectRoot.children().remove();
    $(pageMenu).appendTo(selectRoot);
    nowMenuName = Constant.Paging.NAV_MENU_PAGE_NAME.replace('@pagenum', PageValue.getPageNum());
    if (PageValue.getForkNum() > 0) {
      nowMenuName += " - (" + (Constant.Paging.NAV_MENU_FORK_NAME.replace('@forknum', PageValue.getForkNum())) + ")";
    }
    $("." + Constant.Paging.NAV_SELECTED_CLASS, root).html(nowMenuName);
    selectRoot.find(".menu-item").off('click');
    selectRoot.find(".menu-item").on('click', function() {
      var classList, forkPrefix, pageNum, pagePrefix;
      pagePrefix = Constant.Paging.NAV_MENU_PAGE_CLASS.replace('@pagenum', '');
      forkPrefix = Constant.Paging.NAV_MENU_FORK_CLASS.replace('@forknum', '');
      pageNum = null;
      forkNum = PageValue.Key.EF_MASTER_FORKNUM;
      classList = this.classList;
      classList.forEach(function(c) {
        if (c.indexOf(pagePrefix) >= 0) {
          return pageNum = parseInt(c.replace(pagePrefix, ''));
        } else if (c.indexOf(forkPrefix) >= 0) {
          return forkNum = parseInt(c.replace(forkPrefix, ''));
        }
      });
      if (pageNum != null) {
        return self.selectPage(pageNum, forkNum);
      }
    });
    selectRoot.find("." + Constant.Paging.NAV_MENU_ADDPAGE_CLASS, root).off('click');
    selectRoot.find("." + Constant.Paging.NAV_MENU_ADDPAGE_CLASS, root).on('click', function() {
      return self.createNewPage();
    });
    selectRoot.find("." + Constant.Paging.NAV_MENU_ADDFORK_CLASS, root).off('click');
    return selectRoot.find("." + Constant.Paging.NAV_MENU_ADDFORK_CLASS, root).on('click', function() {
      return self.createNewFork();
    });
  };

  Paging.switchSectionDisplay = function(pageNum) {
    var className, section;
    $("#" + Constant.Paging.ROOT_ID).find(".section").hide();
    className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', pageNum);
    section = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
    return section.show();
  };

  Paging.createNewPage = function() {
    var self;
    self = this;
    return WorktableCommon.stopAllEventPreview(function() {
      var beforePageNum, created;
      beforePageNum = PageValue.getPageNum();
      if (window.debug) {
        console.log('[createNewPage] beforePageNum:' + beforePageNum);
      }
      Sidebar.closeSidebar();
      LocalStorage.clearWorktableWithoutSetting();
      EventConfig.removeAllConfig();
      created = Common.createdMainContainerIfNeeded(PageValue.getPageCount() + 1);
      PageValue.setPageNum(PageValue.getPageCount() + 1);
      WorktableCommon.initMainContainer();
      PageValue.adjustInstanceAndEventOnPage();
      return WorktableCommon.createAllInstanceAndDrawFromInstancePageValue(function() {
        var className, newSection, oldSection;
        WorktableCommon.createCommonEventInstancesIfNeeded();
        WorktableCommon.changeMode(window.mode);
        Timeline.refreshAllTimeline();
        className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', PageValue.getPageNum());
        newSection = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
        newSection.show();
        className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', beforePageNum);
        oldSection = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
        oldSection.hide();
        Common.removeAllItem(beforePageNum);
        Timeline.refreshAllTimeline();
        PageValue.setEventPageValue(PageValue.Key.eventCount(), 0);
        PageValue.updatePageCount();
        if (created) {
          OperationHistory.add(true);
        }
        LocalStorage.saveAllPageValues();
        return self.createPageSelectMenu();
      });
    });
  };

  Paging.selectPage = function(selectedPageNum, selectedForkNum) {
    var self;
    if (selectedForkNum == null) {
      selectedForkNum = PageValue.Key.EF_MASTER_FORKNUM;
    }
    self = this;
    if (selectedPageNum === PageValue.getPageNum()) {
      if (selectedForkNum === PageValue.getForkNum()) {
        return;
      } else {
        this.selectFork(selectedForkNum, function() {
          Timeline.refreshAllTimeline();
          LocalStorage.saveAllPageValues();
          return self.createPageSelectMenu();
        });
        return;
      }
    }
    return WorktableCommon.stopAllEventPreview(function() {
      var beforePageNum, created, pageCount, pageFlip;
      if (window.debug) {
        console.log('[selectPage] selectedNum:' + selectedPageNum);
      }
      if (selectedPageNum <= 0) {
        return;
      }
      pageCount = PageValue.getPageCount();
      if (selectedPageNum < 0 || selectedPageNum > pageCount) {
        return;
      }
      beforePageNum = PageValue.getPageNum();
      if (window.debug) {
        console.log('[selectPage] beforePageNum:' + beforePageNum);
      }
      Sidebar.closeSidebar();
      LocalStorage.clearWorktableWithoutSetting();
      EventConfig.removeAllConfig();
      created = Common.createdMainContainerIfNeeded(selectedPageNum, beforePageNum > selectedPageNum);
      pageFlip = new PageFlip(beforePageNum, selectedPageNum);
      PageValue.setPageNum(selectedPageNum);
      WorktableCommon.initMainContainer();
      PageValue.adjustInstanceAndEventOnPage();
      return WorktableCommon.createAllInstanceAndDrawFromInstancePageValue(function() {
        return Paging.selectFork(selectedForkNum, function() {
          WorktableCommon.changeMode(window.mode, selectedPageNum);
          Timeline.refreshAllTimeline();
          return pageFlip.startRender(function() {
            var className, section;
            className = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', beforePageNum);
            section = $("#" + Constant.Paging.ROOT_ID).find("." + className + ":first");
            section.hide();
            if (window.debug) {
              console.log('[selectPage] deleted pageNum:' + beforePageNum);
            }
            Common.removeAllItem(beforePageNum);
            if (created) {
              OperationHistory.add(true);
            }
            LocalStorage.saveAllPageValues();
            return self.createPageSelectMenu();
          });
        });
      });
    });
  };

  Paging.createNewFork = function() {
    var self;
    self = this;
    return WorktableCommon.stopAllEventPreview(function() {
      PageValue.setForkNum(PageValue.getForkCount() + 1);
      PageValue.setEventPageValue(PageValue.Key.eventCount(), 0);
      PageValue.updateForkCount();
      OperationHistory.add(true);
      LocalStorage.saveAllPageValues();
      self.createPageSelectMenu();
      return Timeline.refreshAllTimeline();
    });
  };

  Paging.selectFork = function(selectedForkNum, callback) {
    if (callback == null) {
      callback = null;
    }
    if ((selectedForkNum == null) || selectedForkNum === PageValue.getForkNum()) {
      if (callback != null) {
        callback();
      }
    }
    return WorktableCommon.stopAllEventPreview(function() {
      PageValue.setForkNum(selectedForkNum);
      if (selectedForkNum === PageValue.Key.EF_MASTER_FORKNUM) {
        if (callback != null) {
          return callback();
        }
      } else {
        return WorktableCommon.createAllInstanceAndDrawFromInstancePageValue(function() {
          if (callback != null) {
            return callback();
          }
        });
      }
    });
  };

  return Paging;

})();

//# sourceMappingURL=paging.js.map
