// Generated by CoffeeScript 1.9.2
var WorktableCommon;

WorktableCommon = (function() {
  function WorktableCommon() {}

  WorktableCommon.setupContextMenu = function(element, contextSelector, menu) {
    return element.contextmenu({
      preventContextMenuForPopup: true,
      preventSelect: true,
      menu: menu,
      select: function(event, ui) {
        var i, len, results, value;
        results = [];
        for (i = 0, len = menu.length; i < len; i++) {
          value = menu[i];
          if (value.cmd === ui.cmd) {
            results.push(value.func(event, ui));
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      beforeOpen: function(event, ui) {
        return ui.menu.zIndex($(event.target).zIndex() + 1);
      }
    });
  };

  WorktableCommon.removeAllItem = function() {
    var k, ref, v;
    ref = Common.getCreatedItemObject();
    for (k in ref) {
      v = ref[k];
      if (v.getJQueryElement != null) {
        v.getJQueryElement().remove();
      }
    }
    return window.instanceMap = {};
  };

  WorktableCommon.removeAllItemAndEvent = function() {
    var lstorage;
    Sidebar.closeSidebar();
    lstorage = localStorage;
    lstorage.removeItem(LocalStorage.Key.WORKTABLE_INSTANCE_PAGEVALUES);
    lstorage.removeItem(LocalStorage.Key.WORKTABLE_EVENT_PAGEVALUES);
    return Common.clearAllEventChange((function(_this) {
      return function() {
        _this.removeAllItem();
        EventConfig.removeAllConfig();
        PageValue.removeAllItemAndEventPageValue();
        return Timeline.refreshAllTimeline();
      };
    })(this));
  };

  WorktableCommon.removeAllItemAndEventOnThisPage = function() {
    var lstorage;
    Sidebar.closeSidebar();
    lstorage = localStorage;
    lstorage.removeItem(LocalStorage.Key.WORKTABLE_INSTANCE_PAGEVALUES);
    lstorage.removeItem(LocalStorage.Key.WORKTABLE_EVENT_PAGEVALUES);
    return Common.clearAllEventChange((function(_this) {
      return function() {
        _this.removeAllItem();
        EventConfig.removeAllConfig();
        PageValue.removeAllItemAndEventPageValueOnThisPage();
        return Timeline.refreshAllTimeline();
      };
    })(this));
  };

  WorktableCommon.drawAllItemFromEventPageValue = function() {
    var k, needItemIds, obj, pageValues;
    pageValues = PageValue.getInstancePageValue(PageValue.Key.instancePagePrefix());
    needItemIds = [];
    for (k in pageValues) {
      obj = pageValues[k];
      if (obj.value.itemId != null) {
        if ($.inArray(obj.value.itemId, needItemIds) < 0) {
          needItemIds.push(obj.value.itemId);
        }
      }
    }
    return this.loadItemJs(needItemIds, function() {
      var classMapId, event, id, isCommon;
      for (k in pageValues) {
        obj = pageValues[k];
        isCommon = null;
        id = obj.value.id;
        classMapId = null;
        if (obj.value.itemId != null) {
          isCommon = false;
          classMapId = obj.value.itemId;
        } else {
          isCommon = true;
          classMapId = obj.value.eventId;
        }
        event = Common.getInstanceFromMap(isCommon, id, classMapId);
        if (event instanceof ItemBase) {
          event.setMiniumObject(obj.value);
          if (event instanceof CssItemBase && (event.makeCss != null)) {
            event.makeCss();
          }
          if (event.drawAndMakeConfigs != null) {
            event.drawAndMakeConfigs();
          }
        }
        event.setItemAllPropToPageValue();
      }
      return Timeline.refreshAllTimeline();
    });
  };

  WorktableCommon.loadItemJs = function(itemIds, callback) {
    var callbackCount, i, itemId, itemInitFuncName, len, needReadItemIds;
    if (callback == null) {
      callback = null;
    }
    if (jQuery.type(itemIds) !== "array") {
      itemIds = [itemIds];
    }
    callbackCount = 0;
    needReadItemIds = [];
    for (i = 0, len = itemIds.length; i < len; i++) {
      itemId = itemIds[i];
      if (itemId != null) {
        itemInitFuncName = getInitFuncName(itemId);
        if (window.itemInitFuncList[itemInitFuncName] != null) {
          window.itemInitFuncList[itemInitFuncName]();
          callbackCount += 1;
          if (callbackCount >= itemIds.length) {
            if (callback != null) {
              callback();
            }
            return;
          }
        } else {
          needReadItemIds.push(itemId);
        }
      } else {
        callbackCount += 1;
      }
    }
    return $.ajax({
      url: "/item_js/index",
      type: "POST",
      dataType: "json",
      data: {
        itemIds: needReadItemIds
      },
      success: function(data) {
        var d, j, len1, option, results;
        callbackCount = 0;
        results = [];
        for (j = 0, len1 = data.length; j < len1; j++) {
          d = data[j];
          if (d.css_info != null) {
            option = {
              isWorkTable: true,
              css_temp: d.css_info
            };
          }
          WorktableCommon.availJs(getInitFuncName(d.item_id), d.js_src, option, function() {
            callbackCount += 1;
            if ((callback != null) && callbackCount >= data.length) {
              return callback();
            }
          });
          PageValue.addItemInfo(d.item_id, d.te_actions);
          results.push(EventConfig.addEventConfigContents(d.item_id, d.te_actions, d.te_values));
        }
        return results;
      },
      error: function(data) {}
    });
  };

  WorktableCommon.availJs = function(initName, jsSrc, option, callback) {
    var firstScript, s, t;
    if (option == null) {
      option = {};
    }
    if (callback == null) {
      callback = null;
    }
    s = document.createElement('script');
    s.type = 'text/javascript';
    s.src = jsSrc;
    firstScript = document.getElementsByTagName('script')[0];
    firstScript.parentNode.insertBefore(s, firstScript);
    return t = setInterval(function() {
      if (window.itemInitFuncList[initName] != null) {
        clearInterval(t);
        window.itemInitFuncList[initName](option);
        if (callback != null) {
          return callback();
        }
      }
    }, '500');
  };

  return WorktableCommon;

})();

//# sourceMappingURL=worktable_common.js.map
