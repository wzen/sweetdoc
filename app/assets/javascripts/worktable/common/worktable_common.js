// Generated by CoffeeScript 1.9.2
var WorktableCommon;

WorktableCommon = (function() {
  function WorktableCommon() {}

  WorktableCommon.setSelectedBorder = function(target, selectedBorderType) {
    var className;
    if (selectedBorderType == null) {
      selectedBorderType = "edit";
    }
    className = null;
    if (selectedBorderType === "edit") {
      className = 'editSelected';
    } else if (selectedBorderType === "timeline") {
      className = 'timelineSelected';
    }
    $(target).find("." + className).remove();
    return $(target).append("<div class=" + className + " />");
  };

  WorktableCommon.clearSelectedBorder = function() {
    return $('.editSelected, .timelineSelected').remove();
  };

  WorktableCommon.getInitFuncName = function(itemId) {
    var itemName;
    itemName = Constant.ITEM_PATH_LIST[itemId];
    return itemName + "Init";
  };

  WorktableCommon.changeMode = function(mode) {
    if (mode === Constant.Mode.DRAW) {
      $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTFLOAT));
    } else if (mode === Constant.Mode.EDIT) {
      $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTBOTTOM));
    } else if (mode === Constant.Mode.OPTION) {
      $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTFLOAT));
    }
    return window.mode = mode;
  };

  WorktableCommon.clearAllItemStyle = function() {
    var k, ref, v;
    ref = Common.getCreatedItemObject();
    for (k in ref) {
      v = ref[k];
      if (v instanceof ItemBase) {
        v.clearAllEventStyle();
      }
    }
    this.clearSelectedBorder();
    return $('.colorPicker').ColorPickerHide();
  };

  WorktableCommon.focusToTargetWhenSidebarOpen = function(target, selectedBorderType) {
    if (selectedBorderType == null) {
      selectedBorderType = "edit";
    }
    this.setSelectedBorder(target, selectedBorderType);
    PageValue.setInstancePageValue(PageValue.Key.CONFIG_OPENED_SCROLL, {
      top: scrollContents.scrollTop(),
      left: scrollContents.scrollLeft()
    }, true);
    LocalStorage.saveInstancePageValue();
    return Common.focusToTarget(target);
  };

  WorktableCommon.initKeyEvent = function() {
    return $(window).keydown(function(e) {
      var isMac;
      isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
      if ((isMac && e.metaKey) || (!isMac && e.ctrlKey)) {
        if (e.keyCode === Constant.KeyboardKeyCode.Z) {
          e.preventDefault();
          if (e.shiftKey) {
            return OperationHistory.redo();
          } else {
            return OperationHistory.undo();
          }
        }
      }
    });
  };

  WorktableCommon.clearWorkTable = function() {
    var k, ref, results, v;
    ref = Common.getCreatedItemObject();
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(v.getJQueryElement().remove());
    }
    return results;
  };


  /* デバッグ */

  WorktableCommon.runDebug = function() {};

  WorktableCommon.initMainContainer = function() {
    var borderWidth, menu, padding, page, timelineTopPadding;
    CommonVar.worktableCommonVar();
    borderWidth = 5;
    timelineTopPadding = 5;
    padding = borderWidth * 2 + timelineTopPadding;
    $('#main').height($('#contents').height() - $("#" + Constant.ElementAttribute.NAVBAR_ROOT).height() - $('#timeline').height() - padding);
    $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTBOTTOM));
    $(window.drawingCanvas).attr('width', window.mainWrapper.width());
    $(window.drawingCanvas).attr('height', window.mainWrapper.height());
    scrollInside.width(window.scrollViewSize);
    scrollInside.height(window.scrollViewSize);
    scrollContents.scrollLeft(scrollInside.width() * 0.5);
    scrollContents.scrollTop(scrollInside.height() * 0.5);
    $('.dropdown-toggle').dropdown();
    Navbar.initWorktableNavbar();
    this.initKeyEvent();
    Handwrite.initHandwrite();
    menu = [
      {
        title: "Default",
        cmd: "default",
        uiIcon: "ui-icon-scissors"
      }
    ];
    page = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', PageValue.getPageNum());
    WorktableCommon.setupContextMenu($('#main'), "#pages ." + page + " .main-wrapper:first", menu);
    $('#main').on("mousedown", (function(_this) {
      return function() {
        return _this.clearAllItemStyle();
      };
    })(this));
    return Setting.initConfig();
  };

  WorktableCommon.recreateMainContainer = function() {
    this.removeAllItemAndEvent();
    $('#pages .section').remove();
    Common.createdMainContainerIfNeeded(PageValue.getPageNum());
    WorktableCommon.initMainContainer();
    LocalStorage.clearWorktableWithoutSetting();
    Timeline.refreshAllTimeline();
    PageValue.setPageNum(1);
    OperationHistory.add(true);
    PageValue.updatePageCount();
    return Paging.initPaging();
  };

  WorktableCommon.setupContextMenu = function(element, contextSelector, menu) {
    return element.contextmenu({
      preventContextMenuForPopup: true,
      preventSelect: true,
      menu: menu,
      select: function(event, ui) {
        var i, len, results, value;
        results = [];
        for (i = 0, len = menu.length; i < len; i++) {
          value = menu[i];
          if (value.cmd === ui.cmd) {
            results.push(value.func(event, ui));
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      beforeOpen: function(event, ui) {
        return ui.menu.zIndex($(event.target).zIndex() + 1);
      }
    });
  };

  WorktableCommon.removeAllItemAndEvent = function() {
    Sidebar.closeSidebar();
    LocalStorage.clearWorktableWithoutSetting();
    return Common.clearAllEventChange((function(_this) {
      return function() {
        Common.removeAllItem();
        EventConfig.removeAllConfig();
        PageValue.removeAllItemAndEventPageValue();
        return Timeline.refreshAllTimeline();
      };
    })(this));
  };

  WorktableCommon.removeAllItemAndEventOnThisPage = function() {
    Sidebar.closeSidebar();
    LocalStorage.clearWorktableWithoutGeneralAndSetting();
    return Common.clearAllEventChange((function(_this) {
      return function() {
        Common.removeAllItem();
        EventConfig.removeAllConfig();
        PageValue.removeAllItemAndEventPageValueOnThisPage();
        return Timeline.refreshAllTimeline();
      };
    })(this));
  };

  WorktableCommon.drawAllItemFromEventPageValue = function(callback, pageNum) {
    var k, needItemIds, obj, pageValues;
    if (callback == null) {
      callback = null;
    }
    if (pageNum == null) {
      pageNum = PageValue.getPageNum();
    }
    pageValues = PageValue.getInstancePageValue(PageValue.Key.instancePagePrefix(pageNum));
    needItemIds = [];
    for (k in pageValues) {
      obj = pageValues[k];
      if (obj.value.itemId != null) {
        if ($.inArray(obj.value.itemId, needItemIds) < 0) {
          needItemIds.push(obj.value.itemId);
        }
      }
    }
    return this.loadItemJs(needItemIds, function() {
      var classMapId, event, id, isCommon;
      for (k in pageValues) {
        obj = pageValues[k];
        isCommon = null;
        id = obj.value.id;
        classMapId = null;
        if (obj.value.itemId != null) {
          isCommon = false;
          classMapId = obj.value.itemId;
        } else {
          isCommon = true;
          classMapId = obj.value.eventId;
        }
        event = Common.getInstanceFromMap(isCommon, id, classMapId);
        if (event instanceof ItemBase) {
          event.setMiniumObject(obj.value);
          if (event instanceof CssItemBase && (event.makeCss != null)) {
            event.makeCss();
          }
          if (event.drawAndMakeConfigs != null) {
            event.drawAndMakeConfigs();
          }
        }
        event.setItemAllPropToPageValue();
        LocalStorage.saveValueForWorktable();
      }
      Timeline.refreshAllTimeline();
      if (callback != null) {
        return callback();
      }
    });
  };

  WorktableCommon.loadItemJs = function(itemIds, callback) {
    var callbackCount, i, itemId, itemInitFuncName, len, needReadItemIds;
    if (callback == null) {
      callback = null;
    }
    if (jQuery.type(itemIds) !== "array") {
      itemIds = [itemIds];
    }
    if (itemIds.length === 0) {
      if (callback != null) {
        callback();
      }
      return;
    }
    callbackCount = 0;
    needReadItemIds = [];
    for (i = 0, len = itemIds.length; i < len; i++) {
      itemId = itemIds[i];
      if (itemId != null) {
        itemInitFuncName = WorktableCommon.getInitFuncName(itemId);
        if (window.itemInitFuncList[itemInitFuncName] != null) {
          window.itemInitFuncList[itemInitFuncName]();
          callbackCount += 1;
          if (callbackCount >= itemIds.length) {
            if (callback != null) {
              callback();
            }
            return;
          }
        } else {
          needReadItemIds.push(itemId);
        }
      } else {
        callbackCount += 1;
      }
    }
    return $.ajax({
      url: "/item_js/index",
      type: "POST",
      dataType: "json",
      data: {
        itemIds: needReadItemIds
      },
      success: function(data) {
        var d, j, len1, option, results;
        callbackCount = 0;
        results = [];
        for (j = 0, len1 = data.length; j < len1; j++) {
          d = data[j];
          if (d.css_info != null) {
            option = {
              isWorkTable: true,
              css_temp: d.css_info
            };
          }
          WorktableCommon.availJs(WorktableCommon.getInitFuncName(d.item_id), d.js_src, option, function() {
            callbackCount += 1;
            if ((callback != null) && callbackCount >= data.length) {
              return callback();
            }
          });
          PageValue.addItemInfo(d.item_id, d.te_actions);
          results.push(EventConfig.addEventConfigContents(d.item_id, d.te_actions, d.te_values));
        }
        return results;
      },
      error: function(data) {}
    });
  };

  WorktableCommon.availJs = function(initName, jsSrc, option, callback) {
    var firstScript, s, t;
    if (option == null) {
      option = {};
    }
    if (callback == null) {
      callback = null;
    }
    s = document.createElement('script');
    s.type = 'text/javascript';
    s.src = jsSrc;
    firstScript = document.getElementsByTagName('script')[0];
    firstScript.parentNode.insertBefore(s, firstScript);
    return t = setInterval(function() {
      if (window.itemInitFuncList[initName] != null) {
        clearInterval(t);
        window.itemInitFuncList[initName](option);
        if (callback != null) {
          return callback();
        }
      }
    }, '500');
  };

  return WorktableCommon;

})();

//# sourceMappingURL=worktable_common.js.map
