// Generated by CoffeeScript 1.9.2
var TimelineEvent, addTimelineEventContents, initTimelineEventValue, setupTimeLineCss, setupTimeLineObjects, setupTimelineEvents, updateSelectItemMenu;

TimelineEvent = (function() {
  function TimelineEvent(e, eventId) {
    if (eventId == null) {
      eventId = null;
    }
    this.emt = $(e).closest('.event');
    if (eventId != null) {
      this.eventId = eventId;
      this.configValues = null;
    } else {
      this.eventId = getPageValue(Constant.PageValueKey.TE_COUNT);
    }
  }

  TimelineEvent.prototype.setSelectEvent = function(e, value) {
    var d, displayClassName, splitValues, vEmt;
    this.isCommonEvent = value.indexOf('c_') !== 0;
    if (this.isCommonEvent) {
      this.actionEventTypeId = parseInt(value.substring(2));
    } else {
      splitValues = value.split(Constant.TIMELINE_ITEM_SEPERATOR);
      this.id = splitValues[0];
      this.itemId = splitValues[1];
    }
    clearSelectedBorder();
    d = null;
    if (this.isCommonEvent) {
      d = "values_div";
      initTimelineEventValue(this.emt, parseInt(v.substring(2)), true);
    } else {
      d = "action_div";
      vEmt = $('#' + this.id);
      setSelectedBorder(vEmt, 'timeline');
      focusToTarget(vEmt);
    }
    $(".config.te_div", this.emt).css('display', 'none');
    $("." + d + " .forms", this.emt).children("div").css('display', 'none');
    displayClassName = '';
    if (this.isCommonEvent) {
      displayClassName = v;
    } else {
      displayClassName = Constant.ElementAttribute.TE_ACTION_CLASS.replace('@itemid', this.itemId);
    }
    $("." + displayClassName, this.emt).css('display', '');
    $("." + d, this.emt).css('display', '');
    return $("<input type='hidden' class='obj_id', value='" + this.id + "'>").appendTo($('values', this.emt));
  };

  TimelineEvent.prototype.clickMethod = function(e) {
    var item_id, method_name, valueClassName;
    item_id = $(e).find('input.item_id').val();
    method_name = $(e).find('input.method_name').val();
    valueClassName = Constant.ElementAttribute.TE_VALUES_CLASS.replace('@itemid', item_id).replace('@methodname', method_name);
    $(".values_div .forms", this.emt).children("div").css('display', 'none');
    $("." + valueClassName, this.emt).css('display', '');
    $(".config.values_div", this.emt).css('display', '');
    $("<input type='hidden' class='item_id', value='" + item_id + "'>").appendTo($('values', this.emt));
    return $("<input type='hidden' class='method_name', value='" + method_name + "'>").appendTo($('values', this.emt));
  };

  TimelineEvent.prototype.setConfigValues = function() {};

  TimelineEvent.prototype.readFromPageValue = function() {};

  TimelineEvent.prototype.writeToPageValue = function() {};

  return TimelineEvent;

})();

addTimelineEventContents = function(te_actions, te_values) {
  var action_forms, className, li;
  if ((te_actions != null) && te_actions.length > 0) {
    className = Constant.ElementAttribute.TE_ACTION_CLASS.replace('@itemid', te_actions[0].item_id);
    action_forms = $('#timeline-config .action_forms');
    if (action_forms.find("." + className).length === 0) {
      li = '';
      te_actions.forEach(function(a) {
        var actionType;
        actionType = null;
        if (a.action_event_type_id === Constant.ActionEventHandleType.SCROLL) {
          actionType = "scroll";
        } else if (a.action_event_type_id === Constant.ActionEventHandleType.CLICK) {
          actionType = "click";
        }
        return li += "<li class='push method " + actionType + " " + a.method_name + "'>\n  " + a.options['name'] + "\n  <input class='item_id' type='hidden' value='" + a.item_id + "' >\n  <input class='method_name' type='hidden' value='" + a.method_name + "'>\n</li>";
      });
      $("<div class='" + className + "'><ul>" + li + "</ul></div>").appendTo(action_forms);
    }
  }
  if (te_values != null) {
    return $(te_values).appendTo($('#timeline-config .value_forms'));
  }
};

setupTimelineEvents = function() {
  var _applyAction, _clickTimelineEvent, _createTimelineEvent, _pushMethodName, _resetAction, _selectItem, self;
  self = this;

  /* private method ここから */
  _selectItem = function(e) {
    var d, displayClassName, emt, i, isSelectedCommonEvent, v, vEmt, values;
    clearSelectedBorder();
    if ($(e).val() === "") {
      $(".config.te_div", emt).css('display', 'none');
      return;
    }
    emt = $(e).closest('.event');
    values = $(e).val().split(Constant.TIMELINE_ITEM_SEPERATOR);
    v = values[0];
    i = values[1];
    d = null;
    isSelectedCommonEvent = v.indexOf('c_') === 0;
    if (isSelectedCommonEvent) {
      d = "values_div";
      initTimelineEventValue(emt, parseInt(v.substring(2)), true);
    } else {
      d = "action_div";
      vEmt = $('#' + v);
      setSelectedBorder(vEmt, 'timeline');
      focusToTarget(vEmt);
    }
    $(".config.te_div", emt).css('display', 'none');
    $("." + d + " .forms", emt).children("div").css('display', 'none');
    displayClassName = '';
    if (isSelectedCommonEvent) {
      displayClassName = v;
    } else {
      displayClassName = Constant.ElementAttribute.TE_ACTION_CLASS.replace('@itemid', i);
    }
    $("." + displayClassName, emt).css('display', '');
    $("." + d, emt).css('display', '');
    return $("<input type='hidden' class='obj_id', value='" + v + "'>").appendTo($('values', emt));
  };
  _pushMethodName = function(e) {
    var emt, item_id, method_name, valueClassName;
    emt = $(e).closest('.event');
    item_id = $(e).find('input.item_id').val();
    method_name = $(e).find('input.method_name').val();
    valueClassName = Constant.ElementAttribute.TE_VALUES_CLASS.replace('@itemid', item_id).replace('@methodname', method_name);
    $(".values_div .forms", emt).children("div").css('display', 'none');
    $("." + valueClassName, emt).css('display', '');
    $(".config.values_div", emt).css('display', '');
    $("<input type='hidden' class='item_id', value='" + item_id + "'>").appendTo($('values', emt));
    return $("<input type='hidden' class='method_name', value='" + method_name + "'>").appendTo($('values', emt));
  };
  _resetAction = function(e) {
    $(e).closest('.event');
    return $('.values .args', emt).html('');
  };
  _applyAction = function(e) {
    var emt, h, teCount;
    emt = $(e).closest('.event');
    h = {};
    $('.values input', emt).each(function() {
      var k, v;
      v = $(this).val();
      k = $(this).attr('class');
      return h[k] = v;
    });
    teCount = getPageValue(Constant.PageValueKey.TE_COUNT);
    if (teCount != null) {
      teCount += 1;
    } else {
      teCount = 1;
    }
    setPageValue(Constant.PageValueKey.TE_VALUE.replace('@te_num', teCount), h);
    setPageValue(Constant.PageValueKey.TE_COUNT, teCount);
    return _createTimelineEvent.call(self, e);
  };
  _createTimelineEvent = function(e) {
    var newEmt, pEmt, teNum;
    pEmt = $('#timeline_events');
    newEmt = $('.timeline_event_temp', pEmt).children(':first').clone(true);
    teNum = getPageValue(Constant.PageValueKey.TE_COUNT) + 1;
    newEmt.find('.te_num').val(teNum);
    return pEmt.append(newEmt);
  };
  _clickTimelineEvent = function(e) {
    var eId, emt, te_num;
    if ($(e).is('.ui-sortable-helper')) {
      return;
    }
    clearSelectedBorder();
    setSelectedBorder(e, "timeline");
    switchSidebarConfig("timeline");
    te_num = $(e).find('input.te_num').val();
    eId = Constant.ElementAttribute.TE_ITEM_ROOT_ID.replace('@te_num', te_num);
    emt = $('#' + eId);
    if (emt.length === 0) {
      emt = $('#timeline-config .timeline_temp .event').clone(true).attr('id', eId);
      $('#timeline-config').append(emt);
    }
    updateSelectItemMenu();
    (function(_this) {
      return (function() {
        var em;
        em = $('.te_item_select', emt);
        em.off('change');
        em.on('change', function(e) {
          return _selectItem.call(self, this);
        });
        em = $('.action_forms li', emt);
        em.off('click');
        em.on('click', function(e) {
          return _pushMethodName.call(self, this);
        });
        em = $('.push.button.reset', emt);
        em.off('click');
        em.on('click', function(e) {
          return _resetAction.call(self, this);
        });
        em = $('.push.button.apply', emt);
        em.off('click');
        em.on('click', function(e) {
          return _applyAction.call(self, this);
        });
        em = $('.push.button.cancel', emt);
        em.off('click');
        return em.on('click', function(e) {
          emt = $(this).closest('.event');
          $('.values', emt).html('');
          return closeSidebar(function() {
            return $(".config.te_div", emt).css('display', 'none');
          });
        });
      });
    })(this)();
    $('#timeline-config .event').css('display', 'none');
    emt.css('display', '');
    if (!isOpenedConfigSidebar()) {
      openConfigSidebar();
    }
    if ($(e).hasClass('blank')) {

    } else {

    }
  };

  /* private method ここまで */
  $('.timeline_event').off('click');
  $('.timeline_event').on('click', function(e) {
    return _clickTimelineEvent.call(self, this);
  });
  return $('#timeline_events').sortable({
    revert: true,
    axis: 'x',
    containment: $('#timeline_events_container'),
    items: '.sortable',
    stop: function(event, ui) {}
  });
};

updateSelectItemMenu = function() {
  var items, selectOptions, teItemSelect, teItemSelects;
  teItemSelects = $('#timeline-config .te_item_select');
  teItemSelect = teItemSelects[0];
  selectOptions = '';
  items = $('#page_values .item');
  items.children().each(function() {
    var id, itemId, name;
    id = $(this).find('input.id').val();
    name = $(this).find('input.name').val();
    itemId = $(this).find('input.itemId').val();
    return selectOptions += "<option value='" + id + Constant.TIMELINE_ITEM_SEPERATOR + itemId + "'>\n  " + name + "\n</option>";
  });
  return teItemSelects.each(function() {
    $(this).find('option').each(function() {
      if ($(this).val().length > 0 && $(this).val().indexOf('c_') !== 0) {
        return $(this).remove();
      }
    });
    return $(this).append($(selectOptions));
  });
};

initTimelineEventValue = function(element, type, isCommonEvent) {
  var typeArray;
  typeArray = [];
  if (typeOfValue(type) !== "array") {
    typeArray.push(type);
  } else {
    typeArray = type;
  }
  if (isCommonEvent) {
    return $(typeArray).each(function() {
      var bgColor;
      if (this === Constant.CommonActionEventChangeType.BACKGROUND) {
        bgColor = $('#main-wrapper.stage_container').css('backgroundColor');
        $(".baseColor", $("values_div", element)).css('backgroundColor', bgColor);
        return $(".colorPicker", element).each(function() {
          var self;
          self = $(this);
          if (!self.hasClass('temp') && !self.hasClass('baseColor')) {
            return initColorPicker(self, "fff", null);
          }
        });
      } else if (this === Constant.CommonActionEventChangeType.ZOOM) {
        return console.log('zoom');
      }
    });
  } else {
    return console.log('通常');
  }
};

setupTimeLineObjects = function() {
  var objList;
  objList = [];
  itemObjectList.forEach(function(item) {
    var obj;
    obj = {
      chapter: 1,
      screen: 1,
      miniObj: item.getMinimumObject(),
      itemSize: item.itemSize,
      sEvent: "scrollDraw",
      cEvent: "defaultClick"
    };
    return objList.push(obj);
  });
  return objList;
};

setupTimeLineCss = function() {
  var itemCssStyle;
  itemCssStyle = "";
  $('#css_code_info').find('.css-style').each(function() {
    return itemCssStyle += $(this).html();
  });
  itemObjectList.forEach(function(item) {
    if ((typeof ButtonItem !== "undefined" && ButtonItem !== null) && item instanceof ButtonItem) {
      return itemCssStyle += ButtonItem.dentButton(item);
    }
  });
  return itemCssStyle;
};

//# sourceMappingURL=event.js.map
