// Generated by CoffeeScript 1.9.2
var TimelineConfig;

TimelineConfig = (function() {
  if (typeof gon !== "undefined" && gon !== null) {
    TimelineConfig.ITEM_ROOT_ID = 'timeline_event_@te_num';
    TimelineConfig.ACTION_CLASS = 'timeline_event_action_@itemid';
    TimelineConfig.VALUES_CLASS = constant.ElementAttribute.TE_VALUES_CLASS;
  }

  function TimelineConfig(e, teEmt, teNum) {
    this.teEmt = teEmt;
    if (teNum == null) {
      teNum = null;
    }
    this.emt = $(e).closest('.event');
    if (teNum != null) {
      this.teNum = teNum;
      this.readFromPageValue();
    } else {
      this.teNum = getPageValue(Constant.PageValueKey.TE_COUNT);
      if (this.teNum == null) {
        this.teNum = 1;
      }
    }
  }

  TimelineConfig.prototype.selectItem = function(e) {
    var displayClassName, splitValues, vEmt, value;
    value = $(e).val();
    if (value === "") {
      $(".config.te_div", this.emt).css('display', 'none');
      return;
    }
    this.isCommonEvent = value.indexOf(Constant.TIMELINE_COMMON_PREFIX) === 0;
    if (this.isCommonEvent) {
      this.actionEventTypeId = parseInt(value.substring(Constant.TIMELINE_COMMON_PREFIX.length));
    } else {
      splitValues = value.split(Constant.TIMELINE_ITEM_SEPERATOR);
      this.id = splitValues[0];
      this.itemId = splitValues[1];
    }
    clearSelectedBorder();
    if (!this.isCommonEvent) {
      vEmt = $('#' + this.id);
      setSelectedBorder(vEmt, 'timeline');
      focusToTarget(vEmt);
    }
    $(".config.te_div", this.emt).css('display', 'none');
    $(".action_div .forms", this.emt).children("div").css('display', 'none');
    displayClassName = '';
    if (this.isCommonEvent) {
      displayClassName = Constant.TIMELINE_COMMON_ACTION_CLASSNAME;
    } else {
      displayClassName = this.constructor.ACTION_CLASS.replace('@itemid', this.itemId);
    }
    $("." + displayClassName, this.emt).css('display', '');
    return $(".action_div", this.emt).css('display', '');
  };

  TimelineConfig.prototype.clickMethod = function(e) {
    var extraClassName, valueClassName;
    valueClassName = null;
    this.actionType = $(e).find('input.action_type').val();
    if (this.isCommonEvent) {
      valueClassName = Constant.TIMELINE_COMMON_PREFIX + this.actionEventTypeId;
    } else {
      this.methodName = $(e).find('input.method_name').val();
      valueClassName = this.constructor.VALUES_CLASS.replace('@itemid', this.itemId).replace('@methodname', this.methodName);
    }
    extraClassName = null;
    if (this.actionType === "scroll") {
      extraClassName = "scroll_point_div";
    } else {
      extraClassName = "click_parallel_div";
    }
    $(".scroll_point_div", this.emt).css('display', 'none');
    $(".click_parallel_div", this.emt).css('display', 'none');
    $(".values_div .forms", this.emt).children("div").css('display', 'none');
    $("." + extraClassName, this.emt).css('display', '');
    $("." + valueClassName, this.emt).css('display', '');
    $(".config.values_div", this.emt).css('display', '');
    return this.initConfigUI(this.actionEventTypeId);
  };

  TimelineConfig.prototype.initConfigUI = function(type) {
    var typeArray;
    typeArray = [];
    if (typeOfValue(type) !== "array") {
      typeArray.push(type);
    } else {
      typeArray = type;
    }
    return $(typeArray).each(function(e) {
      var bgColor;
      if (e === Constant.CommonActionEventChangeType.BACKGROUND) {
        bgColor = $('#main-wrapper.stage_container').css('backgroundColor');
        $(".baseColor", $("values_div", this.emt)).css('backgroundColor', bgColor);
        return $(".colorPicker", this.emt).each(function() {
          var self;
          self = $(this);
          if (!self.hasClass('temp') && !self.hasClass('baseColor')) {
            return initColorPicker(self, "fff", null);
          }
        });
      } else if (e === Constant.CommonActionEventChangeType.MOVE) {
        return console.log('move');
      }
    });
  };

  TimelineConfig.prototype.resetAction = function() {
    return $('.values .args', this.emt).html('');
  };

  TimelineConfig.prototype.applyAction = function() {
    var errorMes;
    errorMes = this.writeToPageValue();
    if ((errorMes != null) && errorMes.length > 0) {
      this.showError(errorMes);
      return;
    }
    $(this.teEmt).removeClass("blank");
    if (this.isCommonEvent) {
      return $(this.teEmt).addClass("common");
    } else {
      return $(this.teEmt).addClass(this.actionType);
    }
  };

  TimelineConfig.prototype.writeToPageValue = function() {
    var errorMes, writeValue;
    errorMes = "Not implemented";
    writeValue = null;
    if (this.isCommonEvent) {
      if (this.actionEventTypeId === Constant.CommonActionEventChangeType.BACKGROUND) {
        errorMes = TimelineCommonEventBackground.writeToPageValue(this);
      } else if (this.actionEventTypeId === Constant.CommonActionEventChangeType.MOVE) {
        errorMes = TimelineCommonEventMove.writeToPageValue(this);
      }
    }
    return errorMes;
  };

  TimelineConfig.prototype.readFromPageValue = function() {
    if (this.isCommonEvent) {
      if (this.actionEventTypeId === Constant.CommonActionEventChangeType.BACKGROUND) {
        return TimelineCommonEventBackground.readFromPageValue();
      } else if (this.actionEventTypeId === Constant.CommonActionEventChangeType.MOVE) {
        return TimelineCommonEventMove.readFromPageValue();
      }
    }
  };

  TimelineConfig.prototype.showError = function(message) {
    var timelineConfigError;
    timelineConfigError = $('.timeline_config_error', this.emt);
    timelineConfigError.find('p').html(message);
    return timelineConfigError.css('display', '');
  };

  TimelineConfig.prototype.clearError = function() {
    var timelineConfigError;
    timelineConfigError = $('.timeline_config_error', this.emt);
    timelineConfigError.find('p').html('');
    return timelineConfigError.css('display', 'none');
  };

  return TimelineConfig;

})();

//# sourceMappingURL=timeline_config.js.map
