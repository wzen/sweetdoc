// Generated by CoffeeScript 1.9.2
var TimelineConfig;

TimelineConfig = (function() {
  var _timelineEvent;

  if (typeof gon !== "undefined" && gon !== null) {
    TimelineConfig.ITEM_ROOT_ID = 'timeline_event_@te_num';
    TimelineConfig.ACTION_CLASS = 'timeline_event_action_@itemid';
    TimelineConfig.VALUES_CLASS = constant.ElementAttribute.TE_VALUES_CLASS;
  }

  function TimelineConfig(e, teEmt, teNum) {
    this.teEmt = teEmt;
    if (teNum == null) {
      teNum = null;
    }
    this.emt = $(e).closest('.event');
    if (teNum != null) {
      this.teNum = teNum;
      this.readFromPageValue();
      this.selectItem();
      this.clickMethod();
    } else {
      this.teNum = getTimelinePageValue(Constant.PageValueKey.TE_COUNT);
      if (this.teNum == null) {
        this.teNum = 1;
      }
    }
  }

  TimelineConfig.prototype.selectItem = function(e) {
    var displayClassName, splitValues, vEmt, value;
    if (e == null) {
      e = null;
    }
    if (e != null) {
      value = $(e).val();
      if (value === "") {
        $(".config.te_div", this.emt).css('display', 'none');
        return;
      }
      this.isCommonEvent = value.indexOf(Constant.TIMELINE_COMMON_PREFIX) === 0;
      if (this.isCommonEvent) {
        this.actionEventTypeId = parseInt(value.substring(Constant.TIMELINE_COMMON_PREFIX.length));
      } else {
        splitValues = value.split(Constant.TIMELINE_ITEM_SEPERATOR);
        this.id = splitValues[0];
        this.itemId = splitValues[1];
      }
    }
    clearSelectedBorder();
    if (!this.isCommonEvent) {
      vEmt = $('#' + this.id);
      setSelectedBorder(vEmt, 'timeline');
      focusToTarget(vEmt);
    }
    $(".config.te_div", this.emt).css('display', 'none');
    $(".action_div .forms", this.emt).children("div").css('display', 'none');
    displayClassName = '';
    if (this.isCommonEvent) {
      displayClassName = Constant.TIMELINE_COMMON_ACTION_CLASSNAME;
    } else {
      displayClassName = this.constructor.ACTION_CLASS.replace('@itemid', this.itemId);
    }
    $("." + displayClassName, this.emt).css('display', '');
    return $(".action_div", this.emt).css('display', '');
  };

  TimelineConfig.prototype.clickMethod = function(e) {
    var extraClassName, tle, valueClassName;
    if (e == null) {
      e = null;
    }
    if (e != null) {
      this.actionType = parseInt($(e).find('input.action_type').val());
      this.methodName = $(e).find('input.method_name').val();
    }
    valueClassName = null;
    if (this.isCommonEvent) {
      valueClassName = Constant.TIMELINE_COMMON_PREFIX + this.actionEventTypeId;
    } else {
      valueClassName = this.constructor.VALUES_CLASS.replace('@itemid', this.itemId).replace('@methodname', this.methodName);
    }
    extraClassName = null;
    if (this.actionType === Constant.ActionEventHandleType.SCROLL) {
      extraClassName = "scroll_point_div";
    } else {
      extraClassName = "click_parallel_div";
    }
    $(".scroll_point_div", this.emt).css('display', 'none');
    $(".click_parallel_div", this.emt).css('display', 'none');
    $(".values_div .forms", this.emt).children("div").css('display', 'none');
    $("." + extraClassName, this.emt).css('display', '');
    $("." + valueClassName, this.emt).css('display', '');
    $(".config.values_div", this.emt).css('display', '');
    if (e != null) {
      tle = _timelineEvent.call(this);
      if (tle != null) {
        return tle.initConfigValue(this);
      }
    }
  };

  TimelineConfig.prototype.resetAction = function() {
    return $('.values .args', this.emt).html('');
  };

  TimelineConfig.prototype.applyAction = function() {
    var errorMes;
    errorMes = this.writeToPageValue();
    if ((errorMes != null) && errorMes.length > 0) {
      this.showError(errorMes);
      return;
    }
    return changeTimelineColor(this.teNum, this.actionType);
  };

  TimelineConfig.prototype.writeToPageValue = function() {
    var errorMes, tle, writeValue;
    errorMes = "Not implemented";
    writeValue = null;
    tle = _timelineEvent.call(this);
    if (tle != null) {
      errorMes = tle.writeToPageValue(this);
    }
    return errorMes;
  };

  TimelineConfig.prototype.readFromPageValue = function() {
    var tle;
    tle = _timelineEvent.call(this);
    if (tle != null) {
      return tle.readFromPageValue();
    }
  };

  TimelineConfig.prototype.showError = function(message) {
    var timelineConfigError;
    timelineConfigError = $('.timeline_config_error', this.emt);
    timelineConfigError.find('p').html(message);
    return timelineConfigError.css('display', '');
  };

  TimelineConfig.prototype.clearError = function() {
    var timelineConfigError;
    timelineConfigError = $('.timeline_config_error', this.emt);
    timelineConfigError.find('p').html('');
    return timelineConfigError.css('display', 'none');
  };

  _timelineEvent = function() {
    if (this.isCommonEvent) {
      if (this.actionEventTypeId === Constant.CommonActionEventChangeType.BACKGROUNDCOLOR_CHANGE) {
        return TLEBackgroundColorChange;
      } else if (this.actionEventTypeId === Constant.CommonActionEventChangeType.SCREENPOSITION_CHANGE) {
        return TLEScreenPositionChange;
      }
    }
  };

  return TimelineConfig;

})();

//# sourceMappingURL=timeline_config.js.map
