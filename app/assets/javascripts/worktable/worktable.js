// Generated by CoffeeScript 1.9.2
var Worktable;

Worktable = (function() {
  function Worktable() {}

  window.worktablePage = true;

  Worktable.setSelectedBorder = function(target, selectedBorderType) {
    var className;
    if (selectedBorderType == null) {
      selectedBorderType = "edit";
    }
    className = null;
    if (selectedBorderType === "edit") {
      className = 'editSelected';
    } else if (selectedBorderType === "timeline") {
      className = 'timelineSelected';
    }
    $(target).find("." + className).remove();
    return $(target).append("<div class=" + className + " />");
  };

  Worktable.clearSelectedBorder = function() {
    return $('.editSelected, .timelineSelected').remove();
  };

  Worktable.getInitFuncName = function(itemId) {
    var itemName;
    itemName = Constant.ITEM_PATH_LIST[itemId];
    return itemName + "Init";
  };

  Worktable.changeMode = function(mode) {
    if (mode === Constant.Mode.DRAW) {
      $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTFLOAT));
    } else if (mode === Constant.Mode.EDIT) {
      $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTBOTTOM));
    } else if (mode === Constant.Mode.OPTION) {
      $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTFLOAT));
    }
    return window.mode = mode;
  };

  Worktable.clearAllItemStyle = function() {
    var k, ref, v;
    ref = Common.getCreatedItemObject();
    for (k in ref) {
      v = ref[k];
      if (v instanceof ItemBase) {
        v.clearAllEventStyle();
      }
    }
    this.clearSelectedBorder();
    return $('.colorPicker').ColorPickerHide();
  };

  Worktable.focusToTargetWhenSidebarOpen = function(target, selectedBorderType) {
    if (selectedBorderType == null) {
      selectedBorderType = "edit";
    }
    this.setSelectedBorder(target, selectedBorderType);
    PageValue.setInstancePageValue(PageValue.Key.CONFIG_OPENED_SCROLL, {
      top: scrollContents.scrollTop(),
      left: scrollContents.scrollLeft()
    }, true);
    LocalStorage.saveInstancePageValue();
    return Common.focusToTarget(target);
  };

  Worktable.initKeyEvent = function() {
    return $(window).keydown(function(e) {
      var isMac;
      isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
      if ((isMac && e.metaKey) || (!isMac && e.ctrlKey)) {
        if (e.keyCode === Constant.KeyboardKeyCode.Z) {
          e.preventDefault();
          if (e.shiftKey) {
            return OperationHistory.redo();
          } else {
            return OperationHistory.undo();
          }
        }
      }
    });
  };

  Worktable.clearWorkTable = function() {
    var k, ref, results, v;
    ref = Common.getCreatedItemObject();
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(v.getJQueryElement().remove());
    }
    return results;
  };


  /* デバッグ */

  Worktable.runDebug = function() {};

  Worktable.initMainContainer = function() {
    var borderWidth, menu, padding, page, timelineTopPadding;
    CommonVar.worktableCommonVar();
    borderWidth = 5;
    timelineTopPadding = 5;
    padding = borderWidth * 4 + timelineTopPadding;
    $('#pages').height($('#contents').height() - $("#" + Constant.ElementAttribute.NAVBAR_ROOT).height() - $('#timeline').height() - padding);
    $(window.drawingCanvas).css('z-index', Common.plusPagingZindex(Constant.Zindex.EVENTBOTTOM));
    $(window.drawingCanvas).attr('width', window.mainWrapper.width());
    $(window.drawingCanvas).attr('height', window.mainWrapper.height());
    scrollInside.width(window.scrollViewSize);
    scrollInside.height(window.scrollViewSize);
    scrollContents.scrollLeft(scrollInside.width() * 0.5);
    scrollContents.scrollTop(scrollInside.height() * 0.5);
    $('.dropdown-toggle').dropdown();
    Navbar.initWorktableNavbar();
    this.initKeyEvent();
    Handwrite.initHandwrite();
    menu = [
      {
        title: "Default",
        cmd: "default",
        uiIcon: "ui-icon-scissors"
      }
    ];
    page = Constant.Paging.MAIN_PAGING_SECTION_CLASS.replace('@pagenum', window.pageNum);
    WorktableCommon.setupContextMenu($('#main'), "#pages ." + page + " .main-wrapper:first", menu);
    $('#main').on("mousedown", (function(_this) {
      return function() {
        return _this.clearAllItemStyle();
      };
    })(this));
    return Setting.initConfig();
  };

  return Worktable;

})();

$(function() {
  var _callback, existedCache;
  if (!Common.checkBlowserEnvironment()) {
    alert('ブラウザ非対応です。');
    return;
  }
  window.pageNum = PageValue.getPageNum();
  existedCache = !LocalStorage.isOverWorktableSaveTimeLimit();
  if (existedCache) {
    LocalStorage.loadValueForWorktable();
  }
  window.pageNum = PageValue.getPageNum();
  CommonVar.initVarWhenLoadedView();
  CommonVar.initCommonVar();
  Common.createdMainContainerIfNeeded(window.pageNum);
  Worktable.initMainContainer();
  _callback = function() {
    OperationHistory.add(true);
    PageValue.updatePageCount();
    return Paging.initPaging();
  };
  if (existedCache) {
    PageValue.adjustInstanceAndEventOnThisPage();
    return WorktableCommon.drawAllItemFromEventPageValue(_callback);
  } else {
    LocalStorage.clearWorktable();
    Timeline.refreshAllTimeline();
    return _callback.call(this);
  }
});

//# sourceMappingURL=worktable.js.map
