// Generated by CoffeeScript 1.9.2
var WorkTableCommonInclude;

WorkTableCommonInclude = {
  getDesignConfigId: function() {
    return this.constructor.DESIGN_CONFIG_ROOT_ID.replace('@id', this.id);
  },
  startDraw: function() {},
  drawAndMakeConfigsAndWritePageValue: function(show) {
    if (show == null) {
      show = true;
    }
    this.reDraw(show);
    this.makeDesignConfig();
    if (this.constructor.defaultMethodName() != null) {
      EPVItem.writeDefaultToPageValue(this);
      return Timeline.refreshAllTimeline();
    }
  },
  drawAndMakeConfigs: function(show) {
    if (show == null) {
      show = true;
    }
    this.reDraw(show);
    return this.makeDesignConfig();
  },
  showOptionMenu: function() {
    var sc;
    sc = $('.sidebar-config');
    sc.hide();
    $("." + Constant.DesignConfig.DESIGN_ROOT_CLASSNAME, sc).hide();
    $('#design-config').show();
    return $('#' + this.getDesignConfigId()).show();
  },
  setupDragAndResizeEvents: function() {
    var self;
    self = this;
    (function() {
      var contextSelector, menu;
      menu = [];
      contextSelector = null;
      if ((typeof ArrowItem !== "undefined" && ArrowItem !== null) && self instanceof ArrowItem) {
        contextSelector = ".arrow";
      } else if ((typeof ButtonItem !== "undefined" && ButtonItem !== null) && self instanceof ButtonItem) {
        contextSelector = ".css3button";
      }
      menu.push({
        title: "Edit",
        cmd: "edit",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          return Sidebar.openItemEditConfig(event.target);
        }
      });
      menu.push({
        title: I18n.t('context_menu.copy'),
        cmd: "copy",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          WorktableCommon.copyItem();
          return WorktableCommon.setMainContainerContext();
        }
      });
      menu.push({
        title: I18n.t('context_menu.cut'),
        cmd: "cut",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          WorktableCommon.cutItem();
          return WorktableCommon.setMainContainerContext();
        }
      });
      menu.push({
        title: I18n.t('context_menu.float'),
        cmd: "float",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          var objId;
          objId = $(event.target).attr('id');
          WorktableCommon.floatItem(objId);
          LocalStorage.saveAllPageValues();
          return OperationHistory.add();
        }
      });
      menu.push({
        title: I18n.t('context_menu.rear'),
        cmd: "rear",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          var objId;
          objId = $(event.target).attr('id');
          WorktableCommon.rearItem(objId);
          LocalStorage.saveAllPageValues();
          return OperationHistory.add();
        }
      });
      menu.push({
        title: I18n.t('context_menu.delete'),
        cmd: "delete",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          if (window.confirm(I18n.t('message.dialog.delete_item'))) {
            return WorktableCommon.removeItem(event.target);
          }
        }
      });
      return WorktableCommon.setupContextMenu(self.getJQueryElement(), contextSelector, menu);
    })();
    (function() {
      return self.getJQueryElement().mousedown(function(e) {
        if (e.which === 1) {
          e.stopPropagation();
          WorktableCommon.clearSelectedBorder();
          return WorktableCommon.setSelectedBorder(this, "edit");
        }
      });
    })();
    return (function() {
      self.getJQueryElement().draggable({
        containment: scrollInside,
        drag: function(event, ui) {
          if (self.drag != null) {
            return self.drag();
          }
        },
        stop: function(event, ui) {
          if (self.dragComplete != null) {
            return self.dragComplete();
          }
        }
      });
      return self.getJQueryElement().resizable({
        containment: scrollInside,
        resize: function(event, ui) {
          if (self.resize != null) {
            return self.resize();
          }
        },
        stop: function(event, ui) {
          if (self.resizeComplete != null) {
            return self.resizeComplete();
          }
        }
      });
    })();
  },
  makeDesignConfig: function() {
    var designConfigRoot, self;
    self = this;
    designConfigRoot = $('#' + this.getDesignConfigId());
    if ((designConfigRoot == null) || designConfigRoot.length === 0) {
      return DesignConfig.addConfigIfNeed(this, function(data) {
        var html;
        html = $(data.html).attr('id', self.getDesignConfigId());
        return $('#design-config').append(html);
      });
    }
  },
  drag: function() {
    var element;
    element = $('#' + this.id);
    this.updateItemPosition(element.position().left, element.position().top);
    if (window.debug) {
      return console.log("drag: itemSize: " + (JSON.stringify(this.itemSize)));
    }
  },
  resize: function() {
    var element;
    element = $('#' + this.id);
    return this.updateItemSize(element.width(), element.height());
  },
  dragComplete: function() {
    return this.saveObj();
  },
  resizeComplete: function() {
    return this.saveObj();
  },
  setupOptionMenu: function() {
    var btnBgColor, btnGradientStep, btnShadowColor, designConfigRoot, h, name, self, w, x, y;
    self = this;
    designConfigRoot = $('#' + this.getDesignConfigId());
    if ((designConfigRoot == null) || designConfigRoot.length === 0) {
      this.makeDesignConfig();
      designConfigRoot = $('#' + this.getDesignConfigId());
    }
    name = $('.item-name', designConfigRoot);
    name.val(this.name);
    name.off('change').on('change', (function(_this) {
      return function() {
        _this.name = name.val();
        return _this.setItemPropToPageValue('name', _this.name);
      };
    })(this));
    x = this.getJQueryElement().position().left;
    y = this.getJQueryElement().position().top;
    w = this.getJQueryElement().width();
    h = this.getJQueryElement().height();
    $('.item_position_x:first', designConfigRoot).val(x);
    $('.item_position_y:first', designConfigRoot).val(y);
    $('.item_width:first', designConfigRoot).val(w);
    $('.item_height:first', designConfigRoot).val(h);
    $('.item_position_x:first, .item_position_y:first, .item_width:first, .item_height:first', designConfigRoot).off('change').on('change', (function(_this) {
      return function() {
        var itemSize;
        itemSize = {
          x: parseInt($('.item_position_x:first', designConfigRoot).val()),
          y: parseInt($('.item_position_y:first', designConfigRoot).val()),
          w: parseInt($('.item_width:first', designConfigRoot).val()),
          h: parseInt($('.item_height:first', designConfigRoot).val())
        };
        return _this.updatePositionAndItemSize(itemSize);
      };
    })(this));
    if (this.constructor.actionProperties.designConfig === Constant.ItemDesignOptionType.DESIGN_TOOL) {
      self.settingGradientSlider('design_slider_gradient', null);
      self.settingGradientDegSlider('design_slider_gradient_deg', 0, 315);
      self.settingSlider('design_slider_border_radius', 0, 100);
      self.settingSlider('design_slider_border_width', 0, 10);
      self.settingSlider('design_slider_font_size', 0, 30);
      self.settingSlider('design_slider_shadow_left', -100, 100);
      self.settingSlider('design_slider_shadow_opacity', 0.0, 1.0, 0.1);
      self.settingSlider('design_slider_shadow_size', 0, 100);
      self.settingSlider('design_slider_shadow_top', -100, 100);
      self.settingSlider('design_slider_shadowinset_left', -100, 100);
      self.settingSlider('design_slider_shadowinset_opacity', 0.0, 1.0, 0.1);
      self.settingSlider('design_slider_shadowinset_size', 0, 100);
      self.settingSlider('design_slider_shadowinset_top', -100, 100);
      self.settingSlider('design_slider_text_shadow1_left', -100, 100);
      self.settingSlider('design_slider_text_shadow1_opacity', 0.0, 1.0, 0.1);
      self.settingSlider('design_slider_text_shadow1_size', 0, 100);
      self.settingSlider('design_slider_text_shadow1_top', -100, 100);
      self.settingSlider('design_slider_text_shadow2_left', -100, 100);
      self.settingSlider('design_slider_text_shadow2_opacity', 0.0, 1.0, 0.1);
      self.settingSlider('design_slider_text_shadow2_size', 0, 100);
      self.settingSlider('design_slider_text_shadow2_top', -100, 100);
      btnBgColor = $(".design_bg_color1,.design_bg_color2,.design_bg_color3,.design_bg_color4,.design_bg_color5,.design_border_color,.design_font_color", designConfigRoot);
      btnBgColor.each((function(_this) {
        return function(idx, e) {
          var className, colorValue;
          className = e.classList[0];
          colorValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(_this.id, className));
          return ColorPickerUtil.initColorPicker($(e), colorValue, function(a, b, d, e) {
            PageValue.setInstancePageValue(PageValue.Key.instanceDesign(_this.id, className), b);
            return self.applyColorChangeByPicker(className, b);
          });
        };
      })(this));
      btnShadowColor = $(".design_shadow_color,.design_shadowinset_color,.design_text_shadow1_color,.design_text_shadow2_color", designConfigRoot);
      btnShadowColor.each((function(_this) {
        return function(idx, e) {
          var className, colorValue;
          className = e.classList[0];
          colorValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(_this.id, className));
          return ColorPickerUtil.initColorPicker($(e), colorValue, function(a, b, d) {
            var value;
            value = d.r + "," + d.g + "," + d.b;
            PageValue.setInstancePageValue(PageValue.Key.instanceDesign(this.id, className), value);
            return self.applyColorChangeByPicker(className, value);
          });
        };
      })(this));
      btnGradientStep = $(".design_gradient_step", designConfigRoot);
      btnGradientStep.off('keyup mouseup');
      return btnGradientStep.on('keyup mouseup', function(e) {
        return self.applyGradientStepChange(e.currentTarget);
      }).each(function() {
        return self.applyGradientStepChange(this);
      });
    }
  },
  settingSlider: function(className, min, max, stepValue) {
    var defaultValue, designConfigRoot, meterElement, valueElement;
    if (stepValue == null) {
      stepValue = 0;
    }
    designConfigRoot = $('#' + this.getDesignConfigId());
    meterElement = $("." + className, designConfigRoot);
    valueElement = $("." + className + "_value", designConfigRoot);
    defaultValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(this.id, className + "_value"));
    valueElement.val(defaultValue);
    valueElement.html(defaultValue);
    try {
      meterElement.slider('destroy');
    } catch (_error) {

    }
    return meterElement.slider({
      min: min,
      max: max,
      step: stepValue,
      value: defaultValue,
      slide: (function(_this) {
        return function(event, ui) {
          var classNames, n;
          valueElement.val(ui.value);
          valueElement.html(ui.value);
          classNames = $(event.target).attr('class').split(' ');
          n = $.grep(classNames, function(s) {
            return s.indexOf('design_') >= 0;
          })[0];
          PageValue.setInstancePageValue(PageValue.Key.instanceDesign(_this.id, n + "_value"), ui.value);
          return _this.applyDesignStyleChange(n, ui.value);
        };
      })(this)
    });
  },
  settingGradientSliderByElement: function(element, values) {
    var handleElement;
    try {
      element.slider('destroy');
    } catch (_error) {

    }
    element.slider({
      min: 1,
      max: 99,
      values: values,
      slide: (function(_this) {
        return function(event, ui) {
          var classNames, index, n;
          index = $(ui.handle).index();
          classNames = $(event.target).attr('class').split(' ');
          n = $.grep(classNames, function(s) {
            return s.indexOf('design_') >= 0;
          })[0];
          PageValue.setInstancePageValue(PageValue.Key.instanceDesign(_this.id, n + "_value"), ui.value);
          return _this.applyGradientStyleChange(index, n, ui.value);
        };
      })(this)
    });
    handleElement = element.children('.ui-slider-handle');
    if (values === null) {
      return handleElement.hide();
    } else {
      return handleElement.show();
    }
  },
  settingGradientSlider: function(className, values) {
    var designConfigRoot, meterElement;
    designConfigRoot = $('#' + this.getDesignConfigId());
    meterElement = $('.' + className, designConfigRoot);
    return this.settingGradientSliderByElement(meterElement, values);
  },
  settingGradientDegSlider: function(className, min, max) {
    var defaultValue, designConfigRoot, meterElement, valueElement;
    designConfigRoot = $('#' + this.getDesignConfigId());
    meterElement = $('.' + className, designConfigRoot);
    valueElement = $('.' + className + '_value', designConfigRoot);
    defaultValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(this.id, className + "_value"));
    valueElement.val(defaultValue);
    valueElement.html(defaultValue);
    try {
      meterElement.slider('destroy');
    } catch (_error) {

    }
    return meterElement.slider({
      min: min,
      max: max,
      step: 45,
      value: defaultValue,
      slide: (function(_this) {
        return function(event, ui) {
          var classNames, n;
          valueElement.val(ui.value);
          valueElement.html(ui.value);
          classNames = $(event.target).attr('class').split(' ');
          n = $.grep(classNames, function(s) {
            return s.indexOf('design_') >= 0;
          })[0];
          PageValue.setInstancePageValue(PageValue.Key.instanceDesign(_this.id, n + "_value"), ui.value);
          return _this.applyGradientDegChange(n, ui.value);
        };
      })(this)
    });
  },
  changeGradientShow: function(targetElement) {
    var designConfigRoot, meterElement, value, values;
    designConfigRoot = $('#' + this.getDesignConfigId());
    value = parseInt(targetElement.value);
    if (value >= 2 && value <= 5) {
      meterElement = $(targetElement).siblings('.ui-slider:first');
      values = null;
      if (value === 3) {
        values = [50];
      } else if (value === 4) {
        values = [30, 70];
      } else if (value === 5) {
        values = [25, 50, 75];
      }
      this.settingGradientSliderByElement(meterElement, values);
      return this.switchGradientColorSelectorVisible(value, designConfigRoot);
    }
  },
  switchGradientColorSelectorVisible: function(gradientStepValue) {
    var designConfigRoot, element, i, j, results;
    designConfigRoot = $('#' + this.getDesignConfigId());
    results = [];
    for (i = j = 2; j <= 4; i = ++j) {
      element = $('.design_bg_color' + i, designConfigRoot);
      if (i > gradientStepValue - 1) {
        results.push(element.hide());
      } else {
        results.push(element.show());
      }
    }
    return results;
  }
};

//# sourceMappingURL=common_extend.js.map
