// Generated by CoffeeScript 1.9.2
var WorkTableCommonInclude;

WorkTableCommonInclude = {
  getDesignConfigId: function() {
    return this.constructor.DESIGN_CONFIG_ROOT_ID.replace('@id', this.id);
  },
  startDraw: function() {},
  drawAndMakeConfigsAndWritePageValue: function(show, callback) {
    if (show == null) {
      show = true;
    }
    if (callback == null) {
      callback = null;
    }
    return this.drawAndMakeConfigs(show, (function(_this) {
      return function() {
        var blank, distId, teNum;
        if (_this.constructor.defaultMethodName() != null) {
          blank = $('#timeline_events > .timeline_event.blank:first');
          teNum = blank.find('.te_num').val();
          distId = blank.find('.dist_id').val();
          EPVItem.writeDefaultToPageValue(_this, teNum, distId);
          Timeline.refreshAllTimeline();
        }
        if (callback != null) {
          return callback();
        }
      };
    })(this));
  },
  drawAndMakeConfigs: function(show, callback) {
    if (show == null) {
      show = true;
    }
    if (callback == null) {
      callback = null;
    }
    this.reDraw(show);
    return this.makeDesignConfig(callback);
  },
  showOptionMenu: function() {
    var sc;
    sc = $('.sidebar-config');
    sc.hide();
    $("." + Constant.DesignConfig.DESIGN_ROOT_CLASSNAME, sc).hide();
    $('#design-config').show();
    return $('#' + this.getDesignConfigId()).show();
  },
  setupDragAndResizeEvents: function() {
    var self;
    self = this;
    (function() {
      var contextSelector, menu;
      menu = [];
      contextSelector = ".context_base";
      menu.push({
        title: "Edit",
        cmd: "edit",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          return Sidebar.openItemEditConfig(event.target);
        }
      });
      menu.push({
        title: I18n.t('context_menu.copy'),
        cmd: "copy",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          WorktableCommon.copyItem();
          return WorktableCommon.setMainContainerContext();
        }
      });
      menu.push({
        title: I18n.t('context_menu.cut'),
        cmd: "cut",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          WorktableCommon.cutItem();
          return WorktableCommon.setMainContainerContext();
        }
      });
      menu.push({
        title: I18n.t('context_menu.float'),
        cmd: "float",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          var objId;
          objId = $(event.target).attr('id');
          WorktableCommon.floatItem(objId);
          LocalStorage.saveAllPageValues();
          return OperationHistory.add();
        }
      });
      menu.push({
        title: I18n.t('context_menu.rear'),
        cmd: "rear",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          var objId;
          objId = $(event.target).attr('id');
          WorktableCommon.rearItem(objId);
          LocalStorage.saveAllPageValues();
          return OperationHistory.add();
        }
      });
      menu.push({
        title: I18n.t('context_menu.delete'),
        cmd: "delete",
        uiIcon: "ui-icon-scissors",
        func: function(event, ui) {
          if (window.confirm(I18n.t('message.dialog.delete_item'))) {
            return WorktableCommon.removeItem(event.target);
          }
        }
      });
      return WorktableCommon.setupContextMenu(self.getJQueryElement(), contextSelector, menu);
    })();
    (function() {
      return self.getJQueryElement().mousedown(function(e) {
        if (e.which === 1) {
          e.stopPropagation();
          WorktableCommon.clearSelectedBorder();
          return WorktableCommon.setSelectedBorder(this, "edit");
        }
      });
    })();
    return (function() {
      self.getJQueryElement().draggable({
        containment: scrollInside,
        drag: function(event, ui) {
          if (self.drag != null) {
            return self.drag();
          }
        },
        stop: function(event, ui) {
          if (self.dragComplete != null) {
            return self.dragComplete();
          }
        }
      });
      return self.getJQueryElement().resizable({
        containment: scrollInside,
        resize: function(event, ui) {
          if (self.resize != null) {
            return self.resize();
          }
        },
        stop: function(event, ui) {
          if (self.resizeComplete != null) {
            return self.resizeComplete();
          }
        }
      });
    })();
  },
  makeDesignConfig: function(callback) {
    var designConfigRoot, self;
    if (callback == null) {
      callback = null;
    }
    self = this;
    designConfigRoot = $('#' + this.getDesignConfigId());
    if ((designConfigRoot == null) || designConfigRoot.length === 0) {
      return DesignConfig.getDesignConfig(this, function(data) {
        var html;
        designConfigRoot = $('#' + self.getDesignConfigId());
        if ((designConfigRoot == null) || designConfigRoot.length === 0) {
          html = $(data.html).attr('id', self.getDesignConfigId());
          $('#design-config').append(html);
        }
        if (callback != null) {
          return callback();
        }
      });
    }
  },
  drag: function() {
    var element;
    element = $('#' + this.id);
    this.updateItemPosition(element.position().left, element.position().top);
    if (window.debug) {
      return console.log("drag: itemSize: " + (JSON.stringify(this.itemSize)));
    }
  },
  resize: function() {
    var element;
    element = $('#' + this.id);
    return this.updateItemSize(element.width(), element.height());
  },
  dragComplete: function() {
    return this.saveObj();
  },
  resizeComplete: function() {
    return this.saveObj();
  },
  setupOptionMenu: function() {
    var designConfigRoot, h, name, w, x, y;
    designConfigRoot = $('#' + this.getDesignConfigId());
    if ((designConfigRoot == null) || designConfigRoot.length === 0) {
      this.makeDesignConfig();
      designConfigRoot = $('#' + this.getDesignConfigId());
    }
    name = $('.item-name', designConfigRoot);
    name.val(this.name);
    name.off('change').on('change', (function(_this) {
      return function() {
        _this.name = $(_this).val();
        return _this.setItemPropToPageValue('name', _this.name);
      };
    })(this));
    x = this.getJQueryElement().position().left;
    y = this.getJQueryElement().position().top;
    w = this.getJQueryElement().width();
    h = this.getJQueryElement().height();
    $('.item_position_x:first', designConfigRoot).val(x);
    $('.item_position_y:first', designConfigRoot).val(y);
    $('.item_width:first', designConfigRoot).val(w);
    $('.item_height:first', designConfigRoot).val(h);
    $('.item_position_x:first, .item_position_y:first, .item_width:first, .item_height:first', designConfigRoot).off('change').on('change', (function(_this) {
      return function() {
        var itemSize;
        itemSize = {
          x: parseInt($('.item_position_x:first', designConfigRoot).val()),
          y: parseInt($('.item_position_y:first', designConfigRoot).val()),
          w: parseInt($('.item_width:first', designConfigRoot).val()),
          h: parseInt($('.item_height:first', designConfigRoot).val())
        };
        return _this.updatePositionAndItemSize(itemSize);
      };
    })(this));
    if ((this.constructor.actionProperties.designConfig != null) && this.constructor.actionProperties.designConfig) {
      return this.setupDesignToolOptionMenu();
    }
  },
  settingDesignSlider: function(className, min, max, stepValue) {
    var defaultValue, designConfigRoot, meterElement, valueElement;
    if (stepValue == null) {
      stepValue = 0;
    }
    designConfigRoot = $('#' + this.getDesignConfigId());
    meterElement = $("." + className, designConfigRoot);
    valueElement = meterElement.prev('input:first');
    defaultValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(this.id, className + "_value"));
    valueElement.val(defaultValue);
    valueElement.html(defaultValue);
    try {
      meterElement.slider('destroy');
    } catch (_error) {

    }
    return meterElement.slider({
      min: min,
      max: max,
      step: stepValue,
      value: defaultValue,
      slide: (function(_this) {
        return function(event, ui) {
          var classNames, n;
          valueElement.val(ui.value);
          valueElement.html(ui.value);
          classNames = $(event.target).attr('class').split(' ');
          n = $.grep(classNames, function(s) {
            return s.indexOf('design_') >= 0;
          })[0];
          _this.designs.values[n + "_value"] = ui.value;
          return _this.applyDesignStyleChange(n, ui.value);
        };
      })(this)
    });
  },
  settingGradientSliderByElement: function(element, values) {
    var handleElement;
    try {
      element.slider('destroy');
    } catch (_error) {

    }
    element.slider({
      min: 1,
      max: 99,
      values: values,
      slide: (function(_this) {
        return function(event, ui) {
          var classNames, index, n;
          index = $(ui.handle).index();
          classNames = $(event.target).attr('class').split(' ');
          n = $.grep(classNames, function(s) {
            return s.indexOf('design_') >= 0;
          })[0];
          _this.designs.values["design_bg_color" + (index + 2) + "_position_value"] = ("0" + ui.value).slice(-2);
          return _this.applyGradientStyleChange(index, n, ui.value);
        };
      })(this)
    });
    handleElement = element.children('.ui-slider-handle');
    if (values === null) {
      return handleElement.hide();
    } else {
      return handleElement.show();
    }
  },
  settingGradientSlider: function(className, values) {
    var designConfigRoot, meterElement;
    designConfigRoot = $('#' + this.getDesignConfigId());
    meterElement = $("." + className, designConfigRoot);
    return this.settingGradientSliderByElement(meterElement, values);
  },
  settingGradientDegSlider: function(className, min, max, each45Degrees) {
    var defaultValue, designConfigRoot, meterElement, step, valueElement;
    if (each45Degrees == null) {
      each45Degrees = true;
    }
    designConfigRoot = $('#' + this.getDesignConfigId());
    meterElement = $('.' + className, designConfigRoot);
    valueElement = $('.' + className + '_value', designConfigRoot);
    defaultValue = PageValue.getInstancePageValue(PageValue.Key.instanceDesign(this.id, className + "_value"));
    valueElement.val(defaultValue);
    valueElement.html(defaultValue);
    step = 1;
    if (each45Degrees) {
      step = 45;
    }
    try {
      meterElement.slider('destroy');
    } catch (_error) {

    }
    return meterElement.slider({
      min: min,
      max: max,
      step: step,
      value: defaultValue,
      slide: (function(_this) {
        return function(event, ui) {
          var classNames, n;
          valueElement.val(ui.value);
          valueElement.html(ui.value);
          classNames = $(event.target).attr('class').split(' ');
          n = $.grep(classNames, function(s) {
            return s.indexOf('design_') >= 0;
          })[0];
          _this.designs.values[n + "_value"] = ui.value;
          return _this.applyGradientDegChange(n, ui.value);
        };
      })(this)
    });
  },
  changeGradientShow: function(targetElement) {
    var designConfigRoot, meterElement, value, values;
    designConfigRoot = $('#' + this.getDesignConfigId());
    value = parseInt(targetElement.value);
    if (value >= 2 && value <= 5) {
      meterElement = $(targetElement).siblings('.ui-slider:first');
      values = null;
      if (value === 3) {
        values = [50];
      } else if (value === 4) {
        values = [30, 70];
      } else if (value === 5) {
        values = [25, 50, 75];
      }
      this.settingGradientSliderByElement(meterElement, values);
      return this.switchGradientColorSelectorVisible(value, designConfigRoot);
    }
  },
  switchGradientColorSelectorVisible: function(gradientStepValue) {
    var designConfigRoot, element, i, j, results;
    designConfigRoot = $('#' + this.getDesignConfigId());
    results = [];
    for (i = j = 2; j <= 4; i = ++j) {
      element = $('.design_bg_color' + i, designConfigRoot);
      if (i > gradientStepValue - 1) {
        results.push(element.hide());
      } else {
        results.push(element.show());
      }
    }
    return results;
  },
  saveDesign: function() {
    if (this.saveDesignReflectTimer != null) {
      clearTimeout(this.saveDesignReflectTimer);
      this.saveDesignReflectTimer = null;
    }
    return this.saveDesignReflectTimer = setTimeout((function(_this) {
      return function() {
        _this.setItemAllPropToPageValue();
        LocalStorage.saveAllPageValues();
        return _this.saveDesignReflectTimer = setTimeout(function() {
          return OperationHistory.add();
        }, 1000);
      };
    })(this), 500);
  },
  settingModifiableVarSlider: function(configRoot, varName, min, max, stepValue) {
    var defaultValue, meterElement, valueElement;
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 100;
    }
    if (stepValue == null) {
      stepValue = 0;
    }
    meterElement = $("." + varName + "_meter", configRoot);
    valueElement = meterElement.prev('input:first');
    defaultValue = PageValue.getInstancePageValue(PageValue.Key.instanceValue(this.id))[varName];
    valueElement.val(defaultValue);
    valueElement.html(defaultValue);
    try {
      meterElement.slider('destroy');
    } catch (_error) {

    }
    return meterElement.slider({
      min: min,
      max: max,
      step: stepValue,
      value: defaultValue,
      slide: (function(_this) {
        return function(event, ui) {
          valueElement.val(ui.value);
          valueElement.html(ui.value);
          _this[varName] = ui.value;
          return _this.applyDesignChange();
        };
      })(this)
    });
  },
  settingModifiableString: function(configRoot, varName) {
    var defaultValue;
    defaultValue = PageValue.getInstancePageValue(PageValue.Key.instanceValue(this.id))[varName];
    $("." + varName + "_text", configRoot).val(defaultValue);
    return $("." + varName + "_text", configRoot).off('change').on('change', (function(_this) {
      return function() {
        _this[varName] = $(_this).val();
        return _this.applyDesignChange();
      };
    })(this));
  },
  settingModifiableColor: function(configRoot, varName) {
    var defaultValue, emt;
    emt = $("." + varName + "_color", configRoot);
    defaultValue = PageValue.getInstancePageValue(PageValue.Key.instanceValue(this.id))[varName];
    return ColorPickerUtil.initColorPicker($(emt), defaultValue, (function(_this) {
      return function(a, b, d, e) {
        _this[varName] = "#" + b;
        return _this.applyDesignChange();
      };
    })(this));
  }
};

//# sourceMappingURL=common_extend.js.map
