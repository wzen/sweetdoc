// Generated by CoffeeScript 1.9.2
var WorkTableCssItemExtend;

WorkTableCssItemExtend = {
  makeDesignConfig: function() {
    var cssConfig;
    this.designConfigRoot = $('#' + this.getDesignConfigId());
    if ((this.designConfigRoot == null) || this.designConfigRoot.length === 0) {
      this.designConfigRoot = $('#design-config .design_temp').clone(true).attr('id', this.getDesignConfigId());
      this.designConfigRoot.removeClass('design_temp');
      cssConfig = this.designConfigRoot.find('.css-config');
      this.designConfigRoot.find('.css-config').css('display', '');
      this.designConfigRoot.find('.canvas-config').remove();
      return $('#design-config').append(this.designConfigRoot);
    }
  },
  drag: function() {
    var element;
    element = $('#' + this.id);
    this.itemSize.x = element.position().left;
    return this.itemSize.y = element.position().top;
  },
  dragComplete: function() {
    return this.saveObj();
  },
  resize: function() {
    var element;
    element = $('#' + this.id);
    this.itemSize.w = element.width();
    return this.itemSize.h = element.height();
  },
  resizeComplete: function() {
    return this.saveObj();
  },
  draw: function(cood) {
    if (this.itemSize !== null) {
      this.restoreDrawingSurface(this.itemSize);
    }
    this.itemSize = {
      x: null,
      y: null,
      w: null,
      h: null
    };
    this.itemSize.w = Math.abs(cood.x - this.moveLoc.x);
    this.itemSize.h = Math.abs(cood.y - this.moveLoc.y);
    if (cood.x > this.moveLoc.x) {
      this.itemSize.x = this.moveLoc.x;
    } else {
      this.itemSize.x = cood.x;
    }
    if (cood.y > this.moveLoc.y) {
      this.itemSize.y = this.moveLoc.y;
    } else {
      this.itemSize.y = cood.y;
    }
    return drawingContext.strokeRect(this.itemSize.x, this.itemSize.y, this.itemSize.w, this.itemSize.h);
  }
};

//# sourceMappingURL=cssitem_extend.js.map
