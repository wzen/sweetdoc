// Generated by CoffeeScript 1.9.2

/* サイドバー挙動 ここから */
var changeGradientShow, closeSidebar, isClosedConfigSidebar, isOpenedConfigSidebar, openConfigSidebar, settingGradientDegSlider, settingGradientSlider, settingGradientSliderByElement, settingSlider, setupContextMenu, switchGradientColorSelectorVisible, switchSidebarConfig;

openConfigSidebar = function(target, selectedBorderType) {
  var main;
  if (target == null) {
    target = null;
  }
  if (selectedBorderType == null) {
    selectedBorderType = "edit";
  }
  main = $('#main');
  if (!isOpenedConfigSidebar()) {
    main.switchClass('col-md-12', 'col-md-9', 500, 'swing', function() {
      return $('#sidebar').fadeIn('1000');
    });
    if (target !== null) {
      return focusToTargetWhenSidebarOpen(target, selectedBorderType);
    }
  }
};

closeSidebar = function(callback) {
  var main;
  if (callback == null) {
    callback = null;
  }
  main = $('#main');
  clearSelectedBorder();
  if (!isClosedConfigSidebar()) {
    return $('#sidebar').fadeOut('1000', function() {
      var s;
      s = getPageValue(Constant.PageValueKey.CONFIG_OPENED_SCROLL);
      if (s != null) {
        scrollContents.animate({
          scrollTop: s.top,
          scrollLeft: s.left
        }, 500, null, function() {
          return removePageValue(Constant.PageValueKey.CONFIG_OPENED_SCROLL);
        });
      }
      main.switchClass('col-md-9', 'col-md-12', 500, 'swing', function() {
        if (callback != null) {
          return callback();
        }
      });
      return $('.sidebar-config').css('display', 'none');
    });
  }
};

isOpenedConfigSidebar = function() {
  return $('#main').hasClass('col-md-9');
};

isClosedConfigSidebar = function() {
  return $('#main').hasClass('col-md-12');
};

switchSidebarConfig = function(configType, item) {
  var animation;
  if (item == null) {
    item = null;
  }
  animation = isOpenedConfigSidebar();
  $('.sidebar-config').css('display', 'none');
  if (configType === "css" && (item != null) && (item.cssConfig != null)) {
    if (animation) {
      return item.cssConfig.show();
    } else {
      return item.cssConfig.css('display', '');
    }
  } else if (configType === "canvas" && (item != null) && (item.canvasConfig != null)) {
    if (animation) {
      return item.canvasConfig.show();
    } else {
      return item.canvasConfig.css('display', '');
    }
  } else if (configType === "timeline") {
    if (animation) {
      return $('#timeline-config').show();
    } else {
      return $('#timeline-config').css('display', '');
    }
  }
};


/* サイドバー挙動 ここまで */

setupContextMenu = function(element, contextSelector, menu) {
  var initOptionMenu;
  initOptionMenu = function(event) {
    var emt, obj;
    emt = $(event.target);
    obj = getObjFromObjectListByElementId(emt.attr('id'));
    if ((obj != null) && (obj.setupOptionMenu != null)) {
      obj.setupOptionMenu();
    }
    if ((obj != null) && (obj.showOptionMenu != null)) {
      return obj.showOptionMenu();
    }
  };
  return element.contextmenu({
    delegate: contextSelector,
    preventContextMenuForPopup: true,
    preventSelect: true,
    menu: menu,
    select: function(event, ui) {
      var $target;
      $target = event.target;
      switch (ui.cmd) {
        case "delete":
          $target.remove();
          return;
        case "cut":
          break;
        default:
          return;
      }
      initColorPickerValue();
      initOptionMenu(event);
      openConfigSidebar($target);
      return changeMode(Constant.Mode.OPTION);
    },
    beforeOpen: function(event, ui) {
      return ui.menu.zIndex($(event.target).zIndex() + 1);
    }
  });
};


/* スライダーの作成 */

settingSlider = function(className, min, max, cssCode, cssStyle, root, stepValue) {
  var d, defaultValue, meterElement, valueElement;
  if (stepValue == null) {
    stepValue = 0;
  }
  meterElement = $('.' + className, root);
  valueElement = $('.' + className + '-value', root);
  d = $('.' + className + '-value', cssCode)[0];
  defaultValue = $(d).html();
  valueElement.val(defaultValue);
  valueElement.html(defaultValue);
  try {
    meterElement.slider('destroy');
  } catch (_error) {

  }
  return meterElement.slider({
    min: min,
    max: max,
    step: stepValue,
    value: defaultValue,
    slide: function(event, ui) {
      valueElement.val(ui.value);
      valueElement.html(ui.value);
      return cssStyle.text(cssCode.text());
    }
  });
};

settingGradientSliderByElement = function(element, values, cssCode, cssStyle) {
  var handleElement, id;
  id = element.attr("id");
  try {
    element.slider('destroy');
  } catch (_error) {

  }
  element.slider({
    min: 1,
    max: 99,
    values: values,
    slide: function(event, ui) {
      var index, position;
      index = $(ui.handle).index();
      position = $('.btn-bg-color' + (index + 2) + '-position', cssCode);
      position.html(("0" + ui.value).slice(-2));
      return cssStyle.text(cssCode.text());
    }
  });
  handleElement = element.children('.ui-slider-handle');
  if (values === null) {
    return handleElement.css('display', 'none');
  } else {
    return handleElement.css('display', '');
  }
};

settingGradientSlider = function(className, values, cssCode, cssStyle, root) {
  var meterElement;
  meterElement = $('.' + className, root);
  return settingGradientSliderByElement(meterElement, values, cssCode, cssStyle);
};

settingGradientDegSlider = function(className, min, max, cssCode, cssStyle, root) {
  var d, defaultValue, meterElement, valueElement, webkitDeg, webkitValueElement;
  meterElement = $('.' + className, root);
  valueElement = $('.' + className + '-value', root);
  webkitValueElement = $('.' + className + '-value-webkit', root);
  d = $('.' + className + '-value', cssCode)[0];
  defaultValue = $(d).html();
  webkitDeg = {
    0: 'left top, left bottom',
    45: 'right top, left bottom',
    90: 'right top, left top',
    135: 'right bottom, left top',
    180: 'left bottom, left top',
    225: 'left bottom, right top',
    270: 'left top, right top',
    315: 'left top, right bottom'
  };
  valueElement.val(defaultValue);
  valueElement.html(defaultValue);
  webkitValueElement.html(webkitDeg[defaultValue]);
  try {
    meterElement.slider('destroy');
  } catch (_error) {

  }
  return meterElement.slider({
    min: min,
    max: max,
    step: 45,
    value: defaultValue,
    slide: function(event, ui) {
      valueElement.val(ui.value);
      valueElement.html(ui.value);
      webkitValueElement.html(webkitDeg[ui.value]);
      return cssStyle.text(cssCode.text());
    }
  });
};


/* スライダーの作成 ここまで */


/* グラデーション */

changeGradientShow = function(targetElement, cssCode, cssStyle, cssConfig) {
  var meterElement, value, values;
  value = parseInt(targetElement.value);
  if (value >= 2 && value <= 5) {
    meterElement = $(targetElement).siblings('.ui-slider:first');
    values = null;
    if (value === 3) {
      values = [50];
    } else if (value === 4) {
      values = [30, 70];
    } else if (value === 5) {
      values = [25, 50, 75];
    }
    settingGradientSliderByElement(meterElement, values, cssCode, cssStyle);
    return switchGradientColorSelectorVisible(value, cssConfig);
  }
};

switchGradientColorSelectorVisible = function(gradientStepValue, cssConfig) {
  var element, i, j, results;
  results = [];
  for (i = j = 2; j <= 4; i = ++j) {
    element = $('.btn-bg-color' + i, cssConfig);
    if (i > gradientStepValue - 1) {
      results.push(element.css('display', 'none'));
    } else {
      results.push(element.css('display', ''));
    }
  }
  return results;
};


/* グラデーション ここまで */

//# sourceMappingURL=sidebar_ui.js.map
