// Generated by CoffeeScript 1.9.2
var checkBlowserEnvironment, focusToTarget, generateId, getPageValue, makeClone, removePageValue, sanitaizeDecode, sanitaizeEncode, setPageValue;

checkBlowserEnvironment = function() {
  var c, e;
  if (!localStorage) {
    return false;
  } else {
    try {
      localStorage.setItem('test', 'test');
      c = localStorage.getItem('test');
      localStorage.removeItem('test');
    } catch (_error) {
      e = _error;
      return false;
    }
  }
  if (!File) {
    return false;
  }
  return true;
};

generateId = function() {
  var BaseString, RandomString, i, j, n, numb, ref;
  numb = 10;
  RandomString = '';
  BaseString = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  n = 62;
  for (i = j = 0, ref = numb; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    RandomString += BaseString.charAt(Math.floor(Math.random() * n));
  }
  return RandomString;
};

makeClone = function(obj) {
  var flags, key, newInstance;
  if ((obj == null) || typeof obj !== 'object') {
    return obj;
  }
  if (obj instanceof Date) {
    return new Date(obj.getTime());
  }
  if (obj instanceof RegExp) {
    flags = '';
    if (obj.global != null) {
      flags += 'g';
    }
    if (obj.ignoreCase != null) {
      flags += 'i';
    }
    if (obj.multiline != null) {
      flags += 'm';
    }
    if (obj.sticky != null) {
      flags += 'y';
    }
    return new RegExp(obj.source, flags);
  }
  newInstance = new obj.constructor();
  for (key in obj) {
    newInstance[key] = clone(obj[key]);
  }
  return newInstance;
};

focusToTarget = function(target) {
  var scrollLeft, scrollTop, targetMiddle;
  targetMiddle = {
    top: $(target).offset().top + $(target).height() * 0.5,
    left: $(target).offset().left + $(target).width() * 0.5
  };
  scrollTop = targetMiddle.top - scrollContents.height() * 0.5;
  if (scrollTop < 0) {
    scrollTop = 0;
  } else if (scrollTop > scrollContents.height() * 0.25) {
    scrollTop = scrollContents.height() * 0.25;
  }
  scrollLeft = targetMiddle.left - scrollContents.width() * 0.75 * 0.5;
  if (scrollLeft < 0) {
    scrollLeft = 0;
  } else if (scrollLeft > scrollContents.width() * 0.25) {
    scrollLeft = scrollContents.width() * 0.25;
  }
  return scrollContents.animate({
    scrollTop: scrollContents.scrollTop() + scrollTop,
    scrollLeft: scrollContents.scrollLeft() + scrollLeft
  }, 500);
};

getPageValue = function(key, withRemove) {
  var f, keys, root, takeValue, value;
  if (withRemove == null) {
    withRemove = false;
  }
  f = this;
  takeValue = function(element) {
    var c, ret;
    ret = [];
    c = $(element).children();
    if ((c != null) && c.length > 0) {
      $(c).each(function(e) {
        var v;
        v = null;
        if (this.tagName === "INPUT") {
          v = sanitaizeDecode($(this).val());
        } else {
          v = takeValue.call(f, this);
        }
        return ret[this.classList[0]] = v;
      });
    }
    return ret;
  };
  value = null;
  root = $('#page_values');
  keys = key.split(Constant.PAGE_VALUES_SEPERATOR);
  keys.forEach(function(k, index) {
    root = $("." + k, root);
    if ((root == null) || root.length === 0) {
      value = null;
      return;
    }
    if (keys.length - 1 === index) {
      if (root[0].tagName === "INPUT") {
        value = sanitaizeDecode(root.val());
      } else {
        value = takeValue.call(f, root);
      }
      if (withRemove) {
        return root.remove();
      }
    }
  });
  return value;
};

setPageValue = function(key, value, isCache) {
  var cacheClassName, f, keys, makeElementStr, root;
  if (isCache == null) {
    isCache = false;
  }
  f = this;
  makeElementStr = function(ky, val) {
    var k, ret, v;
    if (jQuery.type(val) !== "object") {
      val = sanitaizeEncode(val);
      return "<input type='hidden' class=" + ky + " value='" + val + "' />";
    }
    ret = "";
    for (k in val) {
      v = val[k];
      ret += makeElementStr.call(f, k, v);
    }
    return "<div class=" + ky + ">" + ret + "</div>";
  };
  cacheClassName = 'cache';
  root = $('#page_values');
  keys = key.split(Constant.PAGE_VALUES_SEPERATOR);
  return keys.forEach(function(k, index) {
    var element, parent;
    parent = root;
    element = '';
    if (keys.length - 1 > index) {
      element = 'div';
    } else {
      if (jQuery.type(value) === "object") {
        element = 'div';
      } else {
        element = 'input';
      }
    }
    root = $(element + "." + k, parent);
    if (keys.length - 1 > index) {
      if ((root == null) || root.length === 0) {
        return root = jQuery("<div class=" + k + "></div>").appendTo(parent);
      }
    } else {
      if ((root != null) && root.length > 0) {
        root.remove();
      }
      root = jQuery(makeElementStr.call(f, k, value)).appendTo(parent);
      if (isCache) {
        return root.addClass(cacheClassName);
      }
    }
  });
};

removePageValue = function(key) {
  return getPageValue(key, true);
};

sanitaizeEncode = function(str) {
  if ((str != null) && typeof str === "string") {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
  } else {
    return str;
  }
};

sanitaizeDecode = function(str) {
  if ((str != null) && typeof str === "string") {
    return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&amp;/g, '&');
  } else {
    return str;
  }
};

(function() {
  window.loadedItemTypeList = [];
  return window.loadedClassList = [];
})();

$(function() {
  window.drawingCanvas = document.getElementById('canvas_container');
  return window.drawingContext = drawingCanvas.getContext('2d');
});

//# sourceMappingURL=common.js.map
