// Generated by CoffeeScript 1.9.2
var Common;

Common = (function() {
  function Common() {}

  Common.checkBlowserEnvironment = function() {
    var c, e;
    if (!localStorage) {
      return false;
    } else {
      try {
        localStorage.setItem('test', 'test');
        c = localStorage.getItem('test');
        localStorage.removeItem('test');
      } catch (_error) {
        e = _error;
        return false;
      }
    }
    if (!File) {
      return false;
    }
    return true;
  };

  Common.typeOfValue = (function() {
    var classToType, j, len, name, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (j = 0, len = ref.length; j < len; j++) {
      name = ref[j];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  Common.generateId = function() {
    var BaseString, RandomString, i, j, n, numb, ref;
    numb = 10;
    RandomString = '';
    BaseString = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    n = 62;
    for (i = j = 0, ref = numb; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      RandomString += BaseString.charAt(Math.floor(Math.random() * n));
    }
    return RandomString;
  };

  Common.makeClone = function(obj) {
    var flags, key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = clone(obj[key]);
    }
    return newInstance;
  };

  Common.focusToTarget = function(target) {
    var scrollLeft, scrollTop, targetMiddle;
    targetMiddle = {
      top: $(target).offset().top + $(target).height() * 0.5,
      left: $(target).offset().left + $(target).width() * 0.5
    };
    scrollTop = targetMiddle.top - scrollContents.height() * 0.5;
    if (scrollTop < 0) {
      scrollTop = 0;
    } else if (scrollTop > scrollContents.height() * 0.25) {
      scrollTop = scrollContents.height() * 0.25;
    }
    scrollLeft = targetMiddle.left - scrollContents.width() * 0.75 * 0.5;
    if (scrollLeft < 0) {
      scrollLeft = 0;
    } else if (scrollLeft > scrollContents.width() * 0.25) {
      scrollLeft = scrollContents.width() * 0.25;
    }
    return scrollContents.animate({
      scrollTop: scrollContents.scrollTop() + scrollTop,
      scrollLeft: scrollContents.scrollLeft() + scrollLeft
    }, 500);
  };

  Common.sanitaizeEncode = function(str) {
    if ((str != null) && typeof str === "string") {
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    } else {
      return str;
    }
  };

  Common.sanitaizeDecode = function(str) {
    if ((str != null) && typeof str === "string") {
      return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&amp;/g, '&');
    } else {
      return str;
    }
  };

  Common.getClassFromMap = function(isCommon, id) {
    var c, i;
    if (window.classMap == null) {
      window.classMap = {};
    }
    c = isCommon;
    i = id;
    if (typeof c === "boolean") {
      if (c) {
        c = "1";
      } else {
        c = "0";
      }
    }
    if (typeof i !== "string") {
      i = String(id);
    }
    if ((window.classMap[c] == null) || (window.classMap[c][i] == null)) {
      return null;
    }
    return window.classMap[c][i];
  };

  Common.setClassToMap = function(isCommon, id, value) {
    var c, i;
    c = isCommon;
    i = id;
    if (typeof c === "boolean") {
      if (c) {
        c = "1";
      } else {
        c = "0";
      }
    }
    if (typeof i !== "string") {
      i = String(id);
    }
    if (window.classMap == null) {
      window.classMap = {};
    }
    if (window.classMap[c] == null) {
      window.classMap[c] = {};
    }
    return window.classMap[c][i] = value;
  };

  Common.getInstanceFromMap = function(timelineEvent) {
    var classMapId, id, isCommonEvent;
    isCommonEvent = timelineEvent[TimelineEvent.PageValueKey.IS_COMMON_EVENT];
    id = isCommonEvent ? timelineEvent[TimelineEvent.PageValueKey.COMMON_EVENT_ID] : timelineEvent[TimelineEvent.PageValueKey.ID];
    classMapId = isCommonEvent ? timelineEvent[TimelineEvent.PageValueKey.COMMON_EVENT_ID] : timelineEvent[TimelineEvent.PageValueKey.ITEM_ID];
    if (typeof isCommonEvent === "boolean") {
      if (isCommonEvent) {
        isCommonEvent = "1";
      } else {
        isCommonEvent = "0";
      }
    }
    if (typeof id !== "string") {
      id = String(id);
    }
    Common.setInstanceFromMap(isCommonEvent, id, classMapId);
    return window.instanceMap[isCommonEvent][id];
  };

  Common.setInstanceFromMap = function(isCommonEvent, id, itemId) {
    if (itemId == null) {
      itemId = id;
    }
    if (window.instanceMap == null) {
      window.instanceMap = {};
    }
    if (typeof isCommonEvent === "boolean") {
      if (isCommonEvent) {
        isCommonEvent = "1";
      } else {
        isCommonEvent = "0";
      }
    }
    if (typeof id !== "string") {
      id = String(id);
    }
    if (window.instanceMap[isCommonEvent] == null) {
      !(window.instanceMap[isCommonEvent] = {});
    }
    if (window.instanceMap[isCommonEvent][id] == null) {
      return window.instanceMap[isCommonEvent][id] = new (Common.getClassFromMap(isCommonEvent, itemId))();
    }
  };

  Common.getCreatedItemObject = function() {
    var k, ret, v;
    ret = {};
    for (k in createdObject) {
      v = createdObject[k];
      if (v instanceof CommonEventBase === false) {
        ret[k] = v;
      }
    }
    return ret;
  };

  Common.removeAllItem = function() {
    var k, ref, results, v;
    ref = this.getCreatedItemObject();
    results = [];
    for (k in ref) {
      v = ref[k];
      if (v.getJQueryElement != null) {
        results.push(v.getJQueryElement().remove());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Common.removeAllItemAndEvent = function() {
    this.removeAllItem();
    return PageValue.removeAllItemAndTimelineEventPageValue();
  };

  return Common;

})();

(function() {
  window.loadedItemTypeList = [];
  window.loadedClassList = {};
  return window.classMap = {};
})();

$(function() {
  window.drawingCanvas = document.getElementById('canvas_container');
  return window.drawingContext = drawingCanvas.getContext('2d');
});

//# sourceMappingURL=common.js.map
