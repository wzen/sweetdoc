// Generated by CoffeeScript 1.9.2
var Common, _getPageValue, _setPageValue, clearItemAndEvent, getClassFromMap, getCreatedItemObject, getInstanceFromMap, getPageValue, getSettingPageValue, getTimelinePageValue, getTimelinePageValueSortedListByNum, removePageValue, sanitaizeDecode, sanitaizeEncode, setClassToMap, setInstanceFromMap, setPageValue, setSettingPageValue, setTimelinePageValue;

Common = (function() {
  function Common() {}

  Common.checkBlowserEnvironment = function() {
    var c, e;
    if (!localStorage) {
      return false;
    } else {
      try {
        localStorage.setItem('test', 'test');
        c = localStorage.getItem('test');
        localStorage.removeItem('test');
      } catch (_error) {
        e = _error;
        return false;
      }
    }
    if (!File) {
      return false;
    }
    return true;
  };

  Common.typeOfValue = (function() {
    var classToType, j, len, name, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (j = 0, len = ref.length; j < len; j++) {
      name = ref[j];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  Common.generateId = function() {
    var BaseString, RandomString, i, j, n, numb, ref;
    numb = 10;
    RandomString = '';
    BaseString = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    n = 62;
    for (i = j = 0, ref = numb; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      RandomString += BaseString.charAt(Math.floor(Math.random() * n));
    }
    return RandomString;
  };

  Common.makeClone = function(obj) {
    var flags, key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = clone(obj[key]);
    }
    return newInstance;
  };

  Common.focusToTarget = function(target) {
    var scrollLeft, scrollTop, targetMiddle;
    targetMiddle = {
      top: $(target).offset().top + $(target).height() * 0.5,
      left: $(target).offset().left + $(target).width() * 0.5
    };
    scrollTop = targetMiddle.top - scrollContents.height() * 0.5;
    if (scrollTop < 0) {
      scrollTop = 0;
    } else if (scrollTop > scrollContents.height() * 0.25) {
      scrollTop = scrollContents.height() * 0.25;
    }
    scrollLeft = targetMiddle.left - scrollContents.width() * 0.75 * 0.5;
    if (scrollLeft < 0) {
      scrollLeft = 0;
    } else if (scrollLeft > scrollContents.width() * 0.25) {
      scrollLeft = scrollContents.width() * 0.25;
    }
    return scrollContents.animate({
      scrollTop: scrollContents.scrollTop() + scrollTop,
      scrollLeft: scrollContents.scrollLeft() + scrollLeft
    }, 500);
  };

  return Common;

})();

getPageValue = function(key, withRemove) {
  if (withRemove == null) {
    withRemove = false;
  }
  return _getPageValue(key, withRemove, Constant.PageValueKey.PV_ROOT);
};

getTimelinePageValue = function(key) {
  return _getPageValue(key, false, Constant.PageValueKey.TE_ROOT);
};

getSettingPageValue = function(key) {
  return _getPageValue(key, false, Setting.PageValueKey.ROOT);
};

_getPageValue = function(key, withRemove, rootId) {
  var f, keys, root, takeValue, value;
  f = this;
  takeValue = function(element) {
    var c, ret;
    ret = null;
    c = $(element).children();
    if ((c != null) && c.length > 0) {
      $(c).each(function(e) {
        var k, v;
        k = this.classList[0];
        if (ret == null) {
          if (jQuery.isNumeric(k)) {
            ret = [];
          } else {
            ret = {};
          }
        }
        v = null;
        if (this.tagName === "INPUT") {
          v = sanitaizeDecode($(this).val());
          if (jQuery.isNumeric(v)) {
            v = Number(v);
          } else if (v === "true" || v === "false") {
            v = v === "true" ? true : false;
          }
        } else {
          v = takeValue.call(f, this);
        }
        if (jQuery.type(ret) === "array" && jQuery.isNumeric(k)) {
          k = Number(k);
        }
        ret[k] = v;
        return true;
      });
      return ret;
    } else {
      return null;
    }
  };
  value = null;
  root = $("#" + rootId);
  keys = key.split(Constant.PageValueKey.PAGE_VALUES_SEPERATOR);
  keys.forEach(function(k, index) {
    root = $("." + k, root);
    if ((root == null) || root.length === 0) {
      value = null;
      return;
    }
    if (keys.length - 1 === index) {
      if (root[0].tagName === "INPUT") {
        value = sanitaizeDecode(root.val());
        if (jQuery.isNumeric(value)) {
          value = Number(value);
        }
      } else {
        value = takeValue.call(f, root);
      }
      if (withRemove) {
        return root.remove();
      }
    }
  });
  return value;
};

setPageValue = function(key, value, isCache) {
  if (isCache == null) {
    isCache = false;
  }
  return _setPageValue(key, value, isCache, Constant.PageValueKey.PV_ROOT, false);
};

setTimelinePageValue = function(key, value) {
  return _setPageValue(key, value, false, Constant.PageValueKey.TE_ROOT, true);
};

setSettingPageValue = function(key, value, giveName) {
  if (giveName == null) {
    giveName = false;
  }
  return _setPageValue(key, value, false, Setting.PageValueKey.ROOT, giveName);
};

_setPageValue = function(key, value, isCache, rootId, giveName) {
  var cacheClassName, f, keys, makeElementStr, parentClassName, root;
  f = this;
  makeElementStr = function(ky, val, kyName) {
    var k, name, ret, v;
    if (val === null || val === "null") {
      return '';
    }
    kyName += "[" + ky + "]";
    if (jQuery.type(val) !== "object" && jQuery.type(val) !== "array") {
      val = sanitaizeEncode(val);
      name = "";
      if (giveName) {
        name = "name = " + kyName;
      }
      if (ky === 'w') {
        console.log(val);
      }
      return "<input type='hidden' class='" + ky + "' value='" + val + "' " + name + " />";
    }
    ret = "";
    for (k in val) {
      v = val[k];
      ret += makeElementStr.call(f, k, v, kyName);
    }
    return "<div class=" + ky + ">" + ret + "</div>";
  };
  cacheClassName = 'cache';
  root = $("#" + rootId);
  parentClassName = null;
  keys = key.split(Constant.PageValueKey.PAGE_VALUES_SEPERATOR);
  return keys.forEach(function(k, index) {
    var element, parent;
    parent = root;
    element = '';
    if (keys.length - 1 > index) {
      element = 'div';
    } else {
      if (jQuery.type(value) === "object") {
        element = 'div';
      } else {
        element = 'input';
      }
    }
    root = $(element + "." + k, parent);
    if (keys.length - 1 > index) {
      if ((root == null) || root.length === 0) {
        root = jQuery("<div class=" + k + "></div>").appendTo(parent);
      }
      if (parentClassName === null) {
        return parentClassName = k;
      } else {
        return parentClassName += "[" + k + "]";
      }
    } else {
      if ((root != null) && root.length > 0) {
        root.remove();
      }
      root = jQuery(makeElementStr.call(f, k, value, parentClassName)).appendTo(parent);
      if (isCache) {
        return root.addClass(cacheClassName);
      }
    }
  });
};

getTimelinePageValueSortedListByNum = function() {
  var count, index, k, timelineList, timelinePageValues, v;
  timelinePageValues = getTimelinePageValue(Constant.PageValueKey.TE_PREFIX);
  if (timelinePageValues == null) {
    return [];
  }
  count = getTimelinePageValue(Constant.PageValueKey.TE_COUNT);
  timelineList = new Array(count);
  for (k in timelinePageValues) {
    v = timelinePageValues[k];
    if (k.indexOf(Constant.PageValueKey.TE_NUM_PREFIX) === 0) {
      index = parseInt(k.substring(Constant.PageValueKey.TE_NUM_PREFIX.length)) - 1;
      timelineList[index] = v;
    }
  }
  return timelineList;
};

removePageValue = function(key) {
  return getPageValue(key, true);
};

sanitaizeEncode = function(str) {
  if ((str != null) && typeof str === "string") {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
  } else {
    return str;
  }
};

sanitaizeDecode = function(str) {
  if ((str != null) && typeof str === "string") {
    return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&amp;/g, '&');
  } else {
    return str;
  }
};

getClassFromMap = function(isCommon, id) {
  var c, i;
  if (window.classMap == null) {
    window.classMap = {};
  }
  c = isCommon;
  i = id;
  if (typeof c === "boolean") {
    if (c) {
      c = "1";
    } else {
      c = "0";
    }
  }
  if (typeof i !== "string") {
    i = String(id);
  }
  if ((window.classMap[c] == null) || (window.classMap[c][i] == null)) {
    return null;
  }
  return window.classMap[c][i];
};

setClassToMap = function(isCommon, id, value) {
  var c, i;
  c = isCommon;
  i = id;
  if (typeof c === "boolean") {
    if (c) {
      c = "1";
    } else {
      c = "0";
    }
  }
  if (typeof i !== "string") {
    i = String(id);
  }
  if (window.classMap == null) {
    window.classMap = {};
  }
  if (window.classMap[c] == null) {
    window.classMap[c] = {};
  }
  return window.classMap[c][i] = value;
};

getInstanceFromMap = function(timelineEvent) {
  var classMapId, id, isCommonEvent;
  isCommonEvent = timelineEvent[TimelineEvent.PageValueKey.IS_COMMON_EVENT];
  id = isCommonEvent ? timelineEvent[TimelineEvent.PageValueKey.COMMON_EVENT_ID] : timelineEvent[TimelineEvent.PageValueKey.ID];
  classMapId = isCommonEvent ? timelineEvent[TimelineEvent.PageValueKey.COMMON_EVENT_ID] : timelineEvent[TimelineEvent.PageValueKey.ITEM_ID];
  if (typeof isCommonEvent === "boolean") {
    if (isCommonEvent) {
      isCommonEvent = "1";
    } else {
      isCommonEvent = "0";
    }
  }
  if (typeof id !== "string") {
    id = String(id);
  }
  setInstanceFromMap(isCommonEvent, id, classMapId);
  return window.instanceMap[isCommonEvent][id];
};

setInstanceFromMap = function(isCommonEvent, id, itemId) {
  if (itemId == null) {
    itemId = id;
  }
  if (window.instanceMap == null) {
    window.instanceMap = {};
  }
  if (typeof isCommonEvent === "boolean") {
    if (isCommonEvent) {
      isCommonEvent = "1";
    } else {
      isCommonEvent = "0";
    }
  }
  if (typeof id !== "string") {
    id = String(id);
  }
  if (window.instanceMap[isCommonEvent] == null) {
    !(window.instanceMap[isCommonEvent] = {});
  }
  if (window.instanceMap[isCommonEvent][id] == null) {
    return window.instanceMap[isCommonEvent][id] = new (getClassFromMap(isCommonEvent, itemId))();
  }
};

getCreatedItemObject = function() {
  var k, ret, v;
  ret = {};
  for (k in createdObject) {
    v = createdObject[k];
    if (v instanceof CommonEventBase === false) {
      ret[k] = v;
    }
  }
  return ret;
};

clearItemAndEvent = function() {};

(function() {
  window.loadedItemTypeList = [];
  window.loadedClassList = {};
  return window.classMap = {};
})();

$(function() {
  window.drawingCanvas = document.getElementById('canvas_container');
  return window.drawingContext = drawingCanvas.getContext('2d');
});

//# sourceMappingURL=common.js.map
