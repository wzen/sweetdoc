// Generated by CoffeeScript 1.9.2
var TLEItemChange,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TLEItemChange = (function(superClass) {
  extend(TLEItemChange, superClass);

  function TLEItemChange() {
    return TLEItemChange.__super__.constructor.apply(this, arguments);
  }

  TLEItemChange.minObj = 'item_minobj';

  TLEItemChange.itemSize = 'item_size';

  TLEItemChange.initConfigValue = function(timelineConfig, item) {
    return this.initCommonConfigValue(timelineConfig);
  };

  TLEItemChange.updateAllScrollLength = function(item) {
    var start;
    if (item.coodRegist.length > 0) {
      start = parseInt(getPageValue(Constant.PageValueKey.TE_ALL_SCROLL_LENGTH));
      start += item.coodRegist.length;
      return setPageValue(Constant.PageValueKey.TE_ALL_SCROLL_LENGTH, start);
    }
  };

  TLEItemChange.writeDefaultToPageValue = function(item) {
    var actionType, end, errorMes, itemWriteValue, scrollPoint, start, teNum, value, writeValue;
    errorMes = "";
    writeValue = {};
    writeValue[this.PageValueKey.ID] = item.id;
    writeValue[this.PageValueKey.ITEM_ID] = item.constructor.ITEM_ID;
    writeValue[this.PageValueKey.ACTION_EVENT_TYPE_ID] = null;
    writeValue[this.PageValueKey.CHAPTER] = 1;
    writeValue[this.PageValueKey.CHAPTER] = 1;
    writeValue[this.PageValueKey.IS_COMMON_EVENT] = false;
    writeValue[this.PageValueKey.METHODNAME] = item.constructor.defaultMethodName();
    actionType = item.constructor.defaultActionType();
    writeValue[this.PageValueKey.ACTIONTYPE] = actionType;
    start = parseInt(getPageValue(Constant.PageValueKey.TE_ALL_SCROLL_LENGTH));
    end = start + item.coodRegist.length;
    if (start < end) {
      scrollPoint = "" + start + this.PageValueKey.SCROLL_POINT_SEP + end;
    } else {
      scrollPoint = null;
    }
    writeValue[this.PageValueKey.SCROLL_POINT] = scrollPoint;
    writeValue[this.PageValueKey.IS_CLICK_PARALLEL] = false;
    itemWriteValue = item.objWriteTimeline();
    $.extend(writeValue, itemWriteValue);
    if (errorMes.length === 0) {
      value = item.constructor.timelineDefaultConfigValue();
      writeValue[this.PageValueKey.VALUE] = value;
      teNum = getPageValue(Constant.PageValueKey.TE_COUNT);
      if (teNum != null) {
        teNum = parseInt(teNum) + 1;
      } else {
        teNum = 1;
      }
      setPageValue(this.PageValueKey.te(teNum), writeValue);
      setPageValue(Constant.PageValueKey.TE_COUNT, teNum);
    }
    return errorMes;
  };

  TLEItemChange.writeToPageValue = function(timelineConfig, item) {
    var errorMes, itemWriteValue, value, writeValue;
    errorMes = "";
    writeValue = this.commonWriteValue(timelineConfig);
    itemWriteValue = item.objWriteTimeline();
    $.extend(writeValue, itemWriteValue);
    if (errorMes.length === 0) {
      value = item.timelineConfigValue();
      writeValue[this.PageValueKey.VALUE] = value;
      setPageValue(this.PageValueKey.te(timelineConfig.teNum), writeValue);
      setPageValue(Constant.PageValueKey.TE_COUNT, timelineConfig.teNum);
    }
    return errorMes;
  };

  TLEItemChange.readFromPageValue = function(timelineConfig, item) {
    return this.commonReadValue(timelineConfig);
  };

  return TLEItemChange;

})(TimelineEvent);

//# sourceMappingURL=item_change.js.map
